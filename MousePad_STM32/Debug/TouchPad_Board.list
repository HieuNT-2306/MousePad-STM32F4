
TouchPad_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7f4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf0  0800e9a4  0800e9a4  0000f9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010594  08010594  000121e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010594  08010594  00011594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801059c  0801059c  000121e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801059c  0801059c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105a0  080105a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080105a4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121e4  2**0
                  CONTENTS
 10 .bss          000010b4  200001e4  200001e4  000121e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001298  20001298  000121e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002782b  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005567  00000000  00000000  00039a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002238  00000000  00000000  0003efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a7b  00000000  00000000  000411e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b225  00000000  00000000  00042c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f60  00000000  00000000  0006de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef55f  00000000  00000000  00097de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018733f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009668  00000000  00000000  00187384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  001909ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e98c 	.word	0x0800e98c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800e98c 	.word	0x0800e98c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b08f      	sub	sp, #60	@ 0x3c
 80005d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d2:	f003 f9cf 	bl	8003974 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d6:	f000 f921 	bl	800081c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005da:	f000 fb7b 	bl	8000cd4 <MX_GPIO_Init>
	MX_DMA2D_Init();
 80005de:	f000 f987 	bl	80008f0 <MX_DMA2D_Init>
	MX_FMC_Init();
 80005e2:	f000 fb27 	bl	8000c34 <MX_FMC_Init>
	MX_I2C3_Init();
 80005e6:	f000 f9b5 	bl	8000954 <MX_I2C3_Init>
	MX_LTDC_Init();
 80005ea:	f000 f9f3 	bl	80009d4 <MX_LTDC_Init>
	MX_TIM1_Init();
 80005ee:	f000 faa7 	bl	8000b40 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80005f2:	f000 faf5 	bl	8000be0 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80005f6:	f00d f8e1 	bl	800d7bc <MX_USB_DEVICE_Init>
	MX_SPI5_Init();
 80005fa:	f000 fa6b 	bl	8000ad4 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */

	BSP_SDRAM_Init();
 80005fe:	f002 fadd 	bl	8002bbc <BSP_SDRAM_Init>
	BSP_LCD_Init();
 8000602:	f001 fcc3 	bl	8001f8c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000606:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800060a:	2000      	movs	r0, #0
 800060c:	f001 fd40 	bl	8002090 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8000610:	2000      	movs	r0, #0
 8000612:	f001 fda1 	bl	8002158 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000616:	f002 f8d3 	bl	80027c0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800061a:	f04f 30ff 	mov.w	r0, #4294967295
 800061e:	f001 fddd 	bl	80021dc <BSP_LCD_Clear>

    char debug_buf[50];
	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK) {
 8000622:	f001 fd1d 	bl	8002060 <BSP_LCD_GetXSize>
 8000626:	4603      	mov	r3, r0
 8000628:	b29c      	uxth	r4, r3
 800062a:	f001 fd25 	bl	8002078 <BSP_LCD_GetYSize>
 800062e:	4603      	mov	r3, r0
 8000630:	b29b      	uxth	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	4620      	mov	r0, r4
 8000636:	f002 fc8b 	bl	8002f50 <BSP_TS_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d01a      	beq.n	8000676 <main+0xaa>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000640:	4866      	ldr	r0, [pc, #408]	@ (80007dc <main+0x210>)
 8000642:	f001 fd99 	bl	8002178 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "TOUCH_INIT_FAILED",
 8000646:	2301      	movs	r3, #1
 8000648:	4a65      	ldr	r2, [pc, #404]	@ (80007e0 <main+0x214>)
 800064a:	2100      	movs	r1, #0
 800064c:	2000      	movs	r0, #0
 800064e:	f001 fe31 	bl	80022b4 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		sprintf(debug_buf, "TOUCHSCREEN INIT FAILED\r\n");
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4963      	ldr	r1, [pc, #396]	@ (80007e4 <main+0x218>)
 8000656:	4618      	mov	r0, r3
 8000658:	f00d fcf8 	bl	800e04c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) debug_buf, strlen(debug_buf),
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdc6 	bl	80001f0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	2364      	movs	r3, #100	@ 0x64
 800066c:	485e      	ldr	r0, [pc, #376]	@ (80007e8 <main+0x21c>)
 800066e:	f009 fb29 	bl	8009cc4 <HAL_UART_Transmit>
				100);
		while (1)
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <main+0xa6>
			;
	} else {
		sprintf(debug_buf, "Touchpad Initialized Successfully!\r\n");
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	495c      	ldr	r1, [pc, #368]	@ (80007ec <main+0x220>)
 800067a:	4618      	mov	r0, r3
 800067c:	f00d fce6 	bl	800e04c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) debug_buf, strlen(debug_buf),
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fdb4 	bl	80001f0 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	2364      	movs	r3, #100	@ 0x64
 8000690:	4855      	ldr	r0, [pc, #340]	@ (80007e8 <main+0x21c>)
 8000692:	f009 fb17 	bl	8009cc4 <HAL_UART_Transmit>
				100);
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000696:	4856      	ldr	r0, [pc, #344]	@ (80007f0 <main+0x224>)
 8000698:	f001 fd6e 	bl	8002178 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "Touchpad Ready", CENTER_MODE);
 800069c:	2301      	movs	r3, #1
 800069e:	4a55      	ldr	r2, [pc, #340]	@ (80007f4 <main+0x228>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 fe06 	bl	80022b4 <BSP_LCD_DisplayStringAt>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80006a8:	4851      	ldr	r0, [pc, #324]	@ (80007f0 <main+0x224>)
 80006aa:	f001 fd65 	bl	8002178 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, 15, (uint8_t*) "Touchpad Maximized!",
 80006ae:	2301      	movs	r3, #1
 80006b0:	4a51      	ldr	r2, [pc, #324]	@ (80007f8 <main+0x22c>)
 80006b2:	210f      	movs	r1, #15
 80006b4:	2000      	movs	r0, #0
 80006b6:	f001 fdfd 	bl	80022b4 <BSP_LCD_DisplayStringAt>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		BSP_TS_GetState(&ts_state);
 80006ba:	4850      	ldr	r0, [pc, #320]	@ (80007fc <main+0x230>)
 80006bc:	f002 fc82 	bl	8002fc4 <BSP_TS_GetState>

		if (ts_state.TouchDetected) {
 80006c0:	4b4e      	ldr	r3, [pc, #312]	@ (80007fc <main+0x230>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d06d      	beq.n	80007a4 <main+0x1d8>
			// --- Gửi dữ liệu chuột HID ---
			if (last_touch_x != -1) // Chỉ cần kiểm tra 1 biến là đủ
 80006c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000800 <main+0x234>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d2:	d035      	beq.n	8000740 <main+0x174>
			{
				sprintf(debug_buf, "Touch Detected at: X=%d, Y=%d\r\n", ts_state.X, ts_state.Y);
 80006d4:	4b49      	ldr	r3, [pc, #292]	@ (80007fc <main+0x230>)
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b48      	ldr	r3, [pc, #288]	@ (80007fc <main+0x230>)
 80006dc:	889b      	ldrh	r3, [r3, #4]
 80006de:	1d38      	adds	r0, r7, #4
 80006e0:	4948      	ldr	r1, [pc, #288]	@ (8000804 <main+0x238>)
 80006e2:	f00d fcb3 	bl	800e04c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) debug_buf, strlen(debug_buf), 100);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd81 	bl	80001f0 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	2364      	movs	r3, #100	@ 0x64
 80006f6:	483c      	ldr	r0, [pc, #240]	@ (80007e8 <main+0x21c>)
 80006f8:	f009 fae4 	bl	8009cc4 <HAL_UART_Transmit>

				// Tính toán delta và gửi đi ngay lập tức
				uint8_t mouse_buffer[4] = { 0 };
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
				mouse_buffer[1] = (int8_t) ((ts_state.X - last_touch_x) * 3);
 8000700:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <main+0x230>)
 8000702:	885b      	ldrh	r3, [r3, #2]
 8000704:	461a      	mov	r2, r3
 8000706:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <main+0x234>)
 8000708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	4413      	add	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	707b      	strb	r3, [r7, #1]
				mouse_buffer[2] = (int8_t) ((ts_state.Y - last_touch_y) * 3);
 800071a:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <main+0x230>)
 800071c:	889b      	ldrh	r3, [r3, #4]
 800071e:	461a      	mov	r2, r3
 8000720:	4b39      	ldr	r3, [pc, #228]	@ (8000808 <main+0x23c>)
 8000722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	4413      	add	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	70bb      	strb	r3, [r7, #2]
				USBD_HID_SendReport(&hUsbDeviceHS, mouse_buffer,
 8000734:	463b      	mov	r3, r7
 8000736:	2204      	movs	r2, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4834      	ldr	r0, [pc, #208]	@ (800080c <main+0x240>)
 800073c:	f00b fc9c 	bl	800c078 <USBD_HID_SendReport>
						sizeof(mouse_buffer));
			}

			last_touch_x = ts_state.X;
 8000740:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <main+0x230>)
 8000742:	885b      	ldrh	r3, [r3, #2]
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <main+0x234>)
 8000748:	801a      	strh	r2, [r3, #0]
			last_touch_y = ts_state.Y;
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <main+0x230>)
 800074c:	889b      	ldrh	r3, [r3, #4]
 800074e:	b21a      	sxth	r2, r3
 8000750:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <main+0x23c>)
 8000752:	801a      	strh	r2, [r3, #0]

			// --- Hiệu ứng đồ họa được tối ưu hóa ---
			if (touch_active) {
 8000754:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <main+0x244>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00b      	beq.n	8000774 <main+0x1a8>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f001 fd0a 	bl	8002178 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(last_drawn_x, last_drawn_y, 6);
 8000764:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <main+0x248>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4a2b      	ldr	r2, [pc, #172]	@ (8000818 <main+0x24c>)
 800076a:	8811      	ldrh	r1, [r2, #0]
 800076c:	2206      	movs	r2, #6
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff86 	bl	8002680 <BSP_LCD_FillCircle>
			}
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000774:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000778:	f001 fcfe 	bl	8002178 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(ts_state.X, ts_state.Y, 5);
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <main+0x230>)
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <main+0x230>)
 8000782:	8891      	ldrh	r1, [r2, #4]
 8000784:	2205      	movs	r2, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ff7a 	bl	8002680 <BSP_LCD_FillCircle>
			touch_active = 1;
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <main+0x244>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			last_drawn_x = ts_state.X;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <main+0x230>)
 8000794:	885a      	ldrh	r2, [r3, #2]
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <main+0x248>)
 8000798:	801a      	strh	r2, [r3, #0]
			last_drawn_y = ts_state.Y;
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <main+0x230>)
 800079c:	889a      	ldrh	r2, [r3, #4]
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <main+0x24c>)
 80007a0:	801a      	strh	r2, [r3, #0]
 80007a2:	e016      	b.n	80007d2 <main+0x206>
		} else {
			if (touch_active) {
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <main+0x244>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00e      	beq.n	80007ca <main+0x1fe>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f001 fce2 	bl	8002178 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(last_drawn_x, last_drawn_y, 6);
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <main+0x248>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <main+0x24c>)
 80007ba:	8811      	ldrh	r1, [r2, #0]
 80007bc:	2206      	movs	r2, #6
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff5e 	bl	8002680 <BSP_LCD_FillCircle>
				touch_active = 0;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <main+0x244>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
			}
			last_touch_x = -1;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <main+0x234>)
 80007cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d0:	801a      	strh	r2, [r3, #0]
		}

		// Delay một khoảng rất nhỏ, có thể thử nghiệm giảm xuống 2-3ms
		HAL_Delay(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f003 f910 	bl	80039f8 <HAL_Delay>
		BSP_TS_GetState(&ts_state);
 80007d8:	e76f      	b.n	80006ba <main+0xee>
 80007da:	bf00      	nop
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	0800e9a4 	.word	0x0800e9a4
 80007e4:	0800e9b8 	.word	0x0800e9b8
 80007e8:	200003dc 	.word	0x200003dc
 80007ec:	0800e9d4 	.word	0x0800e9d4
 80007f0:	ff0000ff 	.word	0xff0000ff
 80007f4:	0800e9fc 	.word	0x0800e9fc
 80007f8:	0800ea0c 	.word	0x0800ea0c
 80007fc:	20000458 	.word	0x20000458
 8000800:	20000000 	.word	0x20000000
 8000804:	0800ea20 	.word	0x0800ea20
 8000808:	20000002 	.word	0x20000002
 800080c:	2000077c 	.word	0x2000077c
 8000810:	20000460 	.word	0x20000460
 8000814:	20000462 	.word	0x20000462
 8000818:	20000464 	.word	0x20000464

0800081c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00d fc30 	bl	800e090 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	@ (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xd0>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000894:	2348      	movs	r3, #72	@ 0x48
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800089c:	2303      	movs	r3, #3
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 f82b 	bl	8007900 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x98>
		Error_Handler();
 80008b0:	f000 fb32 	bl	8000f18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2102      	movs	r1, #2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f007 fa8d 	bl	8007df0 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc4>
		Error_Handler();
 80008dc:	f000 fb1c 	bl	8000f18 <Error_Handler>
	}
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_DMA2D_Init+0x5c>)
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <MX_DMA2D_Init+0x60>)
 80008f8:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_DMA2D_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_DMA2D_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_DMA2D_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000924:	4809      	ldr	r0, [pc, #36]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000926:	f003 fb2b 	bl	8003f80 <HAL_DMA2D_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000930:	f000 faf2 	bl	8000f18 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000934:	2101      	movs	r1, #1
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_DMA2D_Init+0x5c>)
 8000938:	f003 fd90 	bl	800445c <HAL_DMA2D_ConfigLayer>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000942:	f000 fae9 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000200 	.word	0x20000200
 8000950:	4002b000 	.word	0x4002b000

08000954 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_I2C3_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <MX_I2C3_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <MX_I2C3_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_I2C3_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000972:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000976:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_I2C3_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_I2C3_Init+0x74>)
 8000992:	f004 f963 	bl	8004c5c <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C3_Init+0x4c>
		Error_Handler();
 800099c:	f000 fabc 	bl	8000f18 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <MX_I2C3_Init+0x74>)
 80009a4:	f005 f9bc 	bl	8005d20 <HAL_I2CEx_ConfigAnalogFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80009ae:	f000 fab3 	bl	8000f18 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80009b2:	2100      	movs	r1, #0
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_I2C3_Init+0x74>)
 80009b6:	f005 f9ef 	bl	8005d98 <HAL_I2CEx_ConfigDigitalFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C3_Init+0x70>
		Error_Handler();
 80009c0:	f000 faaa 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000240 	.word	0x20000240
 80009cc:	40005c00 	.word	0x40005c00
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2234      	movs	r2, #52	@ 0x34
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f00d fb55 	bl	800e090 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80009e6:	4b39      	ldr	r3, [pc, #228]	@ (8000acc <MX_LTDC_Init+0xf8>)
 80009e8:	4a39      	ldr	r2, [pc, #228]	@ (8000ad0 <MX_LTDC_Init+0xfc>)
 80009ea:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009ec:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <MX_LTDC_Init+0xf8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_LTDC_Init+0xf8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009f8:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <MX_LTDC_Init+0xf8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009fe:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000a04:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a06:	2209      	movs	r2, #9
 8000a08:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a12:	221d      	movs	r2, #29
 8000a14:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a1e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a26:	f240 1243 	movw	r2, #323	@ 0x143
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a2e:	f240 1217 	movw	r2, #279	@ 0x117
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a36:	f240 1247 	movw	r2, #327	@ 0x147
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000a54:	481d      	ldr	r0, [pc, #116]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000a56:	f005 f9de 	bl	8005e16 <HAL_LTDC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_LTDC_Init+0x90>
		Error_Handler();
 8000a60:	f000 fa5a 	bl	8000f18 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 8000a68:	23f0      	movs	r3, #240	@ 0xf0
 8000a6a:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 8000a70:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a74:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8000a7a:	23ff      	movs	r3, #255	@ 0xff
 8000a7c:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a86:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000a8c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 8000a92:	23f0      	movs	r3, #240	@ 0xf0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 8000a96:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_LTDC_Init+0xf8>)
 8000ab6:	f005 fb0d 	bl	80060d4 <HAL_LTDC_ConfigLayer>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_LTDC_Init+0xf0>
		Error_Handler();
 8000ac0:	f000 fa2a 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3738      	adds	r7, #56	@ 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000294 	.word	0x20000294
 8000ad0:	40016800 	.word	0x40016800

08000ad4 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000ada:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <MX_SPI5_Init+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b04:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_SPI5_Init+0x64>)
 8000b26:	f007 fe06 	bl	8008736 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_SPI5_Init+0x60>
		Error_Handler();
 8000b30:	f000 f9f2 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000033c 	.word	0x2000033c
 8000b3c:	40015000 	.word	0x40015000

08000b40 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <MX_TIM1_Init+0x9c>)
 8000b60:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b88:	4813      	ldr	r0, [pc, #76]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b8a:	f008 fbdb 	bl	8009344 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000b94:	f000 f9c0 	bl	8000f18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000ba6:	f008 fd7d 	bl	80096a4 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000bb0:	f000 f9b2 	bl	8000f18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000bc2:	f008 ff9f 	bl	8009b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000bcc:	f000 f9a4 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000394 	.word	0x20000394
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <MX_USART1_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_USART1_UART_Init+0x4c>)
 8000c18:	f009 f804 	bl	8009c24 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000c22:	f000 f979 	bl	8000f18 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200003dc 	.word	0x200003dc
 8000c30:	40011000 	.word	0x40011000

08000c34 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c4e:	4a20      	ldr	r2, [pc, #128]	@ (8000cd0 <MX_FMC_Init+0x9c>)
 8000c50:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c66:	2210      	movs	r2, #16
 8000c68:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c6c:	2240      	movs	r2, #64	@ 0x40
 8000c6e:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c72:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c76:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c84:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_FMC_Init+0x98>)
 8000cb6:	f007 fcad 	bl	8008614 <HAL_SDRAM_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_FMC_Init+0x90>
		Error_Handler();
 8000cc0:	f000 f92a 	bl	8000f18 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000424 	.word	0x20000424
 8000cd0:	a0000140 	.word	0xa0000140

08000cd4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	@ 0x38
 8000cd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	4b7b      	ldr	r3, [pc, #492]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b78      	ldr	r3, [pc, #480]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	4b74      	ldr	r3, [pc, #464]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a73      	ldr	r2, [pc, #460]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b71      	ldr	r3, [pc, #452]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	4b6d      	ldr	r3, [pc, #436]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b6a      	ldr	r3, [pc, #424]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	4b66      	ldr	r3, [pc, #408]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a65      	ldr	r2, [pc, #404]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b63      	ldr	r3, [pc, #396]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a5e      	ldr	r2, [pc, #376]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b58      	ldr	r3, [pc, #352]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a57      	ldr	r2, [pc, #348]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b55      	ldr	r3, [pc, #340]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a50      	ldr	r2, [pc, #320]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b4e      	ldr	r3, [pc, #312]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b4a      	ldr	r3, [pc, #296]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a49      	ldr	r2, [pc, #292]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <MX_GPIO_Init+0x208>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2116      	movs	r1, #22
 8000dce:	4844      	ldr	r0, [pc, #272]	@ (8000ee0 <MX_GPIO_Init+0x20c>)
 8000dd0:	f003 ff2a 	bl	8004c28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2180      	movs	r1, #128	@ 0x80
 8000dd8:	4842      	ldr	r0, [pc, #264]	@ (8000ee4 <MX_GPIO_Init+0x210>)
 8000dda:	f003 ff25 	bl	8004c28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000de4:	4840      	ldr	r0, [pc, #256]	@ (8000ee8 <MX_GPIO_Init+0x214>)
 8000de6:	f003 ff1f 	bl	8004c28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000df0:	483e      	ldr	r0, [pc, #248]	@ (8000eec <MX_GPIO_Init+0x218>)
 8000df2:	f003 ff19 	bl	8004c28 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000df6:	2316      	movs	r3, #22
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4834      	ldr	r0, [pc, #208]	@ (8000ee0 <MX_GPIO_Init+0x20c>)
 8000e0e:	f003 fc53 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000e12:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	482e      	ldr	r0, [pc, #184]	@ (8000ee4 <MX_GPIO_Init+0x210>)
 8000e2a:	f003 fc45 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e2e:	2380      	movs	r3, #128	@ 0x80
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <MX_GPIO_Init+0x210>)
 8000e46:	f003 fc37 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4820      	ldr	r0, [pc, #128]	@ (8000ee0 <MX_GPIO_Init+0x20c>)
 8000e60:	f003 fc2a 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <MX_GPIO_Init+0x21c>)
 8000e78:	f003 fc1e 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <MX_GPIO_Init+0x214>)
 8000e92:	f003 fc11 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000e96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <MX_GPIO_Init+0x214>)
 8000eb0:	f003 fc02 	bl	80046b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000eb4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	@ (8000eec <MX_GPIO_Init+0x218>)
 8000ece:	f003 fbf3 	bl	80046b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3738      	adds	r7, #56	@ 0x38
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f06:	f002 fd57 	bl	80039b8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40001000 	.word	0x40001000

08000f18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_DMA2D_MspInit+0x48>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d115      	bne.n	8000fb2 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_DMA2D_MspInit+0x4c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <HAL_DMA2D_MspInit+0x4c>)
 8000f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_DMA2D_MspInit+0x4c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	205a      	movs	r0, #90	@ 0x5a
 8000fa8:	f002 fe02 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fac:	205a      	movs	r0, #90	@ 0x5a
 8000fae:	f002 fe1b 	bl	8003be8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	4002b000 	.word	0x4002b000
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a29      	ldr	r2, [pc, #164]	@ (8001088 <HAL_I2C_MspInit+0xc4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d14b      	bne.n	800107e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b28      	ldr	r3, [pc, #160]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a27      	ldr	r2, [pc, #156]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b25      	ldr	r3, [pc, #148]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a20      	ldr	r2, [pc, #128]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800101e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001030:	2304      	movs	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4815      	ldr	r0, [pc, #84]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 800103c:	f003 fb3c 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <HAL_I2C_MspInit+0xd0>)
 800105e:	f003 fb2b 	bl	80046b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 800106c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40005c00 	.word	0x40005c00
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020000 	.word	0x40020000

08001098 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_I2C_MspDeInit+0x3c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10f      	bne.n	80010ca <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_I2C_MspDeInit+0x40>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_I2C_MspDeInit+0x40>)
 80010b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80010b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ba:	4808      	ldr	r0, [pc, #32]	@ (80010dc <HAL_I2C_MspDeInit+0x44>)
 80010bc:	f003 fca8 	bl	8004a10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80010c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <HAL_I2C_MspDeInit+0x48>)
 80010c6:	f003 fca3 	bl	8004a10 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40005c00 	.word	0x40005c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09a      	sub	sp, #104	@ 0x68
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001100:	2230      	movs	r2, #48	@ 0x30
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00c ffc3 	bl	800e090 <memset>
  if(hltdc->Instance==LTDC)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a85      	ldr	r2, [pc, #532]	@ (8001324 <HAL_LTDC_MspInit+0x240>)
 8001110:	4293      	cmp	r3, r2
 8001112:	f040 8102 	bne.w	800131a <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001116:	2308      	movs	r3, #8
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800111a:	2332      	movs	r3, #50	@ 0x32
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001122:	2300      	movs	r3, #0
 8001124:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	4618      	mov	r0, r3
 800112c:	f007 f8b2 	bl	8008294 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001136:	f7ff feef 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	4b7a      	ldr	r3, [pc, #488]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a79      	ldr	r2, [pc, #484]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001144:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b77      	ldr	r3, [pc, #476]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	4b73      	ldr	r3, [pc, #460]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a72      	ldr	r2, [pc, #456]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b70      	ldr	r3, [pc, #448]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0320 	and.w	r3, r3, #32
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	4b6c      	ldr	r3, [pc, #432]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a6b      	ldr	r2, [pc, #428]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b69      	ldr	r3, [pc, #420]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a64      	ldr	r2, [pc, #400]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b62      	ldr	r3, [pc, #392]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a56      	ldr	r2, [pc, #344]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b50      	ldr	r3, [pc, #320]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001328 <HAL_LTDC_MspInit+0x244>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001210:	230e      	movs	r3, #14
 8001212:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001218:	4619      	mov	r1, r3
 800121a:	4844      	ldr	r0, [pc, #272]	@ (800132c <HAL_LTDC_MspInit+0x248>)
 800121c:	f003 fa4c 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001220:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001224:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001232:	230e      	movs	r3, #14
 8001234:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800123a:	4619      	mov	r1, r3
 800123c:	483c      	ldr	r0, [pc, #240]	@ (8001330 <HAL_LTDC_MspInit+0x24c>)
 800123e:	f003 fa3b 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001242:	2303      	movs	r3, #3
 8001244:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001252:	2309      	movs	r3, #9
 8001254:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125a:	4619      	mov	r1, r3
 800125c:	4835      	ldr	r0, [pc, #212]	@ (8001334 <HAL_LTDC_MspInit+0x250>)
 800125e:	f003 fa2b 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001262:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001266:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001274:	230e      	movs	r3, #14
 8001276:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800127c:	4619      	mov	r1, r3
 800127e:	482d      	ldr	r0, [pc, #180]	@ (8001334 <HAL_LTDC_MspInit+0x250>)
 8001280:	f003 fa1a 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001284:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001288:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001296:	230e      	movs	r3, #14
 8001298:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129e:	4619      	mov	r1, r3
 80012a0:	4825      	ldr	r0, [pc, #148]	@ (8001338 <HAL_LTDC_MspInit+0x254>)
 80012a2:	f003 fa09 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012a6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b8:	230e      	movs	r3, #14
 80012ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c0:	4619      	mov	r1, r3
 80012c2:	481e      	ldr	r0, [pc, #120]	@ (800133c <HAL_LTDC_MspInit+0x258>)
 80012c4:	f003 f9f8 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012c8:	2348      	movs	r3, #72	@ 0x48
 80012ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d8:	230e      	movs	r3, #14
 80012da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012e0:	4619      	mov	r1, r3
 80012e2:	4817      	ldr	r0, [pc, #92]	@ (8001340 <HAL_LTDC_MspInit+0x25c>)
 80012e4:	f003 f9e8 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012fa:	2309      	movs	r3, #9
 80012fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <HAL_LTDC_MspInit+0x254>)
 8001306:	f003 f9d7 	bl	80046b8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2058      	movs	r0, #88	@ 0x58
 8001310:	f002 fc4e 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001314:	2058      	movs	r0, #88	@ 0x58
 8001316:	f002 fc67 	bl	8003be8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3768      	adds	r7, #104	@ 0x68
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40016800 	.word	0x40016800
 8001328:	40023800 	.word	0x40023800
 800132c:	40021400 	.word	0x40021400
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40021800 	.word	0x40021800
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00

08001344 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_SPI_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800139e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <HAL_SPI_MspInit+0x8c>)
 80013bc:	f003 f97c 	bl	80046b8 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40015000 	.word	0x40015000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021400 	.word	0x40021400

080013d4 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_SPI_MspDeInit+0x30>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10a      	bne.n	80013fc <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_SPI_MspDeInit+0x34>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_SPI_MspDeInit+0x34>)
 80013ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80013f2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_SPI_MspDeInit+0x38>)
 80013f8:	f003 fb0a 	bl	8004a10 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40015000 	.word	0x40015000
 8001408:	40023800 	.word	0x40023800
 800140c:	40021400 	.word	0x40021400

08001410 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_TIM_Base_MspInit+0x3c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10d      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12c      	bne.n	80014d0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <HAL_UART_MspInit+0x8c>)
 80014cc:	f003 f8f4 	bl	80046b8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014f8:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d16f      	bne.n	80015e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	4a37      	ldr	r2, [pc, #220]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6393      	str	r3, [r2, #56]	@ 0x38
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001522:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001526:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <HAL_FMC_MspInit+0x10c>)
 800153e:	f003 f8bb 	bl	80046b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001552:	230c      	movs	r3, #12
 8001554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4826      	ldr	r0, [pc, #152]	@ (80015f4 <HAL_FMC_MspInit+0x110>)
 800155c:	f003 f8ac 	bl	80046b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001560:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001564:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	481f      	ldr	r0, [pc, #124]	@ (80015f8 <HAL_FMC_MspInit+0x114>)
 800157c:	f003 f89c 	bl	80046b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001580:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001584:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <HAL_FMC_MspInit+0x118>)
 800159c:	f003 f88c 	bl	80046b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b2:	230c      	movs	r3, #12
 80015b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4811      	ldr	r0, [pc, #68]	@ (8001600 <HAL_FMC_MspInit+0x11c>)
 80015bc:	f003 f87c 	bl	80046b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015c0:	2360      	movs	r3, #96	@ 0x60
 80015c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <HAL_FMC_MspInit+0x120>)
 80015da:	f003 f86d 	bl	80046b8 <HAL_GPIO_Init>
 80015de:	e000      	b.n	80015e2 <HAL_FMC_MspInit+0xfe>
    return;
 80015e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000468 	.word	0x20000468
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001610:	f7ff ff68 	bl	80014e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_InitTick+0xe4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_InitTick+0xe4>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <HAL_InitTick+0xe4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fdec 	bl	8008230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001662:	f006 fdbd 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 8001666:	6378      	str	r0, [r7, #52]	@ 0x34
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800166a:	f006 fdb9 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001676:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <HAL_InitTick+0xe8>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_InitTick+0xec>)
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <HAL_InitTick+0xf0>)
 8001686:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_InitTick+0xec>)
 800168a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_InitTick+0xec>)
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_InitTick+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_InitTick+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_InitTick+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016a8:	4817      	ldr	r0, [pc, #92]	@ (8001708 <HAL_InitTick+0xec>)
 80016aa:	f007 fe4b 	bl	8009344 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11b      	bne.n	80016f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <HAL_InitTick+0xec>)
 80016be:	f007 fe91 	bl	80093e4 <HAL_TIM_Base_Start_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d0:	2036      	movs	r0, #54	@ 0x36
 80016d2:	f002 fa89 	bl	8003be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d808      	bhi.n	80016ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2036      	movs	r0, #54	@ 0x36
 80016e2:	f002 fa65 	bl	8003bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_InitTick+0xf4>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e002      	b.n	80016f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3738      	adds	r7, #56	@ 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	2000046c 	.word	0x2000046c
 800170c:	40001000 	.word	0x40001000
 8001710:	2000007c 	.word	0x2000007c

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM6_DAC_IRQHandler+0x10>)
 800177a:	f007 fea3 	bl	80094c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000046c 	.word	0x2000046c

08001788 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <OTG_HS_IRQHandler+0x10>)
 800178e:	f004 ffc0 	bl	8006712 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000c58 	.word	0x20000c58

0800179c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <LTDC_IRQHandler+0x10>)
 80017a2:	f004 fbd5 	bl	8005f50 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000294 	.word	0x20000294

080017b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA2D_IRQHandler+0x10>)
 80017b6:	f002 fd40 	bl	800423a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000200 	.word	0x20000200

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f00c fc54 	bl	800e0a0 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20030000 	.word	0x20030000
 8001824:	00000400 	.word	0x00000400
 8001828:	200004b4 	.word	0x200004b4
 800182c:	20001298 	.word	0x20001298

08001830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800188c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001882:	f00c fc13 	bl	800e0ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7fe fea1 	bl	80005cc <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800188c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001898:	080105a4 	.word	0x080105a4
  ldr r2, =_sbss
 800189c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018a0:	20001298 	.word	0x20001298

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a33      	ldr	r2, [pc, #204]	@ (8001984 <I2Cx_MspInit+0xdc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d15f      	bne.n	800197a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a31      	ldr	r2, [pc, #196]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a2a      	ldr	r2, [pc, #168]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <I2Cx_MspInit+0xe0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80018f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80018f8:	2312      	movs	r3, #18
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001904:	2304      	movs	r3, #4
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	481f      	ldr	r0, [pc, #124]	@ (800198c <I2Cx_MspInit+0xe4>)
 8001910:	f002 fed2 	bl	80046b8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001918:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <I2Cx_MspInit+0xe8>)
 8001922:	f002 fec9 	bl	80046b8 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <I2Cx_MspInit+0xe0>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a10      	ldr	r2, [pc, #64]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001948:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800194c:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <I2Cx_MspInit+0xe0>)
 8001954:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001958:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	210f      	movs	r1, #15
 800195e:	2048      	movs	r0, #72	@ 0x48
 8001960:	f002 f926 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001964:	2048      	movs	r0, #72	@ 0x48
 8001966:	f002 f93f 	bl	8003be8 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	210f      	movs	r1, #15
 800196e:	2049      	movs	r0, #73	@ 0x49
 8001970:	f002 f91e 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001974:	2049      	movs	r0, #73	@ 0x49
 8001976:	f002 f937 	bl	8003be8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005c00 	.word	0x40005c00
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020800 	.word	0x40020800

08001994 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001998:	4814      	ldr	r0, [pc, #80]	@ (80019ec <I2Cx_Init+0x58>)
 800199a:	f003 fdff 	bl	800559c <HAL_I2C_GetState>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d121      	bne.n	80019e8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <I2Cx_Init+0x58>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <I2Cx_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <I2Cx_Init+0x58>)
 80019ac:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <I2Cx_Init+0x60>)
 80019ae:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <I2Cx_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <I2Cx_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <I2Cx_Init+0x58>)
 80019be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <I2Cx_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <I2Cx_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <I2Cx_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <I2Cx_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80019dc:	4803      	ldr	r0, [pc, #12]	@ (80019ec <I2Cx_Init+0x58>)
 80019de:	f7ff ff63 	bl	80018a8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <I2Cx_Init+0x58>)
 80019e4:	f003 f93a 	bl	8004c5c <HAL_I2C_Init>
  }
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200004b8 	.word	0x200004b8
 80019f0:	40005c00 	.word	0x40005c00
 80019f4:	000186a0 	.word	0x000186a0

080019f8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <I2Cx_ITConfig+0x58>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <I2Cx_ITConfig+0x58>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <I2Cx_ITConfig+0x58>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001a28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a2c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <I2Cx_ITConfig+0x5c>)
 8001a34:	f002 fe40 	bl	80046b8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	2028      	movs	r0, #40	@ 0x28
 8001a3e:	f002 f8b7 	bl	8003bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001a42:	2028      	movs	r0, #40	@ 0x28
 8001a44:	f002 f8d0 	bl	8003be8 <HAL_NVIC_EnableIRQ>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <I2Cx_WriteData+0x4c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	1d7b      	adds	r3, r7, #5
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <I2Cx_WriteData+0x50>)
 8001a88:	f003 fa5c 	bl	8004f44 <HAL_I2C_Mem_Write>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001a96:	f000 f863 	bl	8001b60 <I2Cx_Error>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200004b8 	.word	0x200004b8

08001aac <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <I2Cx_ReadData+0x50>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	f107 030e 	add.w	r3, r7, #14
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	4808      	ldr	r0, [pc, #32]	@ (8001b00 <I2Cx_ReadData+0x54>)
 8001ae0:	f003 fb2a 	bl	8005138 <HAL_I2C_Mem_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001aee:	f000 f837 	bl	8001b60 <I2Cx_Error>

  }
  return value;
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000008 	.word	0x20000008
 8001b00:	200004b8 	.word	0x200004b8

08001b04 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	603a      	str	r2, [r7, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	71bb      	strb	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	b299      	uxth	r1, r3
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <I2Cx_ReadBuffer+0x54>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <I2Cx_ReadBuffer+0x58>)
 8001b38:	f003 fafe 	bl	8005138 <HAL_I2C_Mem_Read>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e002      	b.n	8001b50 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001b4a:	f000 f809 	bl	8001b60 <I2Cx_Error>

    return 1;
 8001b4e:	2301      	movs	r3, #1
  }
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	200004b8 	.word	0x200004b8

08001b60 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001b64:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <I2Cx_Error+0x14>)
 8001b66:	f003 f9bd 	bl	8004ee4 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8001b6a:	f7ff ff13 	bl	8001994 <I2Cx_Init>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200004b8 	.word	0x200004b8

08001b78 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b7c:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <SPIx_Init+0x6c>)
 8001b7e:	f007 fa91 	bl	80090a4 <HAL_SPI_GetState>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d12b      	bne.n	8001be0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <SPIx_Init+0x6c>)
 8001b8a:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <SPIx_Init+0x70>)
 8001b8c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <SPIx_Init+0x6c>)
 8001b90:	2218      	movs	r2, #24
 8001b92:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <SPIx_Init+0x6c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <SPIx_Init+0x6c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <SPIx_Init+0x6c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <SPIx_Init+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bae:	2207      	movs	r2, #7
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bce:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bd2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bd6:	f000 f853 	bl	8001c80 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001bda:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <SPIx_Init+0x6c>)
 8001bdc:	f006 fdab 	bl	8008736 <HAL_SPI_Init>
  }
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000050c 	.word	0x2000050c
 8001be8:	40015000 	.word	0x40015000

08001bec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <SPIx_Read+0x38>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <SPIx_Read+0x3c>)
 8001c08:	f006 ff8a 	bl	8008b20 <HAL_SPI_Receive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c16:	f000 f827 	bl	8001c68 <SPIx_Error>
  }

  return readvalue;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	2000050c 	.word	0x2000050c

08001c2c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <SPIx_Write+0x34>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1db9      	adds	r1, r7, #6
 8001c40:	2201      	movs	r2, #1
 8001c42:	4808      	ldr	r0, [pc, #32]	@ (8001c64 <SPIx_Write+0x38>)
 8001c44:	f006 fe28 	bl	8008898 <HAL_SPI_Transmit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c52:	f000 f809 	bl	8001c68 <SPIx_Error>
  }
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	2000050c 	.word	0x2000050c

08001c68 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <SPIx_Error+0x14>)
 8001c6e:	f006 fdeb 	bl	8008848 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001c72:	f7ff ff81 	bl	8001b78 <SPIx_Init>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000050c 	.word	0x2000050c

08001c80 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	4a16      	ldr	r2, [pc, #88]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001cae:	f043 0320 	orr.w	r3, r3, #32
 8001cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <SPIx_MspInit+0x6c>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001cc0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <SPIx_MspInit+0x70>)
 8001cde:	f002 fceb 	bl	80046b8 <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <LCD_IO_Init+0xe0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d164      	bne.n	8001dcc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001d02:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <LCD_IO_Init+0xe0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	4a31      	ldr	r2, [pc, #196]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d18:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4827      	ldr	r0, [pc, #156]	@ (8001ddc <LCD_IO_Init+0xe8>)
 8001d3e:	f002 fcbb 	bl	80046b8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4819      	ldr	r0, [pc, #100]	@ (8001ddc <LCD_IO_Init+0xe8>)
 8001d78:	f002 fc9e 	bl	80046b8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <LCD_IO_Init+0xe4>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <LCD_IO_Init+0xec>)
 8001db0:	f002 fc82 	bl	80046b8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001db4:	2200      	movs	r2, #0
 8001db6:	2104      	movs	r1, #4
 8001db8:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <LCD_IO_Init+0xec>)
 8001dba:	f002 ff35 	bl	8004c28 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4807      	ldr	r0, [pc, #28]	@ (8001de0 <LCD_IO_Init+0xec>)
 8001dc4:	f002 ff30 	bl	8004c28 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001dc8:	f7ff fed6 	bl	8001b78 <SPIx_Init>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000564 	.word	0x20000564
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40020800 	.word	0x40020800

08001de4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001df4:	480a      	ldr	r0, [pc, #40]	@ (8001e20 <LCD_IO_WriteData+0x3c>)
 8001df6:	f002 ff17 	bl	8004c28 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <LCD_IO_WriteData+0x40>)
 8001e00:	f002 ff12 	bl	8004c28 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff10 	bl	8001c2c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <LCD_IO_WriteData+0x40>)
 8001e12:	f002 ff09 	bl	8004c28 <HAL_GPIO_WritePin>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40020800 	.word	0x40020800

08001e28 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e38:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <LCD_IO_WriteReg+0x3c>)
 8001e3a:	f002 fef5 	bl	8004c28 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2104      	movs	r1, #4
 8001e42:	4809      	ldr	r0, [pc, #36]	@ (8001e68 <LCD_IO_WriteReg+0x40>)
 8001e44:	f002 fef0 	bl	8004c28 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff feed 	bl	8001c2c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e52:	2201      	movs	r2, #1
 8001e54:	2104      	movs	r1, #4
 8001e56:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <LCD_IO_WriteReg+0x40>)
 8001e58:	f002 fee6 	bl	8004c28 <HAL_GPIO_WritePin>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40020800 	.word	0x40020800

08001e6c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	80fb      	strh	r3, [r7, #6]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001e80:	2200      	movs	r2, #0
 8001e82:	2104      	movs	r1, #4
 8001e84:	4810      	ldr	r0, [pc, #64]	@ (8001ec8 <LCD_IO_ReadData+0x5c>)
 8001e86:	f002 fecf 	bl	8004c28 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e90:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <LCD_IO_ReadData+0x60>)
 8001e92:	f002 fec9 	bl	8004c28 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fec7 	bl	8001c2c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001e9e:	797b      	ldrb	r3, [r7, #5]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fea3 	bl	8001bec <SPIx_Read>
 8001ea6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eae:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <LCD_IO_ReadData+0x60>)
 8001eb0:	f002 feba 	bl	8004c28 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <LCD_IO_ReadData+0x5c>)
 8001eba:	f002 feb5 	bl	8004c28 <HAL_GPIO_WritePin>

  return readvalue;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00

08001ed0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f001 fd8d 	bl	80039f8 <HAL_Delay>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001eea:	f7ff fd53 	bl	8001994 <I2Cx_Init>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001ef6:	f7ff fd7f 	bl	80019f8 <I2Cx_ITConfig>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	71bb      	strb	r3, [r7, #6]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001f10:	797a      	ldrb	r2, [r7, #5]
 8001f12:	79b9      	ldrb	r1, [r7, #6]
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd9e 	bl	8001a58 <I2Cx_WriteData>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001f34:	79ba      	ldrb	r2, [r7, #6]
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdb6 	bl	8001aac <I2Cx_ReadData>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	603a      	str	r2, [r7, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	71bb      	strb	r3, [r7, #6]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	79b9      	ldrb	r1, [r7, #6]
 8001f64:	79f8      	ldrb	r0, [r7, #7]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	f7ff fdcc 	bl	8001b04 <I2Cx_ReadBuffer>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f001 fd3a 	bl	80039f8 <HAL_Delay>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001f92:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <BSP_LCD_Init+0xc0>)
 8001f94:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001f96:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001f98:	2209      	movs	r2, #9
 8001f9a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fa4:	221d      	movs	r2, #29
 8001fa6:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001faa:	2203      	movs	r2, #3
 8001fac:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001fae:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fb0:	f240 120d 	movw	r2, #269	@ 0x10d
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001fb6:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fb8:	f240 1243 	movw	r2, #323	@ 0x143
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fc0:	f240 1217 	movw	r2, #279	@ 0x117
 8001fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fc8:	f240 1247 	movw	r2, #327	@ 0x147
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <BSP_LCD_Init+0xc4>)
 8001fe8:	2208      	movs	r2, #8
 8001fea:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <BSP_LCD_Init+0xc4>)
 8001fee:	22c0      	movs	r2, #192	@ 0xc0
 8001ff0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <BSP_LCD_Init+0xc4>)
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <BSP_LCD_Init+0xc4>)
 8001ffa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002000:	4813      	ldr	r0, [pc, #76]	@ (8002050 <BSP_LCD_Init+0xc4>)
 8002002:	f006 f947 	bl	8008294 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <BSP_LCD_Init+0xbc>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <BSP_LCD_Init+0xbc>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800201e:	f000 fbdf 	bl	80027e0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002022:	4809      	ldr	r0, [pc, #36]	@ (8002048 <BSP_LCD_Init+0xbc>)
 8002024:	f003 fef7 	bl	8005e16 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <BSP_LCD_Init+0xc8>)
 800202a:	4a0b      	ldr	r2, [pc, #44]	@ (8002058 <BSP_LCD_Init+0xcc>)
 800202c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <BSP_LCD_Init+0xc8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002036:	f000 fdc1 	bl	8002bbc <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800203a:	4808      	ldr	r0, [pc, #32]	@ (800205c <BSP_LCD_Init+0xd0>)
 800203c:	f000 f8b4 	bl	80021a8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000568 	.word	0x20000568
 800204c:	40016800 	.word	0x40016800
 8002050:	20000650 	.word	0x20000650
 8002054:	2000069c 	.word	0x2000069c
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000010 	.word	0x20000010

08002060 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <BSP_LCD_GetXSize+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	4798      	blx	r3
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000069c 	.word	0x2000069c

08002078 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <BSP_LCD_GetYSize+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	4798      	blx	r3
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000069c 	.word	0x2000069c

08002090 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b090      	sub	sp, #64	@ 0x40
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80020a0:	f7ff ffde 	bl	8002060 <BSP_LCD_GetXSize>
 80020a4:	4603      	mov	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80020ac:	f7ff ffe4 	bl	8002078 <BSP_LCD_GetYSize>
 80020b0:	4603      	mov	r3, r0
 80020b2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80020bc:	23ff      	movs	r3, #255	@ 0xff
 80020be:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020dc:	2307      	movs	r3, #7
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80020e0:	f7ff ffbe 	bl	8002060 <BSP_LCD_GetXSize>
 80020e4:	4603      	mov	r3, r0
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80020e8:	f7ff ffc6 	bl	8002078 <BSP_LCD_GetYSize>
 80020ec:	4603      	mov	r3, r0
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	4814      	ldr	r0, [pc, #80]	@ (800214c <BSP_LCD_LayerDefaultInit+0xbc>)
 80020fa:	f003 ffeb 	bl	80060d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	4913      	ldr	r1, [pc, #76]	@ (8002150 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3304      	adds	r3, #4
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	490e      	ldr	r1, [pc, #56]	@ (8002150 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3308      	adds	r3, #8
 8002124:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002126:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	4909      	ldr	r1, [pc, #36]	@ (8002150 <BSP_LCD_LayerDefaultInit+0xc0>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800213a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <BSP_LCD_LayerDefaultInit+0xbc>)
 800213e:	f004 f807 	bl	8006150 <HAL_LTDC_EnableDither>
}
 8002142:	bf00      	nop
 8002144:	3740      	adds	r7, #64	@ 0x40
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000568 	.word	0x20000568
 8002150:	20000684 	.word	0x20000684
 8002154:	20000010 	.word	0x20000010

08002158 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <BSP_LCD_SelectLayer+0x1c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000680 	.word	0x20000680

08002178 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002180:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <BSP_LCD_SetTextColor+0x28>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <BSP_LCD_SetTextColor+0x2c>)
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000680 	.word	0x20000680
 80021a4:	20000684 	.word	0x20000684

080021a8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <BSP_LCD_SetFont+0x2c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <BSP_LCD_SetFont+0x30>)
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3308      	adds	r3, #8
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000680 	.word	0x20000680
 80021d8:	20000684 	.word	0x20000684

080021dc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	b085      	sub	sp, #20
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <BSP_LCD_Clear+0x48>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <BSP_LCD_Clear+0x48>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002228 <BSP_LCD_Clear+0x4c>)
 80021ee:	2134      	movs	r1, #52	@ 0x34
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	335c      	adds	r3, #92	@ 0x5c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461e      	mov	r6, r3
 80021fc:	f7ff ff30 	bl	8002060 <BSP_LCD_GetXSize>
 8002200:	4605      	mov	r5, r0
 8002202:	f7ff ff39 	bl	8002078 <BSP_LCD_GetYSize>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	462a      	mov	r2, r5
 8002214:	4631      	mov	r1, r6
 8002216:	4620      	mov	r0, r4
 8002218:	f000 fc98 	bl	8002b4c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002224:	20000680 	.word	0x20000680
 8002228:	20000568 	.word	0x20000568

0800222c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	460b      	mov	r3, r1
 8002238:	80bb      	strh	r3, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <BSP_LCD_DisplayChar+0x80>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	491b      	ldr	r1, [pc, #108]	@ (80022b0 <BSP_LCD_DisplayChar+0x84>)
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3308      	adds	r3, #8
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <BSP_LCD_DisplayChar+0x80>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4c14      	ldr	r4, [pc, #80]	@ (80022b0 <BSP_LCD_DisplayChar+0x84>)
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4423      	add	r3, r4
 800226a:	3308      	adds	r3, #8
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002270:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002274:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <BSP_LCD_DisplayChar+0x80>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4c0d      	ldr	r4, [pc, #52]	@ (80022b0 <BSP_LCD_DisplayChar+0x84>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4423      	add	r3, r4
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	889b      	ldrh	r3, [r3, #4]
 800228a:	3307      	adds	r3, #7
 800228c:	2b00      	cmp	r3, #0
 800228e:	da00      	bge.n	8002292 <BSP_LCD_DisplayChar+0x66>
 8002290:	3307      	adds	r3, #7
 8002292:	10db      	asrs	r3, r3, #3
 8002294:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002298:	18ca      	adds	r2, r1, r3
 800229a:	88b9      	ldrh	r1, [r7, #4]
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb9a 	bl	80029d8 <DrawChar>
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	20000680 	.word	0x20000680
 80022b0:	20000684 	.word	0x20000684

080022b4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60ba      	str	r2, [r7, #8]
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	81fb      	strh	r3, [r7, #14]
 80022c2:	460b      	mov	r3, r1
 80022c4:	81bb      	strh	r3, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80022ca:	2301      	movs	r3, #1
 80022cc:	83fb      	strh	r3, [r7, #30]
 80022ce:	2300      	movs	r3, #0
 80022d0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80022de:	e002      	b.n	80022e6 <BSP_LCD_DisplayStringAt+0x32>
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	617a      	str	r2, [r7, #20]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f6      	bne.n	80022e0 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80022f2:	f7ff feb5 	bl	8002060 <BSP_LCD_GetXSize>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	484b      	ldr	r0, [pc, #300]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4403      	add	r3, r0
 8002308:	3308      	adds	r3, #8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	889b      	ldrh	r3, [r3, #4]
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d01c      	beq.n	8002354 <BSP_LCD_DisplayStringAt+0xa0>
 800231a:	2b03      	cmp	r3, #3
 800231c:	dc33      	bgt.n	8002386 <BSP_LCD_DisplayStringAt+0xd2>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d002      	beq.n	8002328 <BSP_LCD_DisplayStringAt+0x74>
 8002322:	2b02      	cmp	r3, #2
 8002324:	d019      	beq.n	800235a <BSP_LCD_DisplayStringAt+0xa6>
 8002326:	e02e      	b.n	8002386 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad1      	subs	r1, r2, r3
 800232e:	4b3e      	ldr	r3, [pc, #248]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	483e      	ldr	r0, [pc, #248]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	3308      	adds	r3, #8
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	4413      	add	r3, r2
 8002350:	83fb      	strh	r3, [r7, #30]
      break;
 8002352:	e01b      	b.n	800238c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002354:	89fb      	ldrh	r3, [r7, #14]
 8002356:	83fb      	strh	r3, [r7, #30]
      break;
 8002358:	e018      	b.n	800238c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b299      	uxth	r1, r3
 8002362:	4b31      	ldr	r3, [pc, #196]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4831      	ldr	r0, [pc, #196]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4403      	add	r3, r0
 8002372:	3308      	adds	r3, #8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	889b      	ldrh	r3, [r3, #4]
 8002378:	fb11 f303 	smulbb	r3, r1, r3
 800237c:	b29a      	uxth	r2, r3
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	4413      	add	r3, r2
 8002382:	83fb      	strh	r3, [r7, #30]
      break;
 8002384:	e002      	b.n	800238c <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002386:	89fb      	ldrh	r3, [r7, #14]
 8002388:	83fb      	strh	r3, [r7, #30]
      break;
 800238a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800238c:	e01a      	b.n	80023c4 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	89b9      	ldrh	r1, [r7, #12]
 8002394:	8bfb      	ldrh	r3, [r7, #30]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff48 	bl	800222c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4922      	ldr	r1, [pc, #136]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3308      	adds	r3, #8
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	889a      	ldrh	r2, [r3, #4]
 80023b2:	8bfb      	ldrh	r3, [r7, #30]
 80023b4:	4413      	add	r3, r2
 80023b6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
    i++;
 80023be:	8bbb      	ldrh	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2dc      	uxtb	r4, r3
 80023d2:	f7ff fe45 	bl	8002060 <BSP_LCD_GetXSize>
 80023d6:	8bb9      	ldrh	r1, [r7, #28]
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4d13      	ldr	r5, [pc, #76]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	442b      	add	r3, r5
 80023e8:	3308      	adds	r3, #8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	889b      	ldrh	r3, [r3, #4]
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	1ac3      	subs	r3, r0, r3
 80023f4:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <BSP_LCD_DisplayStringAt+0x174>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	480c      	ldr	r0, [pc, #48]	@ (800242c <BSP_LCD_DisplayStringAt+0x178>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4403      	add	r3, r0
 8002406:	3308      	adds	r3, #8
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800240c:	4299      	cmp	r1, r3
 800240e:	bf2c      	ite	cs
 8002410:	2301      	movcs	r3, #1
 8002412:	2300      	movcc	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4023      	ands	r3, r4
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1b7      	bne.n	800238e <BSP_LCD_DisplayStringAt+0xda>
  }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	20000680 	.word	0x20000680
 800242c:	20000684 	.word	0x20000684

08002430 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
 800243a:	460b      	mov	r3, r1
 800243c:	80bb      	strh	r3, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <BSP_LCD_DrawHLine+0x70>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <BSP_LCD_DrawHLine+0x74>)
 800244c:	2134      	movs	r1, #52	@ 0x34
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	335c      	adds	r3, #92	@ 0x5c
 8002456:	681c      	ldr	r4, [r3, #0]
 8002458:	f7ff fe02 	bl	8002060 <BSP_LCD_GetXSize>
 800245c:	4602      	mov	r2, r0
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	fb03 f202 	mul.w	r2, r3, r2
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4423      	add	r3, r4
 800246c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <BSP_LCD_DrawHLine+0x70>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	887c      	ldrh	r4, [r7, #2]
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <BSP_LCD_DrawHLine+0x70>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4d0b      	ldr	r5, [pc, #44]	@ (80024a8 <BSP_LCD_DrawHLine+0x78>)
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	442b      	add	r3, r5
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2301      	movs	r3, #1
 8002490:	4622      	mov	r2, r4
 8002492:	f000 fb5b 	bl	8002b4c <FillBuffer>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bdb0      	pop	{r4, r5, r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000680 	.word	0x20000680
 80024a4:	20000568 	.word	0x20000568
 80024a8:	20000684 	.word	0x20000684

080024ac <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
 80024b6:	460b      	mov	r3, r1
 80024b8:	80bb      	strh	r3, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	f1c3 0303 	rsb	r3, r3, #3
 80024c6:	617b      	str	r3, [r7, #20]
  curx = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 80024d0:	e0c7      	b.n	8002662 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4413      	add	r3, r2
 80024da:	b298      	uxth	r0, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	88ba      	ldrh	r2, [r7, #4]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	b299      	uxth	r1, r3
 80024e6:	4b64      	ldr	r3, [pc, #400]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4c64      	ldr	r4, [pc, #400]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4423      	add	r3, r4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f000 fa47 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	b29b      	uxth	r3, r3
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b298      	uxth	r0, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	b29b      	uxth	r3, r3
 800250c:	88ba      	ldrh	r2, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	b299      	uxth	r1, r3
 8002512:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4c59      	ldr	r4, [pc, #356]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4423      	add	r3, r4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	f000 fa31 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	b29a      	uxth	r2, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4413      	add	r3, r2
 8002532:	b298      	uxth	r0, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	b29b      	uxth	r3, r3
 8002538:	88ba      	ldrh	r2, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	b299      	uxth	r1, r3
 800253e:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4c4e      	ldr	r4, [pc, #312]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4423      	add	r3, r4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f000 fa1b 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	b29b      	uxth	r3, r3
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	b298      	uxth	r0, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	b29b      	uxth	r3, r3
 8002564:	88ba      	ldrh	r2, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b299      	uxth	r1, r3
 800256a:	4b43      	ldr	r3, [pc, #268]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4c43      	ldr	r4, [pc, #268]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4423      	add	r3, r4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	f000 fa05 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	b29a      	uxth	r2, r3
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4413      	add	r3, r2
 800258a:	b298      	uxth	r0, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	b29a      	uxth	r2, r3
 8002590:	88bb      	ldrh	r3, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	b299      	uxth	r1, r3
 8002596:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4c38      	ldr	r4, [pc, #224]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4423      	add	r3, r4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f000 f9ef 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	b298      	uxth	r0, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	b299      	uxth	r1, r3
 80025c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4c2d      	ldr	r4, [pc, #180]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4423      	add	r3, r4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f000 f9d9 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4413      	add	r3, r2
 80025e2:	b298      	uxth	r0, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	88bb      	ldrh	r3, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	b299      	uxth	r1, r3
 80025ee:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4c22      	ldr	r4, [pc, #136]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4423      	add	r3, r4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	f000 f9c3 	bl	800298c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	b29b      	uxth	r3, r3
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	b298      	uxth	r0, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	b29a      	uxth	r2, r3
 8002614:	88bb      	ldrh	r3, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	b299      	uxth	r1, r3
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <BSP_LCD_DrawCircle+0x1cc>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4c17      	ldr	r4, [pc, #92]	@ (800267c <BSP_LCD_DrawCircle+0x1d0>)
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4423      	add	r3, r4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f000 f9ad 	bl	800298c <BSP_LCD_DrawPixel>

    if (d < 0)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da06      	bge.n	8002646 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4413      	add	r3, r2
 8002640:	3306      	adds	r3, #6
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e00a      	b.n	800265c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4413      	add	r3, r2
 8002652:	330a      	adds	r3, #10
 8002654:	617b      	str	r3, [r7, #20]
      cury--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	3301      	adds	r3, #1
 8002660:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	429a      	cmp	r2, r3
 8002668:	f67f af33 	bls.w	80024d2 <BSP_LCD_DrawCircle+0x26>
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	20000680 	.word	0x20000680
 800267c:	20000684 	.word	0x20000684

08002680 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
 800268a:	460b      	mov	r3, r1
 800268c:	80bb      	strh	r3, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	f1c3 0303 	rsb	r3, r3, #3
 800269a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80026a4:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <BSP_LCD_FillCircle+0x138>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4944      	ldr	r1, [pc, #272]	@ (80027bc <BSP_LCD_FillCircle+0x13c>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fd5e 	bl	8002178 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80026bc:	e061      	b.n	8002782 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d021      	beq.n	8002708 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b298      	uxth	r0, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	b299      	uxth	r1, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff fea5 	bl	8002430 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b298      	uxth	r0, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	88ba      	ldrh	r2, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	b299      	uxth	r1, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	f7ff fe94 	bl	8002430 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d021      	beq.n	8002752 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	b29b      	uxth	r3, r3
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b298      	uxth	r0, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	b29b      	uxth	r3, r3
 800271c:	88ba      	ldrh	r2, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	b299      	uxth	r1, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	b29b      	uxth	r3, r3
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fe80 	bl	8002430 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	b29b      	uxth	r3, r3
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	b298      	uxth	r0, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	b29a      	uxth	r2, r3
 800273e:	88bb      	ldrh	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	b299      	uxth	r1, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	b29b      	uxth	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	f7ff fe6f 	bl	8002430 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	da06      	bge.n	8002766 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4413      	add	r3, r2
 8002760:	3306      	adds	r3, #6
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4413      	add	r3, r2
 8002772:	330a      	adds	r3, #10
 8002774:	617b      	str	r3, [r7, #20]
      cury--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b01      	subs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	3301      	adds	r3, #1
 8002780:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	429a      	cmp	r2, r3
 8002788:	d999      	bls.n	80026be <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <BSP_LCD_FillCircle+0x138>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	490b      	ldr	r1, [pc, #44]	@ (80027bc <BSP_LCD_FillCircle+0x13c>)
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fceb 	bl	8002178 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	88b9      	ldrh	r1, [r7, #4]
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe7f 	bl	80024ac <BSP_LCD_DrawCircle>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000680 	.word	0x20000680
 80027bc:	20000684 	.word	0x20000684

080027c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <BSP_LCD_DisplayOn+0x1c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80027ce:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <BSP_LCD_DisplayOn+0x1c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4798      	blx	r3
  }
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000069c 	.word	0x2000069c

080027e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08e      	sub	sp, #56	@ 0x38
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	4b61      	ldr	r3, [pc, #388]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4a60      	ldr	r2, [pc, #384]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80027f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	4b5a      	ldr	r3, [pc, #360]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 800280c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a52      	ldr	r2, [pc, #328]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b50      	ldr	r3, [pc, #320]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	4b4c      	ldr	r3, [pc, #304]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a4b      	ldr	r2, [pc, #300]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a44      	ldr	r2, [pc, #272]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b42      	ldr	r3, [pc, #264]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a3d      	ldr	r2, [pc, #244]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a36      	ldr	r2, [pc, #216]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80028b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <BSP_LCD_MspInit+0x190>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80028c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028d4:	2302      	movs	r3, #2
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 80028d8:	230e      	movs	r3, #14
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4824      	ldr	r0, [pc, #144]	@ (8002974 <BSP_LCD_MspInit+0x194>)
 80028e4:	f001 fee8 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80028e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f2:	4619      	mov	r1, r3
 80028f4:	4820      	ldr	r0, [pc, #128]	@ (8002978 <BSP_LCD_MspInit+0x198>)
 80028f6:	f001 fedf 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80028fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	481d      	ldr	r0, [pc, #116]	@ (800297c <BSP_LCD_MspInit+0x19c>)
 8002908:	f001 fed6 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800290c:	2348      	movs	r3, #72	@ 0x48
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	481a      	ldr	r0, [pc, #104]	@ (8002980 <BSP_LCD_MspInit+0x1a0>)
 8002918:	f001 fece 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800291c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	4816      	ldr	r0, [pc, #88]	@ (8002984 <BSP_LCD_MspInit+0x1a4>)
 800292a:	f001 fec5 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800292e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4813      	ldr	r0, [pc, #76]	@ (8002988 <BSP_LCD_MspInit+0x1a8>)
 800293c:	f001 febc 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002940:	2303      	movs	r3, #3
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8002944:	2309      	movs	r3, #9
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	480a      	ldr	r0, [pc, #40]	@ (8002978 <BSP_LCD_MspInit+0x198>)
 8002950:	f001 feb2 	bl	80046b8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002954:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800295a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295e:	4619      	mov	r1, r3
 8002960:	4809      	ldr	r0, [pc, #36]	@ (8002988 <BSP_LCD_MspInit+0x1a8>)
 8002962:	f001 fea9 	bl	80046b8 <HAL_GPIO_Init>
}
 8002966:	bf00      	nop
 8002968:	3738      	adds	r7, #56	@ 0x38
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800

0800298c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	603a      	str	r2, [r7, #0]
 8002996:	80fb      	strh	r3, [r7, #6]
 8002998:	460b      	mov	r3, r1
 800299a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <BSP_LCD_DrawPixel+0x44>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <BSP_LCD_DrawPixel+0x48>)
 80029a2:	2134      	movs	r1, #52	@ 0x34
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	@ 0x5c
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	88bd      	ldrh	r5, [r7, #4]
 80029b0:	f7ff fb56 	bl	8002060 <BSP_LCD_GetXSize>
 80029b4:	4603      	mov	r3, r0
 80029b6:	fb03 f205 	mul.w	r2, r3, r5
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4423      	add	r3, r4
 80029c2:	461a      	mov	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	20000680 	.word	0x20000680
 80029d4:	20000568 	.word	0x20000568

080029d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	603a      	str	r2, [r7, #0]
 80029e2:	80fb      	strh	r3, [r7, #6]
 80029e4:	460b      	mov	r3, r1
 80029e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <DrawChar+0x16c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4953      	ldr	r1, [pc, #332]	@ (8002b48 <DrawChar+0x170>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3308      	adds	r3, #8
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	88db      	ldrh	r3, [r3, #6]
 8002a0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b44 <DrawChar+0x16c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	494d      	ldr	r1, [pc, #308]	@ (8002b48 <DrawChar+0x170>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	889b      	ldrh	r3, [r3, #4]
 8002a22:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8002a24:	8a3b      	ldrh	r3, [r7, #16]
 8002a26:	3307      	adds	r3, #7
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da00      	bge.n	8002a2e <DrawChar+0x56>
 8002a2c:	3307      	adds	r3, #7
 8002a2e:	10db      	asrs	r3, r3, #3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8a3b      	ldrh	r3, [r7, #16]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e076      	b.n	8002b32 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8002a44:	8a3b      	ldrh	r3, [r7, #16]
 8002a46:	3307      	adds	r3, #7
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da00      	bge.n	8002a4e <DrawChar+0x76>
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	10db      	asrs	r3, r3, #3
 8002a50:	461a      	mov	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8002a5e:	8a3b      	ldrh	r3, [r7, #16]
 8002a60:	3307      	adds	r3, #7
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da00      	bge.n	8002a68 <DrawChar+0x90>
 8002a66:	3307      	adds	r3, #7
 8002a68:	10db      	asrs	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d002      	beq.n	8002a74 <DrawChar+0x9c>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d004      	beq.n	8002a7c <DrawChar+0xa4>
 8002a72:	e00c      	b.n	8002a8e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
        break;
 8002a7a:	e016      	b.n	8002aaa <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	3201      	adds	r2, #1
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
        break;
 8002a8c:	e00d      	b.n	8002aaa <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	041a      	lsls	r2, r3, #16
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3301      	adds	r3, #1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	3202      	adds	r2, #2
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
        break;
 8002aa8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e036      	b.n	8002b1e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8002ab0:	8a3a      	ldrh	r2, [r7, #16]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad2      	subs	r2, r2, r3
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b01      	subs	r3, #1
 8002abc:	2201      	movs	r2, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b298      	uxth	r0, r3
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <DrawChar+0x16c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	491b      	ldr	r1, [pc, #108]	@ (8002b48 <DrawChar+0x170>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	88bb      	ldrh	r3, [r7, #4]
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7ff ff4e 	bl	800298c <BSP_LCD_DrawPixel>
 8002af0:	e012      	b.n	8002b18 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	4413      	add	r3, r2
 8002afa:	b298      	uxth	r0, r3
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <DrawChar+0x16c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4911      	ldr	r1, [pc, #68]	@ (8002b48 <DrawChar+0x170>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	88bb      	ldrh	r3, [r7, #4]
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7ff ff3a 	bl	800298c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	8a3b      	ldrh	r3, [r7, #16]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3c4      	bcc.n	8002ab0 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	8a7b      	ldrh	r3, [r7, #18]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d384      	bcc.n	8002a44 <DrawChar+0x6c>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000680 	.word	0x20000680
 8002b48:	20000684 	.word	0x20000684

08002b4c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <FillBuffer+0x68>)
 8002b5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b60:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <FillBuffer+0x68>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002b68:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <FillBuffer+0x68>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <FillBuffer+0x68>)
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <FillBuffer+0x6c>)
 8002b72:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002b74:	480f      	ldr	r0, [pc, #60]	@ (8002bb4 <FillBuffer+0x68>)
 8002b76:	f001 fa03 	bl	8003f80 <HAL_DMA2D_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	480c      	ldr	r0, [pc, #48]	@ (8002bb4 <FillBuffer+0x68>)
 8002b84:	f001 fc6a 	bl	800445c <HAL_DMA2D_ConfigLayer>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10e      	bne.n	8002bac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69f9      	ldr	r1, [r7, #28]
 8002b98:	4806      	ldr	r0, [pc, #24]	@ (8002bb4 <FillBuffer+0x68>)
 8002b9a:	f001 fa3a 	bl	8004012 <HAL_DMA2D_Start>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002ba4:	210a      	movs	r1, #10
 8002ba6:	4803      	ldr	r0, [pc, #12]	@ (8002bb4 <FillBuffer+0x68>)
 8002ba8:	f001 fa5e 	bl	8004068 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000610 	.word	0x20000610
 8002bb8:	4002b000 	.word	0x4002b000

08002bbc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002bc0:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c6c <BSP_SDRAM_Init+0xb0>)
 8002bc4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002bcc:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002bce:	2207      	movs	r2, #7
 8002bd0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002bda:	2207      	movs	r2, #7
 8002bdc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002be4:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002be6:	2202      	movs	r2, #2
 8002be8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002bec:	2202      	movs	r2, #2
 8002bee:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002bfe:	2204      	movs	r2, #4
 8002c00:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c04:	2210      	movs	r2, #16
 8002c06:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c08:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c0a:	2240      	movs	r2, #64	@ 0x40
 8002c0c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c10:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c14:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c16:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c22:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c24:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c32:	2100      	movs	r1, #0
 8002c34:	480c      	ldr	r0, [pc, #48]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c36:	f000 f87f 	bl	8002d38 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c3a:	490d      	ldr	r1, [pc, #52]	@ (8002c70 <BSP_SDRAM_Init+0xb4>)
 8002c3c:	480a      	ldr	r0, [pc, #40]	@ (8002c68 <BSP_SDRAM_Init+0xac>)
 8002c3e:	f005 fce9 	bl	8008614 <HAL_SDRAM_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <BSP_SDRAM_Init+0xb8>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e002      	b.n	8002c56 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c50:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <BSP_SDRAM_Init+0xb8>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c56:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002c5a:	f000 f80d 	bl	8002c78 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <BSP_SDRAM_Init+0xb8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200006a0 	.word	0x200006a0
 8002c6c:	a0000140 	.word	0xa0000140
 8002c70:	200006d4 	.word	0x200006d4
 8002c74:	20000018 	.word	0x20000018

08002c78 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c8a:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c90:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c96:	4b26      	ldr	r3, [pc, #152]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ca0:	4923      	ldr	r1, [pc, #140]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca2:	4824      	ldr	r0, [pc, #144]	@ (8002d34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ca4:	f005 fcea 	bl	800867c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f000 fea5 	bl	80039f8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cca:	4919      	ldr	r1, [pc, #100]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ccc:	4819      	ldr	r0, [pc, #100]	@ (8002d34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cce:	f005 fcd5 	bl	800867c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cda:	2208      	movs	r2, #8
 8002cdc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cee:	4910      	ldr	r1, [pc, #64]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf0:	4810      	ldr	r0, [pc, #64]	@ (8002d34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cf2:	f005 fcc3 	bl	800867c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002cf6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002cfa:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfe:	2204      	movs	r2, #4
 8002d00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d18:	4905      	ldr	r1, [pc, #20]	@ (8002d30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1a:	4806      	ldr	r0, [pc, #24]	@ (8002d34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d1c:	f005 fcae 	bl	800867c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d24:	f005 fcdf 	bl	80086e6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200006f0 	.word	0x200006f0
 8002d34:	200006a0 	.word	0x200006a0

08002d38 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	@ 0x40
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80ec 	beq.w	8002f22 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4e:	4b77      	ldr	r3, [pc, #476]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	4a76      	ldr	r2, [pc, #472]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6393      	str	r3, [r2, #56]	@ 0x38
 8002d5a:	4b74      	ldr	r3, [pc, #464]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b6d      	ldr	r3, [pc, #436]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	4b69      	ldr	r3, [pc, #420]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a68      	ldr	r2, [pc, #416]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	4b62      	ldr	r3, [pc, #392]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a61      	ldr	r2, [pc, #388]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b5f      	ldr	r3, [pc, #380]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4b58      	ldr	r3, [pc, #352]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	4b54      	ldr	r3, [pc, #336]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a53      	ldr	r2, [pc, #332]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002de0:	f043 0310 	orr.w	r3, r3, #16
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b51      	ldr	r3, [pc, #324]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002dfc:	f043 0320 	orr.w	r3, r3, #32
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b46      	ldr	r3, [pc, #280]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a45      	ldr	r2, [pc, #276]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <BSP_SDRAM_MspInit+0x1f4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e36:	230c      	movs	r3, #12
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e3a:	2360      	movs	r3, #96	@ 0x60
 8002e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e42:	4619      	mov	r1, r3
 8002e44:	483a      	ldr	r0, [pc, #232]	@ (8002f30 <BSP_SDRAM_MspInit+0x1f8>)
 8002e46:	f001 fc37 	bl	80046b8 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e52:	4619      	mov	r1, r3
 8002e54:	4837      	ldr	r0, [pc, #220]	@ (8002f34 <BSP_SDRAM_MspInit+0x1fc>)
 8002e56:	f001 fc2f 	bl	80046b8 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e5a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e64:	4619      	mov	r1, r3
 8002e66:	4834      	ldr	r0, [pc, #208]	@ (8002f38 <BSP_SDRAM_MspInit+0x200>)
 8002e68:	f001 fc26 	bl	80046b8 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002e6c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e76:	4619      	mov	r1, r3
 8002e78:	4830      	ldr	r0, [pc, #192]	@ (8002f3c <BSP_SDRAM_MspInit+0x204>)
 8002e7a:	f001 fc1d 	bl	80046b8 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002e7e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	482d      	ldr	r0, [pc, #180]	@ (8002f40 <BSP_SDRAM_MspInit+0x208>)
 8002e8c:	f001 fc14 	bl	80046b8 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002e90:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4829      	ldr	r0, [pc, #164]	@ (8002f44 <BSP_SDRAM_MspInit+0x20c>)
 8002e9e:	f001 fc0b 	bl	80046b8 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002ea8:	4b27      	ldr	r3, [pc, #156]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002eae:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002eb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ebc:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ebe:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ec0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ec4:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ec8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ecc:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eda:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ee8:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002ef6:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <BSP_SDRAM_MspInit+0x214>)
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f00:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002f06:	4810      	ldr	r0, [pc, #64]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002f08:	f000 ff2a 	bl	8003d60 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002f0c:	480e      	ldr	r0, [pc, #56]	@ (8002f48 <BSP_SDRAM_MspInit+0x210>)
 8002f0e:	f000 fe79 	bl	8003c04 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	210f      	movs	r1, #15
 8002f16:	2038      	movs	r0, #56	@ 0x38
 8002f18:	f000 fe4a 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f1c:	2038      	movs	r0, #56	@ 0x38
 8002f1e:	f000 fe63 	bl	8003be8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f22:	bf00      	nop
 8002f24:	3740      	adds	r7, #64	@ 0x40
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	20000700 	.word	0x20000700
 8002f4c:	40026410 	.word	0x40026410

08002f50 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	460a      	mov	r2, r1
 8002f5a:	80fb      	strh	r3, [r7, #6]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <BSP_TS_Init+0x64>)
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002f6a:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <BSP_TS_Init+0x68>)
 8002f6c:	88bb      	ldrh	r3, [r7, #4]
 8002f6e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <BSP_TS_Init+0x6c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2082      	movs	r0, #130	@ 0x82
 8002f76:	4798      	blx	r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f640 0311 	movw	r3, #2065	@ 0x811
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <BSP_TS_Init+0x70>)
 8002f86:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <BSP_TS_Init+0x6c>)
 8002f88:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <BSP_TS_Init+0x70>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2082      	movs	r0, #130	@ 0x82
 8002f9c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <BSP_TS_Init+0x70>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2082      	movs	r0, #130	@ 0x82
 8002fa6:	4798      	blx	r3
  }

  return ret;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000764 	.word	0x20000764
 8002fb8:	20000766 	.word	0x20000766
 8002fbc:	20000054 	.word	0x20000054
 8002fc0:	20000760 	.word	0x20000760

08002fc4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <BSP_TS_GetState+0x148>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2082      	movs	r0, #130	@ 0x82
 8002fd4:	4798      	blx	r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 808d 	beq.w	8003102 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002fe8:	4b48      	ldr	r3, [pc, #288]	@ (800310c <BSP_TS_GetState+0x148>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f107 020c 	add.w	r2, r7, #12
 8002ff2:	f107 010e 	add.w	r1, r7, #14
 8002ff6:	2082      	movs	r0, #130	@ 0x82
 8002ff8:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 8002ffa:	89bb      	ldrh	r3, [r7, #12]
 8002ffc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003000:	b29b      	uxth	r3, r3
 8003002:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8003004:	89bb      	ldrh	r3, [r7, #12]
 8003006:	4a42      	ldr	r2, [pc, #264]	@ (8003110 <BSP_TS_GetState+0x14c>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8003010:	8abb      	ldrh	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	82bb      	strh	r3, [r7, #20]
 800301a:	e008      	b.n	800302e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800301c:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <BSP_TS_GetState+0x150>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	8aba      	ldrh	r2, [r7, #20]
 8003022:	429a      	cmp	r2, r3
 8003024:	d903      	bls.n	800302e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003026:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <BSP_TS_GetState+0x150>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	3b01      	subs	r3, #1
 800302c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800302e:	8abb      	ldrh	r3, [r7, #20]
 8003030:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003038:	4293      	cmp	r3, r2
 800303a:	d806      	bhi.n	800304a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8003042:	330e      	adds	r3, #14
 8003044:	b29b      	uxth	r3, r3
 8003046:	81fb      	strh	r3, [r7, #14]
 8003048:	e005      	b.n	8003056 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003050:	3308      	adds	r3, #8
 8003052:	b29b      	uxth	r3, r3
 8003054:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	4a2f      	ldr	r2, [pc, #188]	@ (8003118 <BSP_TS_GetState+0x154>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	82fb      	strh	r3, [r7, #22]
 800306c:	e008      	b.n	8003080 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800306e:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <BSP_TS_GetState+0x158>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	8afa      	ldrh	r2, [r7, #22]
 8003074:	429a      	cmp	r2, r3
 8003076:	d903      	bls.n	8003080 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <BSP_TS_GetState+0x158>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	461a      	mov	r2, r3
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <BSP_TS_GetState+0x15c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d906      	bls.n	800309e <BSP_TS_GetState+0xda>
 8003090:	89fa      	ldrh	r2, [r7, #14]
 8003092:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <BSP_TS_GetState+0x15c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	e005      	b.n	80030aa <BSP_TS_GetState+0xe6>
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <BSP_TS_GetState+0x15c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 80030ac:	89bb      	ldrh	r3, [r7, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <BSP_TS_GetState+0x160>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d906      	bls.n	80030c6 <BSP_TS_GetState+0x102>
 80030b8:	89ba      	ldrh	r2, [r7, #12]
 80030ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <BSP_TS_GetState+0x160>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	e005      	b.n	80030d2 <BSP_TS_GetState+0x10e>
 80030c6:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <BSP_TS_GetState+0x160>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	89bb      	ldrh	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 80030d4:	8a7a      	ldrh	r2, [r7, #18]
 80030d6:	8a3b      	ldrh	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	2b05      	cmp	r3, #5
 80030dc:	dd07      	ble.n	80030ee <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <BSP_TS_GetState+0x15c>)
 80030e4:	601a      	str	r2, [r3, #0]
      _y = y;
 80030e6:	89bb      	ldrh	r3, [r7, #12]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <BSP_TS_GetState+0x160>)
 80030ec:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <BSP_TS_GetState+0x15c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <BSP_TS_GetState+0x160>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	809a      	strh	r2, [r3, #4]
  }
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000760 	.word	0x20000760
 8003110:	ba2e8ba3 	.word	0xba2e8ba3
 8003114:	20000766 	.word	0x20000766
 8003118:	88888889 	.word	0x88888889
 800311c:	20000764 	.word	0x20000764
 8003120:	20000768 	.word	0x20000768
 8003124:	2000076c 	.word	0x2000076c

08003128 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800312c:	f7fe fde2 	bl	8001cf4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003130:	20ca      	movs	r0, #202	@ 0xca
 8003132:	f000 f95d 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003136:	20c3      	movs	r0, #195	@ 0xc3
 8003138:	f000 f967 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800313c:	2008      	movs	r0, #8
 800313e:	f000 f964 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003142:	2050      	movs	r0, #80	@ 0x50
 8003144:	f000 f961 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003148:	20cf      	movs	r0, #207	@ 0xcf
 800314a:	f000 f951 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f000 f95b 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003154:	20c1      	movs	r0, #193	@ 0xc1
 8003156:	f000 f958 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800315a:	2030      	movs	r0, #48	@ 0x30
 800315c:	f000 f955 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003160:	20ed      	movs	r0, #237	@ 0xed
 8003162:	f000 f945 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003166:	2064      	movs	r0, #100	@ 0x64
 8003168:	f000 f94f 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800316c:	2003      	movs	r0, #3
 800316e:	f000 f94c 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003172:	2012      	movs	r0, #18
 8003174:	f000 f949 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003178:	2081      	movs	r0, #129	@ 0x81
 800317a:	f000 f946 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800317e:	20e8      	movs	r0, #232	@ 0xe8
 8003180:	f000 f936 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003184:	2085      	movs	r0, #133	@ 0x85
 8003186:	f000 f940 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f000 f93d 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003190:	2078      	movs	r0, #120	@ 0x78
 8003192:	f000 f93a 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003196:	20cb      	movs	r0, #203	@ 0xcb
 8003198:	f000 f92a 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800319c:	2039      	movs	r0, #57	@ 0x39
 800319e:	f000 f934 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80031a2:	202c      	movs	r0, #44	@ 0x2c
 80031a4:	f000 f931 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f000 f92e 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80031ae:	2034      	movs	r0, #52	@ 0x34
 80031b0:	f000 f92b 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80031b4:	2002      	movs	r0, #2
 80031b6:	f000 f928 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80031ba:	20f7      	movs	r0, #247	@ 0xf7
 80031bc:	f000 f918 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80031c0:	2020      	movs	r0, #32
 80031c2:	f000 f922 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80031c6:	20ea      	movs	r0, #234	@ 0xea
 80031c8:	f000 f912 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f000 f91c 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 f919 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80031d8:	20b1      	movs	r0, #177	@ 0xb1
 80031da:	f000 f909 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 f913 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80031e4:	201b      	movs	r0, #27
 80031e6:	f000 f910 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80031ea:	20b6      	movs	r0, #182	@ 0xb6
 80031ec:	f000 f900 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80031f0:	200a      	movs	r0, #10
 80031f2:	f000 f90a 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80031f6:	20a2      	movs	r0, #162	@ 0xa2
 80031f8:	f000 f907 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80031fc:	20c0      	movs	r0, #192	@ 0xc0
 80031fe:	f000 f8f7 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003202:	2010      	movs	r0, #16
 8003204:	f000 f901 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003208:	20c1      	movs	r0, #193	@ 0xc1
 800320a:	f000 f8f1 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800320e:	2010      	movs	r0, #16
 8003210:	f000 f8fb 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003214:	20c5      	movs	r0, #197	@ 0xc5
 8003216:	f000 f8eb 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800321a:	2045      	movs	r0, #69	@ 0x45
 800321c:	f000 f8f5 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003220:	2015      	movs	r0, #21
 8003222:	f000 f8f2 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003226:	20c7      	movs	r0, #199	@ 0xc7
 8003228:	f000 f8e2 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800322c:	2090      	movs	r0, #144	@ 0x90
 800322e:	f000 f8ec 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003232:	2036      	movs	r0, #54	@ 0x36
 8003234:	f000 f8dc 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003238:	20c8      	movs	r0, #200	@ 0xc8
 800323a:	f000 f8e6 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800323e:	20f2      	movs	r0, #242	@ 0xf2
 8003240:	f000 f8d6 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f000 f8e0 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800324a:	20b0      	movs	r0, #176	@ 0xb0
 800324c:	f000 f8d0 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003250:	20c2      	movs	r0, #194	@ 0xc2
 8003252:	f000 f8da 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003256:	20b6      	movs	r0, #182	@ 0xb6
 8003258:	f000 f8ca 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800325c:	200a      	movs	r0, #10
 800325e:	f000 f8d4 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003262:	20a7      	movs	r0, #167	@ 0xa7
 8003264:	f000 f8d1 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003268:	2027      	movs	r0, #39	@ 0x27
 800326a:	f000 f8ce 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800326e:	2004      	movs	r0, #4
 8003270:	f000 f8cb 	bl	800340a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003274:	202a      	movs	r0, #42	@ 0x2a
 8003276:	f000 f8bb 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f8c5 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f8c2 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f8bf 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800328c:	20ef      	movs	r0, #239	@ 0xef
 800328e:	f000 f8bc 	bl	800340a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003292:	202b      	movs	r0, #43	@ 0x2b
 8003294:	f000 f8ac 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f000 f8b6 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f8b3 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f000 f8b0 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80032aa:	203f      	movs	r0, #63	@ 0x3f
 80032ac:	f000 f8ad 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80032b0:	20f6      	movs	r0, #246	@ 0xf6
 80032b2:	f000 f89d 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 f8a7 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 f8a4 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80032c2:	2006      	movs	r0, #6
 80032c4:	f000 f8a1 	bl	800340a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80032c8:	202c      	movs	r0, #44	@ 0x2c
 80032ca:	f000 f891 	bl	80033f0 <ili9341_WriteReg>
  LCD_Delay(200);
 80032ce:	20c8      	movs	r0, #200	@ 0xc8
 80032d0:	f7fe fdfe 	bl	8001ed0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80032d4:	2026      	movs	r0, #38	@ 0x26
 80032d6:	f000 f88b 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80032da:	2001      	movs	r0, #1
 80032dc:	f000 f895 	bl	800340a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80032e0:	20e0      	movs	r0, #224	@ 0xe0
 80032e2:	f000 f885 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80032e6:	200f      	movs	r0, #15
 80032e8:	f000 f88f 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80032ec:	2029      	movs	r0, #41	@ 0x29
 80032ee:	f000 f88c 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80032f2:	2024      	movs	r0, #36	@ 0x24
 80032f4:	f000 f889 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80032f8:	200c      	movs	r0, #12
 80032fa:	f000 f886 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80032fe:	200e      	movs	r0, #14
 8003300:	f000 f883 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003304:	2009      	movs	r0, #9
 8003306:	f000 f880 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800330a:	204e      	movs	r0, #78	@ 0x4e
 800330c:	f000 f87d 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003310:	2078      	movs	r0, #120	@ 0x78
 8003312:	f000 f87a 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003316:	203c      	movs	r0, #60	@ 0x3c
 8003318:	f000 f877 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800331c:	2009      	movs	r0, #9
 800331e:	f000 f874 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003322:	2013      	movs	r0, #19
 8003324:	f000 f871 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003328:	2005      	movs	r0, #5
 800332a:	f000 f86e 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800332e:	2017      	movs	r0, #23
 8003330:	f000 f86b 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003334:	2011      	movs	r0, #17
 8003336:	f000 f868 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f000 f865 	bl	800340a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003340:	20e1      	movs	r0, #225	@ 0xe1
 8003342:	f000 f855 	bl	80033f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f000 f85f 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800334c:	2016      	movs	r0, #22
 800334e:	f000 f85c 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003352:	201b      	movs	r0, #27
 8003354:	f000 f859 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003358:	2004      	movs	r0, #4
 800335a:	f000 f856 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800335e:	2011      	movs	r0, #17
 8003360:	f000 f853 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003364:	2007      	movs	r0, #7
 8003366:	f000 f850 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800336a:	2031      	movs	r0, #49	@ 0x31
 800336c:	f000 f84d 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003370:	2033      	movs	r0, #51	@ 0x33
 8003372:	f000 f84a 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003376:	2042      	movs	r0, #66	@ 0x42
 8003378:	f000 f847 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800337c:	2005      	movs	r0, #5
 800337e:	f000 f844 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003382:	200c      	movs	r0, #12
 8003384:	f000 f841 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003388:	200a      	movs	r0, #10
 800338a:	f000 f83e 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800338e:	2028      	movs	r0, #40	@ 0x28
 8003390:	f000 f83b 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003394:	202f      	movs	r0, #47	@ 0x2f
 8003396:	f000 f838 	bl	800340a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800339a:	200f      	movs	r0, #15
 800339c:	f000 f835 	bl	800340a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80033a0:	2011      	movs	r0, #17
 80033a2:	f000 f825 	bl	80033f0 <ili9341_WriteReg>
  LCD_Delay(200);
 80033a6:	20c8      	movs	r0, #200	@ 0xc8
 80033a8:	f7fe fd92 	bl	8001ed0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80033ac:	2029      	movs	r0, #41	@ 0x29
 80033ae:	f000 f81f 	bl	80033f0 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80033b2:	202c      	movs	r0, #44	@ 0x2c
 80033b4:	f000 f81c 	bl	80033f0 <ili9341_WriteReg>
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}

080033bc <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80033c0:	f7fe fc98 	bl	8001cf4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80033c4:	2103      	movs	r1, #3
 80033c6:	20d3      	movs	r0, #211	@ 0xd3
 80033c8:	f000 f82c 	bl	8003424 <ili9341_ReadData>
 80033cc:	4603      	mov	r3, r0
 80033ce:	b29b      	uxth	r3, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80033d8:	2029      	movs	r0, #41	@ 0x29
 80033da:	f000 f809 	bl	80033f0 <ili9341_WriteReg>
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80033e6:	2028      	movs	r0, #40	@ 0x28
 80033e8:	f000 f802 	bl	80033f0 <ili9341_WriteReg>
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fd13 	bl	8001e28 <LCD_IO_WriteReg>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fce4 	bl	8001de4 <LCD_IO_WriteData>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	460a      	mov	r2, r1
 800342e:	80fb      	strh	r3, [r7, #6]
 8003430:	4613      	mov	r3, r2
 8003432:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003434:	797a      	ldrb	r2, [r7, #5]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fd16 	bl	8001e6c <LCD_IO_ReadData>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800344e:	23f0      	movs	r3, #240	@ 0xf0
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800345e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa59 	bl	8003930 <stmpe811_GetInstance>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2bff      	cmp	r3, #255	@ 0xff
 8003486:	d112      	bne.n	80034ae <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8003488:	2000      	movs	r0, #0
 800348a:	f000 fa51 	bl	8003930 <stmpe811_GetInstance>
 800348e:	4603      	mov	r3, r0
 8003490:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003492:	7bbb      	ldrb	r3, [r7, #14]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d80a      	bhi.n	80034ae <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8003498:	7bbb      	ldrb	r3, [r7, #14]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	b2d1      	uxtb	r1, r2
 800349e:	4a06      	ldr	r2, [pc, #24]	@ (80034b8 <stmpe811_Init+0x4c>)
 80034a0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80034a2:	f7fe fd20 	bl	8001ee6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f807 	bl	80034bc <stmpe811_Reset>
    }
  }
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000770 	.word	0x20000770

080034bc <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2202      	movs	r2, #2
 80034cc:	2103      	movs	r1, #3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fd15 	bl	8001efe <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80034d4:	200a      	movs	r0, #10
 80034d6:	f7fe fd4e 	bl	8001f76 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	2103      	movs	r1, #3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fd0b 	bl	8001efe <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fe fd44 	bl	8001f76 <IOE_Delay>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003500:	f7fe fcf1 	bl	8001ee6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fd0a 	bl	8001f24 <IOE_Read>
 8003510:	4603      	mov	r3, r0
 8003512:	b21b      	sxth	r3, r3
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2101      	movs	r1, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fd00 	bl	8001f24 <IOE_Read>
 8003524:	4603      	mov	r3, r0
 8003526:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003528:	4323      	orrs	r3, r4
 800352a:	b21b      	sxth	r3, r3
 800352c:	b29b      	uxth	r3, r3
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}

08003536 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2109      	movs	r1, #9
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fcea 	bl	8001f24 <IOE_Read>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	2109      	movs	r1, #9
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fcca 	bl	8001efe <IOE_Write>
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2109      	movs	r1, #9
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fccc 	bl	8001f24 <IOE_Read>
 800358c:	4603      	mov	r3, r0
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	2109      	movs	r1, #9
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fcac 	bl	8001efe <IOE_Write>
    
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	460a      	mov	r2, r1
 80035b8:	80fb      	strh	r3, [r7, #6]
 80035ba:	4613      	mov	r3, r2
 80035bc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	210a      	movs	r1, #10
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fcab 	bl	8001f24 <IOE_Read>
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	797b      	ldrb	r3, [r7, #5]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	210a      	movs	r1, #10
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fc8b 	bl	8001efe <IOE_Write>
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	460a      	mov	r2, r1
 80035fa:	80fb      	strh	r3, [r7, #6]
 80035fc:	4613      	mov	r3, r2
 80035fe:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	210a      	movs	r1, #10
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fc8a 	bl	8001f24 <IOE_Read>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003614:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003618:	43db      	mvns	r3, r3
 800361a:	b25a      	sxtb	r2, r3
 800361c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003620:	4013      	ands	r3, r2
 8003622:	b25b      	sxtb	r3, r3
 8003624:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	210a      	movs	r1, #10
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fc65 	bl	8001efe <IOE_Write>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	80fb      	strh	r3, [r7, #6]
 8003648:	4613      	mov	r3, r2
 800364a:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	210b      	movs	r1, #11
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fc66 	bl	8001f24 <IOE_Read>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	797b      	ldrb	r3, [r7, #5]
 800365e:	4013      	ands	r3, r2
 8003660:	b2db      	uxtb	r3, r3
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	460a      	mov	r2, r1
 8003674:	80fb      	strh	r3, [r7, #6]
 8003676:	4613      	mov	r3, r2
 8003678:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	797a      	ldrb	r2, [r7, #5]
 8003680:	210b      	movs	r1, #11
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fc3b 	bl	8001efe <IOE_Write>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2117      	movs	r1, #23
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fc3c 	bl	8001f24 <IOE_Read>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b25b      	sxtb	r3, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036bc:	4013      	ands	r3, r2
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	2117      	movs	r1, #23
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fc17 	bl	8001efe <IOE_Write>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2104      	movs	r1, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fc1b 	bl	8001f24 <IOE_Read>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	2104      	movs	r1, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fbfb 	bl	8001efe <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	21f0      	movs	r1, #240	@ 0xf0
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ffbf 	bl	8003690 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	2104      	movs	r1, #4
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fbeb 	bl	8001efe <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2249      	movs	r2, #73	@ 0x49
 800372e:	2120      	movs	r1, #32
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fbe4 	bl	8001efe <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003736:	2002      	movs	r0, #2
 8003738:	f7fe fc1d 	bl	8001f76 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2201      	movs	r2, #1
 8003742:	2121      	movs	r1, #33	@ 0x21
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fbda 	bl	8001efe <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	229a      	movs	r2, #154	@ 0x9a
 8003750:	2141      	movs	r1, #65	@ 0x41
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fbd3 	bl	8001efe <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2201      	movs	r2, #1
 800375e:	214a      	movs	r1, #74	@ 0x4a
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fbcc 	bl	8001efe <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2201      	movs	r2, #1
 800376c:	214b      	movs	r1, #75	@ 0x4b
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fbc5 	bl	8001efe <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2200      	movs	r2, #0
 800377a:	214b      	movs	r1, #75	@ 0x4b
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fbbe 	bl	8001efe <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2201      	movs	r2, #1
 8003788:	2156      	movs	r1, #86	@ 0x56
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fbb7 	bl	8001efe <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2201      	movs	r2, #1
 8003796:	2158      	movs	r1, #88	@ 0x58
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fbb0 	bl	8001efe <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2201      	movs	r2, #1
 80037a4:	2140      	movs	r1, #64	@ 0x40
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fba9 	bl	8001efe <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	22ff      	movs	r2, #255	@ 0xff
 80037b2:	210b      	movs	r1, #11
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fba2 	bl	8001efe <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80037ba:	2002      	movs	r0, #2
 80037bc:	f7fe fbdb 	bl	8001f76 <IOE_Delay>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2140      	movs	r1, #64	@ 0x40
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fba1 	bl	8001f24 <IOE_Read>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b80      	cmp	r3, #128	@ 0x80
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	214c      	movs	r1, #76	@ 0x4c
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fb8f 	bl	8001f24 <IOE_Read>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e00d      	b.n	800382e <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2201      	movs	r2, #1
 8003818:	214b      	movs	r1, #75	@ 0x4b
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fb6f 	bl	8001efe <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2200      	movs	r2, #0
 8003826:	214b      	movs	r1, #75	@ 0x4b
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fb68 	bl	8001efe <IOE_Write>
  }
  
  return ret;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	b2d8      	uxtb	r0, r3
 800384a:	f107 0210 	add.w	r2, r7, #16
 800384e:	2304      	movs	r3, #4
 8003850:	21d7      	movs	r1, #215	@ 0xd7
 8003852:	f7fe fb7a 	bl	8001f4a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003856:	7c3b      	ldrb	r3, [r7, #16]
 8003858:	061a      	lsls	r2, r3, #24
 800385a:	7c7b      	ldrb	r3, [r7, #17]
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	7cbb      	ldrb	r3, [r7, #18]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4313      	orrs	r3, r2
 8003866:	7cfa      	ldrb	r2, [r7, #19]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	0d1b      	lsrs	r3, r3, #20
 8003870:	b29a      	uxth	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	b29b      	uxth	r3, r3
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2201      	movs	r2, #1
 800388c:	214b      	movs	r1, #75	@ 0x4b
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fb35 	bl	8001efe <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003894:	89fb      	ldrh	r3, [r7, #14]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2200      	movs	r2, #0
 800389a:	214b      	movs	r1, #75	@ 0x4b
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fb2e 	bl	8001efe <IOE_Write>
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80038b4:	f7fe fb1d 	bl	8001ef2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	211f      	movs	r1, #31
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fe76 	bl	80035ae <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fe36 	bl	8003536 <stmpe811_EnableGlobalIT>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe47 	bl	8003572 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	211f      	movs	r1, #31
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fe81 	bl	80035f0 <stmpe811_DisableITSource>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	211f      	movs	r1, #31
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fe99 	bl	800363c <stmpe811_ReadGITStatus>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	211f      	movs	r1, #31
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fea1 	bl	800366a <stmpe811_ClearGlobalIT>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
 8003942:	e00b      	b.n	800395c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <stmpe811_GetInstance+0x40>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	461a      	mov	r2, r3
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	e006      	b.n	8003964 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3301      	adds	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d9f0      	bls.n	8003944 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003962:	23ff      	movs	r3, #255	@ 0xff
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	20000770 	.word	0x20000770

08003974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003978:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <HAL_Init+0x40>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0d      	ldr	r2, [pc, #52]	@ (80039b4 <HAL_Init+0x40>)
 800397e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <HAL_Init+0x40>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <HAL_Init+0x40>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800398e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003990:	4b08      	ldr	r3, [pc, #32]	@ (80039b4 <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <HAL_Init+0x40>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800399c:	2003      	movs	r0, #3
 800399e:	f000 f8fc 	bl	8003b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a2:	200f      	movs	r0, #15
 80039a4:	f7fd fe3a 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a8:	f7fd fabc 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00

080039b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_IncTick+0x20>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_IncTick+0x24>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	@ (80039dc <HAL_IncTick+0x24>)
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000080 	.word	0x20000080
 80039dc:	20000774 	.word	0x20000774

080039e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <HAL_GetTick+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000774 	.word	0x20000774

080039f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff ffee 	bl	80039e0 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d005      	beq.n	8003a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_Delay+0x44>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a1e:	bf00      	nop
 8003a20:	f7ff ffde 	bl	80039e0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8f7      	bhi.n	8003a20 <HAL_Delay+0x28>
  {
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000080 	.word	0x20000080

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 0307 	and.w	r3, r3, #7
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db0b      	blt.n	8003ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4907      	ldr	r1, [pc, #28]	@ (8003adc <__NVIC_EnableIRQ+0x38>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db0a      	blt.n	8003b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <__NVIC_SetPriority+0x4c>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b08:	e00a      	b.n	8003b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4908      	ldr	r1, [pc, #32]	@ (8003b30 <__NVIC_SetPriority+0x50>)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	3b04      	subs	r3, #4
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	761a      	strb	r2, [r3, #24]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	@ 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f1c3 0307 	rsb	r3, r3, #7
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf28      	it	cs
 8003b52:	2304      	movcs	r3, #4
 8003b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d902      	bls.n	8003b64 <NVIC_EncodePriority+0x30>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b03      	subs	r3, #3
 8003b62:	e000      	b.n	8003b66 <NVIC_EncodePriority+0x32>
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	4313      	orrs	r3, r2
         );
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	@ 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ff4c 	bl	8003a40 <__NVIC_SetPriorityGrouping>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc2:	f7ff ff61 	bl	8003a88 <__NVIC_GetPriorityGrouping>
 8003bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f7ff ffb1 	bl	8003b34 <NVIC_EncodePriority>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff80 	bl	8003ae0 <__NVIC_SetPriority>
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ff54 	bl	8003aa4 <__NVIC_EnableIRQ>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff fee6 	bl	80039e0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e099      	b.n	8003d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c40:	e00f      	b.n	8003c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c42:	f7ff fecd 	bl	80039e0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d908      	bls.n	8003c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e078      	b.n	8003d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e8      	bne.n	8003c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4b38      	ldr	r3, [pc, #224]	@ (8003d5c <HAL_DMA_Init+0x158>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d107      	bne.n	8003ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0307 	bic.w	r3, r3, #7
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d117      	bne.n	8003d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8bd 	bl	8003e88 <DMA_CheckFifoParam>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d22:	2301      	movs	r3, #1
 8003d24:	e016      	b.n	8003d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f874 	bl	8003e1c <DMA_CalcBaseAndBitshift>
 8003d34:	4603      	mov	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	223f      	movs	r2, #63	@ 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	f010803f 	.word	0xf010803f

08003d60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e050      	b.n	8003e14 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e048      	b.n	8003e14 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2221      	movs	r2, #33	@ 0x21
 8003dc0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f82a 	bl	8003e1c <DMA_CalcBaseAndBitshift>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	223f      	movs	r2, #63	@ 0x3f
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3b10      	subs	r3, #16
 8003e2c:	4a14      	ldr	r2, [pc, #80]	@ (8003e80 <DMA_CalcBaseAndBitshift+0x64>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <DMA_CalcBaseAndBitshift+0x68>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d909      	bls.n	8003e5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	1d1a      	adds	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e5c:	e007      	b.n	8003e6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	aaaaaaab 	.word	0xaaaaaaab
 8003e84:	08010558 	.word	0x08010558

08003e88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11f      	bne.n	8003ee2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d856      	bhi.n	8003f56 <DMA_CheckFifoParam+0xce>
 8003ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <DMA_CheckFifoParam+0x28>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ed3 	.word	0x08003ed3
 8003eb8:	08003ec1 	.word	0x08003ec1
 8003ebc:	08003f57 	.word	0x08003f57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d046      	beq.n	8003f5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed0:	e043      	b.n	8003f5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003eda:	d140      	bne.n	8003f5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e03d      	b.n	8003f5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eea:	d121      	bne.n	8003f30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d837      	bhi.n	8003f62 <DMA_CheckFifoParam+0xda>
 8003ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <DMA_CheckFifoParam+0x70>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f0f 	.word	0x08003f0f
 8003f00:	08003f09 	.word	0x08003f09
 8003f04:	08003f21 	.word	0x08003f21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0c:	e030      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d025      	beq.n	8003f66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1e:	e022      	b.n	8003f66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f28:	d11f      	bne.n	8003f6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f2e:	e01c      	b.n	8003f6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d903      	bls.n	8003f3e <DMA_CheckFifoParam+0xb6>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d003      	beq.n	8003f44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f3c:	e018      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
      break;
 8003f42:	e015      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e00b      	b.n	8003f6e <DMA_CheckFifoParam+0xe6>
      break;
 8003f56:	bf00      	nop
 8003f58:	e00a      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e008      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e006      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;
 8003f62:	bf00      	nop
 8003f64:	e004      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
 8003f68:	e002      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop

08003f80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03b      	b.n	800400a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc ffe4 	bl	8000f74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd0:	f023 0107 	bic.w	r1, r3, #7
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68d1      	ldr	r1, [r2, #12]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_DMA2D_Start+0x1c>
 800402a:	2302      	movs	r3, #2
 800402c:	e018      	b.n	8004060 <HAL_DMA2D_Start+0x4e>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fa99 	bl	8004580 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d056      	beq.n	8004132 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004084:	f7ff fcac 	bl	80039e0 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800408a:	e04b      	b.n	8004124 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	f043 0202 	orr.w	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2221      	movs	r2, #33	@ 0x21
 80040d0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0a5      	b.n	8004232 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d01a      	beq.n	8004124 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7ff fc77 	bl	80039e0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <HAL_DMA2D_PollForTransfer+0x9c>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2203      	movs	r2, #3
 8004114:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e086      	b.n	8004232 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ac      	beq.n	800408c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d061      	beq.n	8004218 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004154:	f7ff fc44 	bl	80039e0 <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800415a:	e056      	b.n	800420a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800416a:	2b00      	cmp	r3, #0
 800416c:	d02e      	beq.n	80041cc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2229      	movs	r2, #41	@ 0x29
 80041b6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d01a      	beq.n	800420a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041d4:	f7ff fc04 	bl	80039e0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <HAL_DMA2D_PollForTransfer+0x182>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e013      	b.n	8004232 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0a1      	beq.n	800415c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2212      	movs	r2, #18
 800421e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d026      	beq.n	80042aa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d021      	beq.n	80042aa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004274:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d026      	beq.n	8004302 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d021      	beq.n	8004302 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042da:	f043 0202 	orr.w	r2, r3, #2
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d026      	beq.n	800435a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004312:	2b00      	cmp	r3, #0
 8004314:	d021      	beq.n	800435a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004324:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2208      	movs	r2, #8
 800432c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00e      	beq.n	800438c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2204      	movs	r2, #4
 8004384:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f853 	bl	8004432 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d024      	beq.n	80043e0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01f      	beq.n	80043e0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2202      	movs	r2, #2
 80043b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01f      	beq.n	800442a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01a      	beq.n	800442a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004402:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f80e 	bl	8004446 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_DMA2D_ConfigLayer+0x20>
 8004478:	2302      	movs	r3, #2
 800447a:	e079      	b.n	8004570 <HAL_DMA2D_ConfigLayer+0x114>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	3318      	adds	r3, #24
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80044a6:	4b35      	ldr	r3, [pc, #212]	@ (800457c <HAL_DMA2D_ConfigLayer+0x120>)
 80044a8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b0a      	cmp	r3, #10
 80044b0:	d003      	beq.n	80044ba <HAL_DMA2D_ConfigLayer+0x5e>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b09      	cmp	r3, #9
 80044b8:	d107      	bne.n	80044ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e005      	b.n	80044d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d120      	bne.n	800451e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	ea02 0103 	and.w	r1, r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b0a      	cmp	r3, #10
 8004504:	d003      	beq.n	800450e <HAL_DMA2D_ConfigLayer+0xb2>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b09      	cmp	r3, #9
 800450c:	d127      	bne.n	800455e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
 800451c:	e01f      	b.n	800455e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	43db      	mvns	r3, r3
 8004528:	ea02 0103 	and.w	r1, r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	430a      	orrs	r2, r1
 8004534:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b0a      	cmp	r3, #10
 8004546:	d003      	beq.n	8004550 <HAL_DMA2D_ConfigLayer+0xf4>
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b09      	cmp	r3, #9
 800454e:	d106      	bne.n	800455e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800455c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	ff03000f 	.word	0xff03000f

08004580 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004580:	b480      	push	{r7}
 8004582:	b08b      	sub	sp, #44	@ 0x2c
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	041a      	lsls	r2, r3, #16
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	431a      	orrs	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b8:	d174      	bne.n	80046a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80045c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80045c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80045d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	e053      	b.n	800469a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d106      	bne.n	8004608 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
 8004606:	e048      	b.n	800469a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d111      	bne.n	8004634 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	0cdb      	lsrs	r3, r3, #19
 8004614:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	0a9b      	lsrs	r3, r3, #10
 800461a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	02db      	lsls	r3, r3, #11
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
 8004632:	e032      	b.n	800469a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d117      	bne.n	800466c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	0fdb      	lsrs	r3, r3, #31
 8004640:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	0cdb      	lsrs	r3, r3, #19
 8004646:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	0adb      	lsrs	r3, r3, #11
 800464c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	431a      	orrs	r2, r3
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	03db      	lsls	r3, r3, #15
 8004662:	4313      	orrs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
 800466a:	e016      	b.n	800469a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	0d1b      	lsrs	r3, r3, #20
 8004676:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	0b1b      	lsrs	r3, r3, #12
 800467c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	011a      	lsls	r2, r3, #4
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	431a      	orrs	r2, r3
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	4313      	orrs	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046a2:	e003      	b.n	80046ac <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	60da      	str	r2, [r3, #12]
}
 80046ac:	bf00      	nop
 80046ae:	372c      	adds	r7, #44	@ 0x2c
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e177      	b.n	80049c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d4:	2201      	movs	r2, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f040 8166 	bne.w	80049be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d005      	beq.n	800470a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004706:	2b02      	cmp	r3, #2
 8004708:	d130      	bne.n	800476c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004740:	2201      	movs	r2, #1
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 0201 	and.w	r2, r3, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b03      	cmp	r3, #3
 8004776:	d017      	beq.n	80047a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d123      	bne.n	80047fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0203 	and.w	r2, r3, #3
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80c0 	beq.w	80049be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4b66      	ldr	r3, [pc, #408]	@ (80049dc <HAL_GPIO_Init+0x324>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	4a65      	ldr	r2, [pc, #404]	@ (80049dc <HAL_GPIO_Init+0x324>)
 8004848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800484c:	6453      	str	r3, [r2, #68]	@ 0x44
 800484e:	4b63      	ldr	r3, [pc, #396]	@ (80049dc <HAL_GPIO_Init+0x324>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485a:	4a61      	ldr	r2, [pc, #388]	@ (80049e0 <HAL_GPIO_Init+0x328>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	3302      	adds	r3, #2
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a58      	ldr	r2, [pc, #352]	@ (80049e4 <HAL_GPIO_Init+0x32c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d037      	beq.n	80048f6 <HAL_GPIO_Init+0x23e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a57      	ldr	r2, [pc, #348]	@ (80049e8 <HAL_GPIO_Init+0x330>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_GPIO_Init+0x23a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_GPIO_Init+0x334>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02b      	beq.n	80048ee <HAL_GPIO_Init+0x236>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <HAL_GPIO_Init+0x338>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d025      	beq.n	80048ea <HAL_GPIO_Init+0x232>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a54      	ldr	r2, [pc, #336]	@ (80049f4 <HAL_GPIO_Init+0x33c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <HAL_GPIO_Init+0x22e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a53      	ldr	r2, [pc, #332]	@ (80049f8 <HAL_GPIO_Init+0x340>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x22a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <HAL_GPIO_Init+0x344>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x226>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a51      	ldr	r2, [pc, #324]	@ (8004a00 <HAL_GPIO_Init+0x348>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x222>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a50      	ldr	r2, [pc, #320]	@ (8004a04 <HAL_GPIO_Init+0x34c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x21e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a08 <HAL_GPIO_Init+0x350>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x21a>
 80048ce:	2309      	movs	r3, #9
 80048d0:	e012      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048d2:	230a      	movs	r3, #10
 80048d4:	e010      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048d6:	2308      	movs	r3, #8
 80048d8:	e00e      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048da:	2307      	movs	r3, #7
 80048dc:	e00c      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048de:	2306      	movs	r3, #6
 80048e0:	e00a      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048e2:	2305      	movs	r3, #5
 80048e4:	e008      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e004      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e002      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_Init+0x240>
 80048f6:	2300      	movs	r3, #0
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	f002 0203 	and.w	r2, r2, #3
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	4093      	lsls	r3, r2
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004908:	4935      	ldr	r1, [pc, #212]	@ (80049e0 <HAL_GPIO_Init+0x328>)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004916:	4b3d      	ldr	r3, [pc, #244]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493a:	4a34      	ldr	r2, [pc, #208]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004940:	4b32      	ldr	r3, [pc, #200]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004964:	4a29      	ldr	r2, [pc, #164]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800496a:	4b28      	ldr	r3, [pc, #160]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004994:	4b1d      	ldr	r3, [pc, #116]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b8:	4a14      	ldr	r2, [pc, #80]	@ (8004a0c <HAL_GPIO_Init+0x354>)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	f67f ae84 	bls.w	80046d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3724      	adds	r7, #36	@ 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40013800 	.word	0x40013800
 80049e4:	40020000 	.word	0x40020000
 80049e8:	40020400 	.word	0x40020400
 80049ec:	40020800 	.word	0x40020800
 80049f0:	40020c00 	.word	0x40020c00
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40021400 	.word	0x40021400
 80049fc:	40021800 	.word	0x40021800
 8004a00:	40021c00 	.word	0x40021c00
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40022400 	.word	0x40022400
 8004a0c:	40013c00 	.word	0x40013c00

08004a10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e0d9      	b.n	8004be0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	f040 80c9 	bne.w	8004bda <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a48:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf8 <HAL_GPIO_DeInit+0x1e8>)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	3302      	adds	r3, #2
 8004a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	220f      	movs	r2, #15
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a63      	ldr	r2, [pc, #396]	@ (8004bfc <HAL_GPIO_DeInit+0x1ec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d037      	beq.n	8004ae2 <HAL_GPIO_DeInit+0xd2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a62      	ldr	r2, [pc, #392]	@ (8004c00 <HAL_GPIO_DeInit+0x1f0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_GPIO_DeInit+0xce>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a61      	ldr	r2, [pc, #388]	@ (8004c04 <HAL_GPIO_DeInit+0x1f4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <HAL_GPIO_DeInit+0xca>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a60      	ldr	r2, [pc, #384]	@ (8004c08 <HAL_GPIO_DeInit+0x1f8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d025      	beq.n	8004ad6 <HAL_GPIO_DeInit+0xc6>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004c0c <HAL_GPIO_DeInit+0x1fc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <HAL_GPIO_DeInit+0xc2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a5e      	ldr	r2, [pc, #376]	@ (8004c10 <HAL_GPIO_DeInit+0x200>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d019      	beq.n	8004ace <HAL_GPIO_DeInit+0xbe>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004c14 <HAL_GPIO_DeInit+0x204>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_GPIO_DeInit+0xba>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c18 <HAL_GPIO_DeInit+0x208>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_GPIO_DeInit+0xb6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a5b      	ldr	r2, [pc, #364]	@ (8004c1c <HAL_GPIO_DeInit+0x20c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_DeInit+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c20 <HAL_GPIO_DeInit+0x210>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_GPIO_DeInit+0xae>
 8004aba:	2309      	movs	r3, #9
 8004abc:	e012      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004abe:	230a      	movs	r3, #10
 8004ac0:	e010      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	e00e      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	e00c      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004aca:	2306      	movs	r3, #6
 8004acc:	e00a      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ace:	2305      	movs	r3, #5
 8004ad0:	e008      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_DeInit+0xd4>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d132      	bne.n	8004b5a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004af4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	4949      	ldr	r1, [pc, #292]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b02:	4b48      	ldr	r3, [pc, #288]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	4946      	ldr	r1, [pc, #280]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004b10:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	4942      	ldr	r1, [pc, #264]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b1e:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	493f      	ldr	r1, [pc, #252]	@ (8004c24 <HAL_GPIO_DeInit+0x214>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	220f      	movs	r2, #15
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf8 <HAL_GPIO_DeInit+0x1e8>)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	3302      	adds	r3, #2
 8004b44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	482a      	ldr	r0, [pc, #168]	@ (8004bf8 <HAL_GPIO_DeInit+0x1e8>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	400a      	ands	r2, r1
 8004b54:	3302      	adds	r3, #2
 8004b56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2103      	movs	r1, #3
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	08da      	lsrs	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3208      	adds	r2, #8
 8004b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	220f      	movs	r2, #15
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	08d2      	lsrs	r2, r2, #3
 8004b90:	4019      	ands	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3208      	adds	r2, #8
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	401a      	ands	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	2103      	movs	r1, #3
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	f67f af22 	bls.w	8004a2c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	40020000 	.word	0x40020000
 8004c00:	40020400 	.word	0x40020400
 8004c04:	40020800 	.word	0x40020800
 8004c08:	40020c00 	.word	0x40020c00
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40021400 	.word	0x40021400
 8004c14:	40021800 	.word	0x40021800
 8004c18:	40021c00 	.word	0x40021c00
 8004c1c:	40022000 	.word	0x40022000
 8004c20:	40022400 	.word	0x40022400
 8004c24:	40013c00 	.word	0x40013c00

08004c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
 8004c34:	4613      	mov	r3, r2
 8004c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c38:	787b      	ldrb	r3, [r7, #1]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c44:	e003      	b.n	8004c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	041a      	lsls	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	619a      	str	r2, [r3, #24]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e12b      	b.n	8004ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc f99e 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f003 fa8e 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4a81      	ldr	r2, [pc, #516]	@ (8004ed0 <HAL_I2C_Init+0x274>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d807      	bhi.n	8004ce0 <HAL_I2C_Init+0x84>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a80      	ldr	r2, [pc, #512]	@ (8004ed4 <HAL_I2C_Init+0x278>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	bf94      	ite	ls
 8004cd8:	2301      	movls	r3, #1
 8004cda:	2300      	movhi	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e006      	b.n	8004cee <HAL_I2C_Init+0x92>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ed8 <HAL_I2C_Init+0x27c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bf94      	ite	ls
 8004ce8:	2301      	movls	r3, #1
 8004cea:	2300      	movhi	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e0e7      	b.n	8004ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a78      	ldr	r2, [pc, #480]	@ (8004edc <HAL_I2C_Init+0x280>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	0c9b      	lsrs	r3, r3, #18
 8004d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed0 <HAL_I2C_Init+0x274>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d802      	bhi.n	8004d30 <HAL_I2C_Init+0xd4>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	e009      	b.n	8004d44 <HAL_I2C_Init+0xe8>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	4a69      	ldr	r2, [pc, #420]	@ (8004ee0 <HAL_I2C_Init+0x284>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	099b      	lsrs	r3, r3, #6
 8004d42:	3301      	adds	r3, #1
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	495c      	ldr	r1, [pc, #368]	@ (8004ed0 <HAL_I2C_Init+0x274>)
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d819      	bhi.n	8004d98 <HAL_I2C_Init+0x13c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1e59      	subs	r1, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d78:	400b      	ands	r3, r1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_I2C_Init+0x138>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1e59      	subs	r1, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	e051      	b.n	8004e38 <HAL_I2C_Init+0x1dc>
 8004d94:	2304      	movs	r3, #4
 8004d96:	e04f      	b.n	8004e38 <HAL_I2C_Init+0x1dc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d111      	bne.n	8004dc4 <HAL_I2C_Init+0x168>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1e58      	subs	r0, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	440b      	add	r3, r1
 8004dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e012      	b.n	8004dea <HAL_I2C_Init+0x18e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e58      	subs	r0, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	0099      	lsls	r1, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Init+0x196>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e022      	b.n	8004e38 <HAL_I2C_Init+0x1dc>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10e      	bne.n	8004e18 <HAL_I2C_Init+0x1bc>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1e58      	subs	r0, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	440b      	add	r3, r1
 8004e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e16:	e00f      	b.n	8004e38 <HAL_I2C_Init+0x1dc>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1e58      	subs	r0, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	0099      	lsls	r1, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	6809      	ldr	r1, [r1, #0]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6911      	ldr	r1, [r2, #16]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	4311      	orrs	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	000186a0 	.word	0x000186a0
 8004ed4:	001e847f 	.word	0x001e847f
 8004ed8:	003d08ff 	.word	0x003d08ff
 8004edc:	431bde83 	.word	0x431bde83
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e021      	b.n	8004f3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	@ 0x24
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc f8c2 	bl	8001098 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	460b      	mov	r3, r1
 8004f58:	813b      	strh	r3, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f5e:	f7fe fd3f 	bl	80039e0 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	f040 80d9 	bne.w	8005124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2319      	movs	r3, #25
 8004f78:	2201      	movs	r2, #1
 8004f7a:	496d      	ldr	r1, [pc, #436]	@ (8005130 <HAL_I2C_Mem_Write+0x1ec>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fc99 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0cc      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_I2C_Mem_Write+0x56>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0c5      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d007      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2221      	movs	r2, #33	@ 0x21
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2240      	movs	r2, #64	@ 0x40
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8005134 <HAL_I2C_Mem_Write+0x1f0>)
 8005000:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005002:	88f8      	ldrh	r0, [r7, #6]
 8005004:	893a      	ldrh	r2, [r7, #8]
 8005006:	8979      	ldrh	r1, [r7, #10]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4603      	mov	r3, r0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fad0 	bl	80055b8 <I2C_RequestMemoryWrite>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d052      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e081      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fd5e 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	2b04      	cmp	r3, #4
 8005038:	d107      	bne.n	800504a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e06b      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b04      	cmp	r3, #4
 800508a:	d11b      	bne.n	80050c4 <HAL_I2C_Mem_Write+0x180>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d017      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1aa      	bne.n	8005022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fd51 	bl	8005b78 <I2C_WaitOnBTFFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e016      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	00100002 	.word	0x00100002
 8005134:	ffff0000 	.word	0xffff0000

08005138 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	@ 0x30
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	461a      	mov	r2, r3
 8005146:	4603      	mov	r3, r0
 8005148:	817b      	strh	r3, [r7, #10]
 800514a:	460b      	mov	r3, r1
 800514c:	813b      	strh	r3, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005152:	f7fe fc45 	bl	80039e0 <HAL_GetTick>
 8005156:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b20      	cmp	r3, #32
 8005162:	f040 8214 	bne.w	800558e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2319      	movs	r3, #25
 800516c:	2201      	movs	r2, #1
 800516e:	497b      	ldr	r1, [pc, #492]	@ (800535c <HAL_I2C_Mem_Read+0x224>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fb9f 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
 800517e:	e207      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_I2C_Mem_Read+0x56>
 800518a:	2302      	movs	r3, #2
 800518c:	e200      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d007      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2222      	movs	r2, #34	@ 0x22
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2240      	movs	r2, #64	@ 0x40
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005360 <HAL_I2C_Mem_Read+0x228>)
 80051f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051f6:	88f8      	ldrh	r0, [r7, #6]
 80051f8:	893a      	ldrh	r2, [r7, #8]
 80051fa:	8979      	ldrh	r1, [r7, #10]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	4603      	mov	r3, r0
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fa6c 	bl	80056e4 <I2C_RequestMemoryRead>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e1bc      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d113      	bne.n	8005246 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521e:	2300      	movs	r3, #0
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e190      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524a:	2b01      	cmp	r3, #1
 800524c:	d11b      	bne.n	8005286 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e170      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11b      	bne.n	80052c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	e150      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052dc:	e144      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	f200 80f1 	bhi.w	80054ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d123      	bne.n	8005338 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fc87 	bl	8005c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e145      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005336:	e117      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533c:	2b02      	cmp	r3, #2
 800533e:	d14e      	bne.n	80053de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2200      	movs	r2, #0
 8005348:	4906      	ldr	r1, [pc, #24]	@ (8005364 <HAL_I2C_Mem_Read+0x22c>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fab2 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e11a      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
 800535a:	bf00      	nop
 800535c:	00100002 	.word	0x00100002
 8005360:	ffff0000 	.word	0xffff0000
 8005364:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053dc:	e0c4      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	2200      	movs	r2, #0
 80053e6:	496c      	ldr	r1, [pc, #432]	@ (8005598 <HAL_I2C_Mem_Read+0x460>)
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fa63 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0cb      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	2200      	movs	r2, #0
 8005442:	4955      	ldr	r1, [pc, #340]	@ (8005598 <HAL_I2C_Mem_Read+0x460>)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fa35 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e09d      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054c8:	e04e      	b.n	8005568 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fb9a 	bl	8005c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e058      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b04      	cmp	r3, #4
 800551c:	d124      	bne.n	8005568 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005522:	2b03      	cmp	r3, #3
 8005524:	d107      	bne.n	8005536 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005534:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f aeb6 	bne.w	80052de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e000      	b.n	8005590 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	4618      	mov	r0, r3
 8005592:	3728      	adds	r7, #40	@ 0x28
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	00010004 	.word	0x00010004

0800559c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055aa:	b2db      	uxtb	r3, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	817b      	strh	r3, [r7, #10]
 80055ca:	460b      	mov	r3, r1
 80055cc:	813b      	strh	r3, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f960 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005608:	d103      	bne.n	8005612 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e05f      	b.n	80056d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	6a3a      	ldr	r2, [r7, #32]
 800562a:	492d      	ldr	r1, [pc, #180]	@ (80056e0 <I2C_RequestMemoryWrite+0x128>)
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f9bb 	bl	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e04c      	b.n	80056d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	6a39      	ldr	r1, [r7, #32]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fa46 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	2b04      	cmp	r3, #4
 8005668:	d107      	bne.n	800567a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e02b      	b.n	80056d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005684:	893b      	ldrh	r3, [r7, #8]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	611a      	str	r2, [r3, #16]
 800568e:	e021      	b.n	80056d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005690:	893b      	ldrh	r3, [r7, #8]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	b29b      	uxth	r3, r3
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a0:	6a39      	ldr	r1, [r7, #32]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa20 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00d      	beq.n	80056ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d107      	bne.n	80056c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e005      	b.n	80056d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ca:	893b      	ldrh	r3, [r7, #8]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	00010002 	.word	0x00010002

080056e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800570c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	2200      	movs	r2, #0
 8005726:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8c2 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005744:	d103      	bne.n	800574e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0aa      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005752:	897b      	ldrh	r3, [r7, #10]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	4952      	ldr	r1, [pc, #328]	@ (80058b0 <I2C_RequestMemoryRead+0x1cc>)
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f91d 	bl	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e097      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f9a8 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d107      	bne.n	80057b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e076      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d105      	bne.n	80057cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	e021      	b.n	8005810 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	6a39      	ldr	r1, [r7, #32]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f982 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d107      	bne.n	8005802 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e050      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005812:	6a39      	ldr	r1, [r7, #32]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f967 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b04      	cmp	r3, #4
 8005826:	d107      	bne.n	8005838 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005836:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e035      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800584a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2200      	movs	r2, #0
 8005854:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f82b 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005872:	d103      	bne.n	800587c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e013      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005880:	897b      	ldrh	r3, [r7, #10]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	4906      	ldr	r1, [pc, #24]	@ (80058b0 <I2C_RequestMemoryRead+0x1cc>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f886 	bl	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	00010002 	.word	0x00010002

080058b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c4:	e048      	b.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d044      	beq.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fe f887 	bl	80039e0 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d139      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10d      	bne.n	800590a <I2C_WaitOnFlagUntilTimeout+0x56>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	43da      	mvns	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	e00c      	b.n	8005924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	43da      	mvns	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4013      	ands	r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	429a      	cmp	r2, r3
 8005928:	d116      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e023      	b.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0c1b      	lsrs	r3, r3, #16
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10d      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	e00c      	b.n	8005998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	43da      	mvns	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4013      	ands	r3, r2
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	429a      	cmp	r2, r3
 800599c:	d093      	beq.n	80058c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059b6:	e071      	b.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c6:	d123      	bne.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e067      	b.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d041      	beq.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fd ffe2 	bl	80039e0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d136      	bne.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10c      	bne.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e00b      	b.n	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e021      	b.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10c      	bne.n	8005ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	43da      	mvns	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e00b      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	2301      	movne	r3, #1
 8005ad4:	2300      	moveq	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af6d 	bne.w	80059b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af4:	e034      	b.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f8e3 	bl	8005cc2 <I2C_IsAcknowledgeFailed>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e034      	b.n	8005b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d028      	beq.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0e:	f7fd ff67 	bl	80039e0 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d302      	bcc.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b80      	cmp	r3, #128	@ 0x80
 8005b30:	d016      	beq.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e007      	b.n	8005b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6a:	2b80      	cmp	r3, #128	@ 0x80
 8005b6c:	d1c3      	bne.n	8005af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b84:	e034      	b.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f89b 	bl	8005cc2 <I2C_IsAcknowledgeFailed>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e034      	b.n	8005c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d028      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fd ff1f 	bl	80039e0 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11d      	bne.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d016      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e007      	b.n	8005c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d1c3      	bne.n	8005b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c14:	e049      	b.n	8005caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d119      	bne.n	8005c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0210 	mvn.w	r2, #16
 8005c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e030      	b.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c58:	f7fd fec2 	bl	80039e0 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11d      	bne.n	8005caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b40      	cmp	r3, #64	@ 0x40
 8005c7a:	d016      	beq.n	8005caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e007      	b.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d1ae      	bne.n	8005c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd8:	d11b      	bne.n	8005d12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ce2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d129      	bne.n	8005d8a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2224      	movs	r2, #36	@ 0x24
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0210 	bic.w	r2, r2, #16
 8005d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d12a      	bne.n	8005e08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2224      	movs	r2, #36	@ 0x24
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005dd2:	89fb      	ldrh	r3, [r7, #14]
 8005dd4:	f023 030f 	bic.w	r3, r3, #15
 8005dd8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	89fb      	ldrh	r3, [r7, #14]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	89fa      	ldrh	r2, [r7, #14]
 8005dea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e08f      	b.n	8005f48 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fb f951 	bl	80010e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005e58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6999      	ldr	r1, [r3, #24]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	041b      	lsls	r3, r3, #16
 8005e9a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a19      	ldr	r1, [r3, #32]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0206 	orr.w	r2, r2, #6
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d023      	beq.n	8005fba <HAL_LTDC_IRQHandler+0x6a>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01e      	beq.n	8005fba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2204      	movs	r2, #4
 8005f92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f86f 	bl	8006098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_LTDC_IRQHandler+0xbc>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01e      	beq.n	800600c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0202 	bic.w	r2, r2, #2
 8005fdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fec:	f043 0202 	orr.w	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f846 	bl	8006098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01b      	beq.n	800604e <HAL_LTDC_IRQHandler+0xfe>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d016      	beq.n	800604e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f82f 	bl	80060ac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01b      	beq.n	8006090 <HAL_LTDC_IRQHandler+0x140>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0208 	bic.w	r2, r2, #8
 8006070:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2208      	movs	r2, #8
 8006078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f818 	bl	80060c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060d4:	b5b0      	push	{r4, r5, r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_LTDC_ConfigLayer+0x1a>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e02c      	b.n	8006148 <HAL_LTDC_ConfigLayer+0x74>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2134      	movs	r1, #52	@ 0x34
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f83b 	bl	80061a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bdb0      	pop	{r4, r5, r7, pc}

08006150 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_LTDC_EnableDither+0x16>
 8006162:	2302      	movs	r3, #2
 8006164:	e016      	b.n	8006194 <HAL_LTDC_EnableDither+0x44>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006176:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <HAL_LTDC_EnableDither+0x50>)
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <HAL_LTDC_EnableDither+0x50>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006180:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40016800 	.word	0x40016800

080061a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b089      	sub	sp, #36	@ 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	4413      	add	r3, r2
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	4413      	add	r3, r2
 80061d2:	3384      	adds	r3, #132	@ 0x84
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	4611      	mov	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	01d2      	lsls	r2, r2, #7
 80061e0:	440a      	add	r2, r1
 80061e2:	3284      	adds	r2, #132	@ 0x84
 80061e4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80061e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	01db      	lsls	r3, r3, #7
 8006208:	440b      	add	r3, r1
 800620a:	3384      	adds	r3, #132	@ 0x84
 800620c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006212:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006222:	4413      	add	r3, r2
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	01db      	lsls	r3, r3, #7
 8006232:	4413      	add	r3, r2
 8006234:	3384      	adds	r3, #132	@ 0x84
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	4611      	mov	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	01d2      	lsls	r2, r2, #7
 8006242:	440a      	add	r2, r1
 8006244:	3284      	adds	r2, #132	@ 0x84
 8006246:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800624a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800625a:	4413      	add	r3, r2
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	01db      	lsls	r3, r3, #7
 8006268:	440b      	add	r3, r1
 800626a:	3384      	adds	r3, #132	@ 0x84
 800626c:	4619      	mov	r1, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	01db      	lsls	r3, r3, #7
 800627e:	4413      	add	r3, r2
 8006280:	3384      	adds	r3, #132	@ 0x84
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	4611      	mov	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	01d2      	lsls	r2, r2, #7
 800628e:	440a      	add	r2, r1
 8006290:	3284      	adds	r2, #132	@ 0x84
 8006292:	f023 0307 	bic.w	r3, r3, #7
 8006296:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	01db      	lsls	r3, r3, #7
 80062a2:	4413      	add	r3, r2
 80062a4:	3384      	adds	r3, #132	@ 0x84
 80062a6:	461a      	mov	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80062be:	041b      	lsls	r3, r3, #16
 80062c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062d0:	461a      	mov	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	440b      	add	r3, r1
 80062e6:	3384      	adds	r3, #132	@ 0x84
 80062e8:	4619      	mov	r1, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	01db      	lsls	r3, r3, #7
 80062fa:	4413      	add	r3, r2
 80062fc:	3384      	adds	r3, #132	@ 0x84
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	4611      	mov	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	01d2      	lsls	r2, r2, #7
 800630a:	440a      	add	r2, r1
 800630c:	3284      	adds	r2, #132	@ 0x84
 800630e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006312:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	01db      	lsls	r3, r3, #7
 800631e:	4413      	add	r3, r2
 8006320:	3384      	adds	r3, #132	@ 0x84
 8006322:	461a      	mov	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	01db      	lsls	r3, r3, #7
 8006334:	4413      	add	r3, r2
 8006336:	3384      	adds	r3, #132	@ 0x84
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	4611      	mov	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	01d2      	lsls	r2, r2, #7
 8006344:	440a      	add	r2, r1
 8006346:	3284      	adds	r2, #132	@ 0x84
 8006348:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800634c:	f023 0307 	bic.w	r3, r3, #7
 8006350:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	6809      	ldr	r1, [r1, #0]
 800635e:	4608      	mov	r0, r1
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	01c9      	lsls	r1, r1, #7
 8006364:	4401      	add	r1, r0
 8006366:	3184      	adds	r1, #132	@ 0x84
 8006368:	4313      	orrs	r3, r2
 800636a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	01db      	lsls	r3, r3, #7
 8006376:	4413      	add	r3, r2
 8006378:	3384      	adds	r3, #132	@ 0x84
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800638a:	2304      	movs	r3, #4
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e01b      	b.n	80063c8 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d102      	bne.n	800639e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8006398:	2303      	movs	r3, #3
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e014      	b.n	80063c8 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d00b      	beq.n	80063be <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d007      	beq.n	80063be <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d003      	beq.n	80063be <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	d102      	bne.n	80063c4 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80063be:	2302      	movs	r3, #2
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e001      	b.n	80063c8 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80063c4:	2301      	movs	r3, #1
 80063c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	01db      	lsls	r3, r3, #7
 80063d2:	4413      	add	r3, r2
 80063d4:	3384      	adds	r3, #132	@ 0x84
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	4611      	mov	r1, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	01d2      	lsls	r2, r2, #7
 80063e2:	440a      	add	r2, r1
 80063e4:	3284      	adds	r2, #132	@ 0x84
 80063e6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80063ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6859      	ldr	r1, [r3, #4]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	1acb      	subs	r3, r1, r3
 8006402:	69f9      	ldr	r1, [r7, #28]
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	6809      	ldr	r1, [r1, #0]
 800640e:	4608      	mov	r0, r1
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	01c9      	lsls	r1, r1, #7
 8006414:	4401      	add	r1, r0
 8006416:	3184      	adds	r1, #132	@ 0x84
 8006418:	4313      	orrs	r3, r2
 800641a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	01db      	lsls	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	3384      	adds	r3, #132	@ 0x84
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	4611      	mov	r1, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	01d2      	lsls	r2, r2, #7
 8006436:	440a      	add	r2, r1
 8006438:	3284      	adds	r2, #132	@ 0x84
 800643a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800643e:	f023 0307 	bic.w	r3, r3, #7
 8006442:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	01db      	lsls	r3, r3, #7
 800644e:	4413      	add	r3, r2
 8006450:	3384      	adds	r3, #132	@ 0x84
 8006452:	461a      	mov	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	01db      	lsls	r3, r3, #7
 8006464:	4413      	add	r3, r2
 8006466:	3384      	adds	r3, #132	@ 0x84
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	01d2      	lsls	r2, r2, #7
 8006474:	440a      	add	r2, r1
 8006476:	3284      	adds	r2, #132	@ 0x84
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6013      	str	r3, [r2, #0]
}
 800647e:	bf00      	nop
 8006480:	3724      	adds	r7, #36	@ 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af02      	add	r7, sp, #8
 8006490:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e101      	b.n	80066a0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f007 fab6 	bl	800da28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ca:	d102      	bne.n	80064d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f004 f9e1 	bl	800a89e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7c1a      	ldrb	r2, [r3, #16]
 80064e4:	f88d 2000 	strb.w	r2, [sp]
 80064e8:	3304      	adds	r3, #4
 80064ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064ec:	f004 f8c0 	bl	800a670 <USB_CoreInit>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d005      	beq.n	8006502 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e0ce      	b.n	80066a0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f004 f9d9 	bl	800a8c0 <USB_SetCurrentMode>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0bf      	b.n	80066a0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e04a      	b.n	80065bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006526:	7bfa      	ldrb	r2, [r7, #15]
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3315      	adds	r3, #21
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800653a:	7bfa      	ldrb	r2, [r7, #15]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3314      	adds	r3, #20
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800654e:	7bfa      	ldrb	r2, [r7, #15]
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	b298      	uxth	r0, r3
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	332e      	adds	r3, #46	@ 0x2e
 8006562:	4602      	mov	r2, r0
 8006564:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006566:	7bfa      	ldrb	r2, [r7, #15]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3318      	adds	r3, #24
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800657a:	7bfa      	ldrb	r2, [r7, #15]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	331c      	adds	r3, #28
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3320      	adds	r3, #32
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3324      	adds	r3, #36	@ 0x24
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	3301      	adds	r3, #1
 80065ba:	73fb      	strb	r3, [r7, #15]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	7bfa      	ldrb	r2, [r7, #15]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3af      	bcc.n	8006526 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e044      	b.n	8006656 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80065f4:	7bfa      	ldrb	r2, [r7, #15]
 80065f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065f8:	7bfa      	ldrb	r2, [r7, #15]
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006624:	7bfa      	ldrb	r2, [r7, #15]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	3301      	adds	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	429a      	cmp	r2, r3
 800665e:	d3b5      	bcc.n	80065cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c1a      	ldrb	r2, [r3, #16]
 8006668:	f88d 2000 	strb.w	r2, [sp]
 800666c:	3304      	adds	r3, #4
 800666e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006670:	f004 f972 	bl	800a958 <USB_DevInit>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e00c      	b.n	80066a0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f005 f9bc 	bl	800ba16 <USB_DevDisconnect>

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_PCD_Start+0x1c>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e022      	b.n	800670a <HAL_PCD_Start+0x62>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f004 f8c3 	bl	800a87c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f005 f96a 	bl	800b9d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b08d      	sub	sp, #52	@ 0x34
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f005 fa28 	bl	800bb7e <USB_GetMode>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f040 848c 	bne.w	800704e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f005 f98c 	bl	800ba58 <USB_ReadInterrupts>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8482 	beq.w	800704c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f005 f979 	bl	800ba58 <USB_ReadInterrupts>
 8006766:	4603      	mov	r3, r0
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d107      	bne.n	8006780 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f002 0202 	and.w	r2, r2, #2
 800677e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f005 f967 	bl	800ba58 <USB_ReadInterrupts>
 800678a:	4603      	mov	r3, r0
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b10      	cmp	r3, #16
 8006792:	d161      	bne.n	8006858 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0210 	bic.w	r2, r2, #16
 80067a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80067ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ce:	d124      	bne.n	800681a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d035      	beq.n	8006848 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	6a38      	ldr	r0, [r7, #32]
 80067f0:	f004 ff9e 	bl	800b730 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006800:	441a      	add	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006812:	441a      	add	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	615a      	str	r2, [r3, #20]
 8006818:	e016      	b.n	8006848 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006820:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006824:	d110      	bne.n	8006848 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800682c:	2208      	movs	r2, #8
 800682e:	4619      	mov	r1, r3
 8006830:	6a38      	ldr	r0, [r7, #32]
 8006832:	f004 ff7d 	bl	800b730 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006842:	441a      	add	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0210 	orr.w	r2, r2, #16
 8006856:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f005 f8fb 	bl	800ba58 <USB_ReadInterrupts>
 8006862:	4603      	mov	r3, r0
 8006864:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006868:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800686c:	f040 80a7 	bne.w	80069be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f005 f900 	bl	800ba7e <USB_ReadDevAllOutEpInterrupt>
 800687e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006880:	e099      	b.n	80069b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 808e 	beq.w	80069aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f005 f924 	bl	800bae6 <USB_ReadDevOutEPInterrupt>
 800689e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	461a      	mov	r2, r3
 80068b8:	2301      	movs	r3, #1
 80068ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fe8c 	bl	80075dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068da:	461a      	mov	r2, r3
 80068dc:	2308      	movs	r3, #8
 80068de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80068e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 ff62 	bl	80077ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	461a      	mov	r2, r3
 8006900:	2310      	movs	r3, #16
 8006902:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d030      	beq.n	8006970 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b80      	cmp	r3, #128	@ 0x80
 8006918:	d109      	bne.n	800692e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006928:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800692c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800692e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006930:	4613      	mov	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4413      	add	r3, r2
 8006940:	3304      	adds	r3, #4
 8006942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d108      	bne.n	800695e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2200      	movs	r2, #0
 8006950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f007 f975 	bl	800dc48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	461a      	mov	r2, r3
 800696c:	2302      	movs	r3, #2
 800696e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006986:	461a      	mov	r2, r3
 8006988:	2320      	movs	r3, #32
 800698a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	461a      	mov	r2, r3
 80069a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	3301      	adds	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af62 	bne.w	8006882 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f005 f848 	bl	800ba58 <USB_ReadInterrupts>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069d2:	f040 80db 	bne.w	8006b8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f005 f869 	bl	800bab2 <USB_ReadDevAllInEpInterrupt>
 80069e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80069e6:	e0cd      	b.n	8006b84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80c2 	beq.w	8006b78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f005 f88f 	bl	800bb22 <USB_ReadDevInEPInterrupt>
 8006a04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d057      	beq.n	8006ac0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	2201      	movs	r2, #1
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	69f9      	ldr	r1, [r7, #28]
 8006a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a30:	4013      	ands	r3, r2
 8006a32:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	461a      	mov	r2, r3
 8006a42:	2301      	movs	r3, #1
 8006a44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	799b      	ldrb	r3, [r3, #6]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d132      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a52:	4613      	mov	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	3320      	adds	r3, #32
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a64:	4613      	mov	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4403      	add	r3, r0
 8006a6e:	331c      	adds	r3, #28
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4419      	add	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a78:	4613      	mov	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4403      	add	r3, r0
 8006a82:	3320      	adds	r3, #32
 8006a84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x3a2>
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3324      	adds	r3, #36	@ 0x24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006aac:	461a      	mov	r2, r3
 8006aae:	2101      	movs	r1, #1
 8006ab0:	f005 f896 	bl	800bbe0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f007 f83f 	bl	800db3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2308      	movs	r3, #8
 8006ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af2:	461a      	mov	r2, r3
 8006af4:	2310      	movs	r3, #16
 8006af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2340      	movs	r3, #64	@ 0x40
 8006b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d023      	beq.n	8006b66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b20:	6a38      	ldr	r0, [r7, #32]
 8006b22:	f004 f87d 	bl	800ac20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	3310      	adds	r3, #16
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	78db      	ldrb	r3, [r3, #3]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d108      	bne.n	8006b54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f007 f88c 	bl	800dc6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b60:	461a      	mov	r2, r3
 8006b62:	2302      	movs	r3, #2
 8006b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fca5 	bl	80074c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f47f af2e 	bne.w	80069e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f004 ff61 	bl	800ba58 <USB_ReadInterrupts>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ba0:	d122      	bne.n	8006be8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d108      	bne.n	8006bd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fe8c 	bl	80078e8 <HAL_PCDEx_LPM_Callback>
 8006bd0:	e002      	b.n	8006bd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f007 f82a 	bl	800dc2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f004 ff33 	bl	800ba58 <USB_ReadInterrupts>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bfc:	d112      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d102      	bne.n	8006c14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f006 ffe6 	bl	800dbe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006c22:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f004 ff15 	bl	800ba58 <USB_ReadInterrupts>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c38:	f040 80b7 	bne.w	8006daa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2110      	movs	r1, #16
 8006c56:	4618      	mov	r0, r3
 8006c58:	f003 ffe2 	bl	800ac20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c60:	e046      	b.n	8006cf0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ca8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cec:	3301      	adds	r3, #1
 8006cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	791b      	ldrb	r3, [r3, #4]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d3b2      	bcc.n	8006c62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d0a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006d0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	7bdb      	ldrb	r3, [r3, #15]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d016      	beq.n	8006d46 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d28:	f043 030b 	orr.w	r3, r3, #11
 8006d2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d3e:	f043 030b 	orr.w	r3, r3, #11
 8006d42:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d44:	e015      	b.n	8006d72 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006d58:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006d5c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d6c:	f043 030b 	orr.w	r3, r3, #11
 8006d70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d80:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006d84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d94:	461a      	mov	r2, r3
 8006d96:	f004 ff23 	bl	800bbe0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f004 fe52 	bl	800ba58 <USB_ReadInterrupts>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dbe:	d123      	bne.n	8006e08 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f004 fee8 	bl	800bb9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f003 ff9f 	bl	800ad12 <USB_GetDevSpeed>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681c      	ldr	r4, [r3, #0]
 8006de0:	f001 f9f2 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8006de4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dea:	461a      	mov	r2, r3
 8006dec:	4620      	mov	r0, r4
 8006dee:	f003 fca3 	bl	800a738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f006 fecb 	bl	800db8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695a      	ldr	r2, [r3, #20]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f004 fe23 	bl	800ba58 <USB_ReadInterrupts>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10a      	bne.n	8006e32 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f006 fea8 	bl	800db72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f002 0208 	and.w	r2, r2, #8
 8006e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f004 fe0e 	bl	800ba58 <USB_ReadInterrupts>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e42:	2b80      	cmp	r3, #128	@ 0x80
 8006e44:	d123      	bne.n	8006e8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e52:	2301      	movs	r3, #1
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e56:	e014      	b.n	8006e82 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d105      	bne.n	8006e7c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 faf2 	bl	8007460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	3301      	adds	r3, #1
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d3e4      	bcc.n	8006e58 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f004 fde0 	bl	800ba58 <USB_ReadInterrupts>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ea2:	d13c      	bne.n	8006f1e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea8:	e02b      	b.n	8006f02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3318      	adds	r3, #24
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d115      	bne.n	8006efc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006ed0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da12      	bge.n	8006efc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3317      	adds	r3, #23
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fab2 	bl	8007460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	3301      	adds	r3, #1
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	791b      	ldrb	r3, [r3, #4]
 8006f06:	461a      	mov	r2, r3
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d3cd      	bcc.n	8006eaa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f004 fd98 	bl	800ba58 <USB_ReadInterrupts>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f32:	d156      	bne.n	8006fe2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f34:	2301      	movs	r3, #1
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f38:	e045      	b.n	8006fc6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d12e      	bne.n	8006fc0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da2b      	bge.n	8006fc0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	0c1a      	lsrs	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006f72:	4053      	eors	r3, r2
 8006f74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d121      	bne.n	8006fc0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fbc:	6053      	str	r3, [r2, #4]
            break;
 8006fbe:	e008      	b.n	8006fd2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	791b      	ldrb	r3, [r3, #4]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d3b3      	bcc.n	8006f3a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f004 fd36 	bl	800ba58 <USB_ReadInterrupts>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff6:	d10a      	bne.n	800700e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f006 fe49 	bl	800dc90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695a      	ldr	r2, [r3, #20]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800700c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f004 fd20 	bl	800ba58 <USB_ReadInterrupts>
 8007018:	4603      	mov	r3, r0
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d115      	bne.n	800704e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f006 fe39 	bl	800dcac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	e000      	b.n	800704e <HAL_PCD_IRQHandler+0x93c>
      return;
 800704c:	bf00      	nop
    }
  }
}
 800704e:	3734      	adds	r7, #52	@ 0x34
 8007050:	46bd      	mov	sp, r7
 8007052:	bd90      	pop	{r4, r7, pc}

08007054 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_PCD_SetAddress+0x1a>
 800706a:	2302      	movs	r3, #2
 800706c:	e012      	b.n	8007094 <HAL_PCD_SetAddress+0x40>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f004 fc7f 	bl	800b988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	70fb      	strb	r3, [r7, #3]
 80070ae:	460b      	mov	r3, r1
 80070b0:	803b      	strh	r3, [r7, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	da0f      	bge.n	80070e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	f003 020f 	and.w	r2, r3, #15
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	3310      	adds	r3, #16
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	3304      	adds	r3, #4
 80070d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	705a      	strb	r2, [r3, #1]
 80070e0:	e00f      	b.n	8007102 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800710e:	883b      	ldrh	r3, [r7, #0]
 8007110:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	78ba      	ldrb	r2, [r7, #2]
 800711c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007130:	78bb      	ldrb	r3, [r7, #2]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d102      	bne.n	800713c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_PCD_EP_Open+0xae>
 8007146:	2302      	movs	r3, #2
 8007148:	e00e      	b.n	8007168 <HAL_PCD_EP_Open+0xcc>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	4618      	mov	r0, r3
 800715a:	f003 fdff 	bl	800ad5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007166:	7afb      	ldrb	r3, [r7, #11]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800717c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007180:	2b00      	cmp	r3, #0
 8007182:	da0f      	bge.n	80071a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	4613      	mov	r3, r2
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	3310      	adds	r3, #16
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	705a      	strb	r2, [r3, #1]
 80071a2:	e00f      	b.n	80071c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f003 020f 	and.w	r2, r3, #15
 80071aa:	4613      	mov	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_PCD_EP_Close+0x6e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e00e      	b.n	80071fc <HAL_PCD_EP_Close+0x8c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f003 fe3d 	bl	800ae6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	460b      	mov	r3, r1
 8007212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	f003 020f 	and.w	r2, r3, #15
 800721a:	4613      	mov	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	3304      	adds	r3, #4
 800722c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2200      	movs	r2, #0
 8007244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	b2da      	uxtb	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	799b      	ldrb	r3, [r3, #6]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d102      	bne.n	8007260 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	799b      	ldrb	r3, [r3, #6]
 8007268:	461a      	mov	r2, r3
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	f003 feda 	bl	800b024 <USB_EPStartXfer>

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
 8007286:	460b      	mov	r3, r1
 8007288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	3310      	adds	r3, #16
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	3304      	adds	r3, #4
 80072a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2201      	movs	r2, #1
 80072b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072ba:	7afb      	ldrb	r3, [r7, #11]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	799b      	ldrb	r3, [r3, #6]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d102      	bne.n	80072d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	799b      	ldrb	r3, [r3, #6]
 80072dc:	461a      	mov	r2, r3
 80072de:	6979      	ldr	r1, [r7, #20]
 80072e0:	f003 fea0 	bl	800b024 <USB_EPStartXfer>

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7912      	ldrb	r2, [r2, #4]
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e04f      	b.n	80073ac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800730c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da0f      	bge.n	8007334 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	3310      	adds	r3, #16
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	705a      	strb	r2, [r3, #1]
 8007332:	e00d      	b.n	8007350 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	3304      	adds	r3, #4
 8007348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	b2da      	uxtb	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_PCD_EP_SetStall+0x82>
 800736c:	2302      	movs	r3, #2
 800736e:	e01d      	b.n	80073ac <HAL_PCD_EP_SetStall+0xbe>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68f9      	ldr	r1, [r7, #12]
 800737e:	4618      	mov	r0, r3
 8007380:	f004 fa2e 	bl	800b7e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7999      	ldrb	r1, [r3, #6]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800739c:	461a      	mov	r2, r3
 800739e:	f004 fc1f 	bl	800bbe0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	7912      	ldrb	r2, [r2, #4]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d901      	bls.n	80073d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e042      	b.n	8007458 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	da0f      	bge.n	80073fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	4613      	mov	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	3310      	adds	r3, #16
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	3304      	adds	r3, #4
 80073f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	705a      	strb	r2, [r3, #1]
 80073f8:	e00f      	b.n	800741a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	4613      	mov	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	3304      	adds	r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_PCD_EP_ClrStall+0x86>
 8007436:	2302      	movs	r3, #2
 8007438:	e00e      	b.n	8007458 <HAL_PCD_EP_ClrStall+0xa4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	4618      	mov	r0, r3
 800744a:	f004 fa37 	bl	800b8bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800746c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007470:	2b00      	cmp	r3, #0
 8007472:	da0c      	bge.n	800748e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	f003 020f 	and.w	r2, r3, #15
 800747a:	4613      	mov	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	3310      	adds	r3, #16
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4413      	add	r3, r2
 8007488:	3304      	adds	r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e00c      	b.n	80074a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	f003 020f 	and.w	r2, r3, #15
 8007494:	4613      	mov	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	3304      	adds	r3, #4
 80074a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f004 f856 	bl	800b560 <USB_EPStopXfer>
 80074b4:	4603      	mov	r3, r0
 80074b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80074b8:	7afb      	ldrb	r3, [r7, #11]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	@ 0x28
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	3310      	adds	r3, #16
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	695a      	ldr	r2, [r3, #20]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d901      	bls.n	80074fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e06b      	b.n	80075d2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	429a      	cmp	r2, r3
 800750e:	d902      	bls.n	8007516 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	3303      	adds	r3, #3
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800751e:	e02a      	b.n	8007576 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d902      	bls.n	800753c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3303      	adds	r3, #3
 8007540:	089b      	lsrs	r3, r3, #2
 8007542:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68d9      	ldr	r1, [r3, #12]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4603      	mov	r3, r0
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f004 f8ab 	bl	800b6b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	429a      	cmp	r2, r3
 800758a:	d809      	bhi.n	80075a0 <PCD_WriteEmptyTxFifo+0xde>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007594:	429a      	cmp	r2, r3
 8007596:	d203      	bcs.n	80075a0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1bf      	bne.n	8007520 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d811      	bhi.n	80075d0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	2201      	movs	r2, #1
 80075b4:	fa02 f303 	lsl.w	r3, r2, r3
 80075b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	43db      	mvns	r3, r3
 80075c6:	6939      	ldr	r1, [r7, #16]
 80075c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075cc:	4013      	ands	r3, r2
 80075ce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	333c      	adds	r3, #60	@ 0x3c
 80075f4:	3304      	adds	r3, #4
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	799b      	ldrb	r3, [r3, #6]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d17b      	bne.n	800770a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d015      	beq.n	8007648 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4a61      	ldr	r2, [pc, #388]	@ (80077a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	f240 80b9 	bls.w	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80b3 	beq.w	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763e:	461a      	mov	r2, r3
 8007640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007644:	6093      	str	r3, [r2, #8]
 8007646:	e0a7      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765e:	461a      	mov	r2, r3
 8007660:	2320      	movs	r3, #32
 8007662:	6093      	str	r3, [r2, #8]
 8007664:	e098      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8093 	bne.w	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4a4b      	ldr	r2, [pc, #300]	@ (80077a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d90f      	bls.n	800769a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007690:	461a      	mov	r2, r3
 8007692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007696:	6093      	str	r3, [r2, #8]
 8007698:	e07e      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	3304      	adds	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	0159      	lsls	r1, r3, #5
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d114      	bne.n	80076fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80076e4:	461a      	mov	r2, r3
 80076e6:	2101      	movs	r1, #1
 80076e8:	f004 fa7a 	bl	800bbe0 <USB_EP0_OutStart>
 80076ec:	e006      	b.n	80076fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f006 fa00 	bl	800db08 <HAL_PCD_DataOutStageCallback>
 8007708:	e046      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d124      	bne.n	800775c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772e:	6093      	str	r3, [r2, #8]
 8007730:	e032      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	461a      	mov	r2, r3
 800774a:	2320      	movs	r3, #32
 800774c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f006 f9d7 	bl	800db08 <HAL_PCD_DataOutStageCallback>
 800775a:	e01d      	b.n	8007798 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d114      	bne.n	800778c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d108      	bne.n	800778c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007784:	461a      	mov	r2, r3
 8007786:	2100      	movs	r1, #0
 8007788:	f004 fa2a 	bl	800bbe0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f006 f9b8 	bl	800db08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	4f54300a 	.word	0x4f54300a
 80077a8:	4f54310a 	.word	0x4f54310a

080077ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	333c      	adds	r3, #60	@ 0x3c
 80077c4:	3304      	adds	r3, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4a15      	ldr	r2, [pc, #84]	@ (8007834 <PCD_EP_OutSetupPacket_int+0x88>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d90e      	bls.n	8007800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d009      	beq.n	8007800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f8:	461a      	mov	r2, r3
 80077fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f006 f96f 	bl	800dae4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <PCD_EP_OutSetupPacket_int+0x88>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d90c      	bls.n	8007828 <PCD_EP_OutSetupPacket_int+0x7c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	799b      	ldrb	r3, [r3, #6]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d108      	bne.n	8007828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007820:	461a      	mov	r2, r3
 8007822:	2101      	movs	r1, #1
 8007824:	f004 f9dc 	bl	800bbe0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	4f54300a 	.word	0x4f54300a

08007838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
 8007844:	4613      	mov	r3, r2
 8007846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007856:	883b      	ldrh	r3, [r7, #0]
 8007858:	0419      	lsls	r1, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	430a      	orrs	r2, r1
 8007862:	629a      	str	r2, [r3, #40]	@ 0x28
 8007864:	e028      	b.n	80078b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4413      	add	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007874:	2300      	movs	r3, #0
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e00d      	b.n	8007896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	3340      	adds	r3, #64	@ 0x40
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	0c1b      	lsrs	r3, r3, #16
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	3301      	adds	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
 8007896:	7bfa      	ldrb	r2, [r7, #15]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	3b01      	subs	r3, #1
 800789c:	429a      	cmp	r2, r3
 800789e:	d3ec      	bcc.n	800787a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078a0:	883b      	ldrh	r3, [r7, #0]
 80078a2:	0418      	lsls	r0, r3, #16
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6819      	ldr	r1, [r3, #0]
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	4302      	orrs	r2, r0
 80078b0:	3340      	adds	r3, #64	@ 0x40
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e267      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d075      	beq.n	8007a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800791e:	4b88      	ldr	r3, [pc, #544]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b04      	cmp	r3, #4
 8007928:	d00c      	beq.n	8007944 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800792a:	4b85      	ldr	r3, [pc, #532]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007932:	2b08      	cmp	r3, #8
 8007934:	d112      	bne.n	800795c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007936:	4b82      	ldr	r3, [pc, #520]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800793e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007942:	d10b      	bne.n	800795c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007944:	4b7e      	ldr	r3, [pc, #504]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d05b      	beq.n	8007a08 <HAL_RCC_OscConfig+0x108>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d157      	bne.n	8007a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e242      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007964:	d106      	bne.n	8007974 <HAL_RCC_OscConfig+0x74>
 8007966:	4b76      	ldr	r3, [pc, #472]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a75      	ldr	r2, [pc, #468]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 800796c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e01d      	b.n	80079b0 <HAL_RCC_OscConfig+0xb0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x98>
 800797e:	4b70      	ldr	r3, [pc, #448]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a6f      	ldr	r2, [pc, #444]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a6c      	ldr	r2, [pc, #432]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	e00b      	b.n	80079b0 <HAL_RCC_OscConfig+0xb0>
 8007998:	4b69      	ldr	r3, [pc, #420]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a68      	ldr	r2, [pc, #416]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 800799e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4b66      	ldr	r3, [pc, #408]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a65      	ldr	r2, [pc, #404]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d013      	beq.n	80079e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b8:	f7fc f812 	bl	80039e0 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c0:	f7fc f80e 	bl	80039e0 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	@ 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e207      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0xc0>
 80079de:	e014      	b.n	8007a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fb fffe 	bl	80039e0 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e8:	f7fb fffa 	bl	80039e0 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	@ 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e1f3      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	4b51      	ldr	r3, [pc, #324]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0xe8>
 8007a06:	e000      	b.n	8007a0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d063      	beq.n	8007ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a16:	4b4a      	ldr	r3, [pc, #296]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a22:	4b47      	ldr	r3, [pc, #284]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d11c      	bne.n	8007a68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a2e:	4b44      	ldr	r3, [pc, #272]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d116      	bne.n	8007a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3a:	4b41      	ldr	r3, [pc, #260]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_RCC_OscConfig+0x152>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e1c7      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a52:	4b3b      	ldr	r3, [pc, #236]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4937      	ldr	r1, [pc, #220]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a66:	e03a      	b.n	8007ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d020      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a70:	4b34      	ldr	r3, [pc, #208]	@ (8007b44 <HAL_RCC_OscConfig+0x244>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7fb ffb3 	bl	80039e0 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a7e:	f7fb ffaf 	bl	80039e0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e1a8      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a90:	4b2b      	ldr	r3, [pc, #172]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4925      	ldr	r1, [pc, #148]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	600b      	str	r3, [r1, #0]
 8007ab0:	e015      	b.n	8007ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ab2:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <HAL_RCC_OscConfig+0x244>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fb ff92 	bl	80039e0 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ac0:	f7fb ff8e 	bl	80039e0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e187      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d036      	beq.n	8007b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007af2:	4b15      	ldr	r3, [pc, #84]	@ (8007b48 <HAL_RCC_OscConfig+0x248>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af8:	f7fb ff72 	bl	80039e0 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b00:	f7fb ff6e 	bl	80039e0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e167      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b12:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x200>
 8007b1e:	e01b      	b.n	8007b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <HAL_RCC_OscConfig+0x248>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b26:	f7fb ff5b 	bl	80039e0 <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b2c:	e00e      	b.n	8007b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b2e:	f7fb ff57 	bl	80039e0 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d907      	bls.n	8007b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e150      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
 8007b40:	40023800 	.word	0x40023800
 8007b44:	42470000 	.word	0x42470000
 8007b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b4c:	4b88      	ldr	r3, [pc, #544]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1ea      	bne.n	8007b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8097 	beq.w	8007c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b6a:	4b81      	ldr	r3, [pc, #516]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10f      	bne.n	8007b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b86:	4b7a      	ldr	r3, [pc, #488]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b92:	2301      	movs	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b96:	4b77      	ldr	r3, [pc, #476]	@ (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d118      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ba2:	4b74      	ldr	r3, [pc, #464]	@ (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a73      	ldr	r2, [pc, #460]	@ (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bae:	f7fb ff17 	bl	80039e0 <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb6:	f7fb ff13 	bl	80039e0 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e10c      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d106      	bne.n	8007bea <HAL_RCC_OscConfig+0x2ea>
 8007bdc:	4b64      	ldr	r3, [pc, #400]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be0:	4a63      	ldr	r2, [pc, #396]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be8:	e01c      	b.n	8007c24 <HAL_RCC_OscConfig+0x324>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x30c>
 8007bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bf8:	f043 0304 	orr.w	r3, r3, #4
 8007bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c02:	4a5b      	ldr	r2, [pc, #364]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c0a:	e00b      	b.n	8007c24 <HAL_RCC_OscConfig+0x324>
 8007c0c:	4b58      	ldr	r3, [pc, #352]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c10:	4a57      	ldr	r2, [pc, #348]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c18:	4b55      	ldr	r3, [pc, #340]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1c:	4a54      	ldr	r2, [pc, #336]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c1e:	f023 0304 	bic.w	r3, r3, #4
 8007c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d015      	beq.n	8007c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2c:	f7fb fed8 	bl	80039e0 <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c32:	e00a      	b.n	8007c4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c34:	f7fb fed4 	bl	80039e0 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e0cb      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4a:	4b49      	ldr	r3, [pc, #292]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ee      	beq.n	8007c34 <HAL_RCC_OscConfig+0x334>
 8007c56:	e014      	b.n	8007c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c58:	f7fb fec2 	bl	80039e0 <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c5e:	e00a      	b.n	8007c76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c60:	f7fb febe 	bl	80039e0 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e0b5      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c76:	4b3e      	ldr	r3, [pc, #248]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1ee      	bne.n	8007c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d105      	bne.n	8007c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c88:	4b39      	ldr	r3, [pc, #228]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	4a38      	ldr	r2, [pc, #224]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80a1 	beq.w	8007de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c9e:	4b34      	ldr	r3, [pc, #208]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 030c 	and.w	r3, r3, #12
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d05c      	beq.n	8007d64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d141      	bne.n	8007d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb2:	4b31      	ldr	r3, [pc, #196]	@ (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb8:	f7fb fe92 	bl	80039e0 <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fb fe8e 	bl	80039e0 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e087      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd2:	4b27      	ldr	r3, [pc, #156]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cec:	019b      	lsls	r3, r3, #6
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	491b      	ldr	r1, [pc, #108]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d08:	4b1b      	ldr	r3, [pc, #108]	@ (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fb fe67 	bl	80039e0 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d16:	f7fb fe63 	bl	80039e0 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e05c      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d28:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x416>
 8007d34:	e054      	b.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d36:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3c:	f7fb fe50 	bl	80039e0 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fb fe4c 	bl	80039e0 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e045      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d56:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x444>
 8007d62:	e03d      	b.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d107      	bne.n	8007d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e038      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40007000 	.word	0x40007000
 8007d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007dec <HAL_RCC_OscConfig+0x4ec>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d028      	beq.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d121      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d11a      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007dac:	4013      	ands	r3, r2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d111      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d001      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800

08007df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0cc      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e04:	4b68      	ldr	r3, [pc, #416]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90c      	bls.n	8007e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e12:	4b65      	ldr	r3, [pc, #404]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1a:	4b63      	ldr	r3, [pc, #396]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0b8      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e44:	4b59      	ldr	r3, [pc, #356]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4a58      	ldr	r2, [pc, #352]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e5c:	4b53      	ldr	r3, [pc, #332]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a52      	ldr	r2, [pc, #328]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e68:	4b50      	ldr	r3, [pc, #320]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	494d      	ldr	r1, [pc, #308]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d044      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8e:	4b47      	ldr	r3, [pc, #284]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d119      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e07f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d003      	beq.n	8007eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d107      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eae:	4b3f      	ldr	r3, [pc, #252]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e06f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e067      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ece:	4b37      	ldr	r3, [pc, #220]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f023 0203 	bic.w	r2, r3, #3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4934      	ldr	r1, [pc, #208]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ee0:	f7fb fd7e 	bl	80039e0 <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee6:	e00a      	b.n	8007efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee8:	f7fb fd7a 	bl	80039e0 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e04f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007efe:	4b2b      	ldr	r3, [pc, #172]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 020c 	and.w	r2, r3, #12
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d1eb      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f10:	4b25      	ldr	r3, [pc, #148]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20c      	bcs.n	8007f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f1e:	4b22      	ldr	r3, [pc, #136]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b20      	ldr	r3, [pc, #128]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e032      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f44:	4b19      	ldr	r3, [pc, #100]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4916      	ldr	r1, [pc, #88]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	490e      	ldr	r1, [pc, #56]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f76:	f000 f821 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	490a      	ldr	r1, [pc, #40]	@ (8007fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f88:	5ccb      	ldrb	r3, [r1, r3]
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	4a09      	ldr	r2, [pc, #36]	@ (8007fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f92:	4b09      	ldr	r3, [pc, #36]	@ (8007fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f9 fb40 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40023c00 	.word	0x40023c00
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	0800ea88 	.word	0x0800ea88
 8007fb4:	20000004 	.word	0x20000004
 8007fb8:	2000007c 	.word	0x2000007c

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b094      	sub	sp, #80	@ 0x50
 8007fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd4:	4b79      	ldr	r3, [pc, #484]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d00d      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x40>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f200 80e1 	bhi.w	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d003      	beq.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fee:	e0db      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b73      	ldr	r3, [pc, #460]	@ (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ff4:	e0db      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ff6:	4b73      	ldr	r3, [pc, #460]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ffa:	e0d8      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008006:	4b6d      	ldr	r3, [pc, #436]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d063      	beq.n	80080da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008012:	4b6a      	ldr	r3, [pc, #424]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	2200      	movs	r2, #0
 800801a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800801c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	@ 0x34
 800802a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	0159      	lsls	r1, r3, #5
 800803c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008040:	0150      	lsls	r0, r2, #5
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4621      	mov	r1, r4
 8008048:	1a51      	subs	r1, r2, r1
 800804a:	6139      	str	r1, [r7, #16]
 800804c:	4629      	mov	r1, r5
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008060:	4659      	mov	r1, fp
 8008062:	018b      	lsls	r3, r1, #6
 8008064:	4651      	mov	r1, sl
 8008066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806a:	4651      	mov	r1, sl
 800806c:	018a      	lsls	r2, r1, #6
 800806e:	4651      	mov	r1, sl
 8008070:	ebb2 0801 	subs.w	r8, r2, r1
 8008074:	4659      	mov	r1, fp
 8008076:	eb63 0901 	sbc.w	r9, r3, r1
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800808a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808e:	4690      	mov	r8, r2
 8008090:	4699      	mov	r9, r3
 8008092:	4623      	mov	r3, r4
 8008094:	eb18 0303 	adds.w	r3, r8, r3
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	462b      	mov	r3, r5
 800809c:	eb49 0303 	adc.w	r3, r9, r3
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080ae:	4629      	mov	r1, r5
 80080b0:	024b      	lsls	r3, r1, #9
 80080b2:	4621      	mov	r1, r4
 80080b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080b8:	4621      	mov	r1, r4
 80080ba:	024a      	lsls	r2, r1, #9
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080c2:	2200      	movs	r2, #0
 80080c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080cc:	f7f8 f8e8 	bl	80002a0 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4613      	mov	r3, r2
 80080d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d8:	e058      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080da:	4b38      	ldr	r3, [pc, #224]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	099b      	lsrs	r3, r3, #6
 80080e0:	2200      	movs	r2, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	4611      	mov	r1, r2
 80080e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	2300      	movs	r3, #0
 80080ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	f04f 0000 	mov.w	r0, #0
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008106:	0150      	lsls	r0, r2, #5
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4641      	mov	r1, r8
 800810e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008112:	4649      	mov	r1, r9
 8008114:	eb63 0b01 	sbc.w	fp, r3, r1
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800812c:	ebb2 040a 	subs.w	r4, r2, sl
 8008130:	eb63 050b 	sbc.w	r5, r3, fp
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	00eb      	lsls	r3, r5, #3
 800813e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008142:	00e2      	lsls	r2, r4, #3
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	4643      	mov	r3, r8
 800814a:	18e3      	adds	r3, r4, r3
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	464b      	mov	r3, r9
 8008150:	eb45 0303 	adc.w	r3, r5, r3
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008162:	4629      	mov	r1, r5
 8008164:	028b      	lsls	r3, r1, #10
 8008166:	4621      	mov	r1, r4
 8008168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800816c:	4621      	mov	r1, r4
 800816e:	028a      	lsls	r2, r1, #10
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008176:	2200      	movs	r2, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	61fa      	str	r2, [r7, #28]
 800817c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008180:	f7f8 f88e 	bl	80002a0 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4613      	mov	r3, r2
 800818a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800818c:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	3301      	adds	r3, #1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800819c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800819e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081a6:	e002      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081a8:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80081aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3750      	adds	r7, #80	@ 0x50
 80081b4:	46bd      	mov	sp, r7
 80081b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	00f42400 	.word	0x00f42400
 80081c4:	007a1200 	.word	0x007a1200

080081c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b03      	ldr	r3, [pc, #12]	@ (80081dc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000004 	.word	0x20000004

080081e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081e4:	f7ff fff0 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0a9b      	lsrs	r3, r3, #10
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	@ (8008204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	0800ea98 	.word	0x0800ea98

08008208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800820c:	f7ff ffdc 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	@ (800822c <HAL_RCC_GetPCLK2Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	0800ea98 	.word	0x0800ea98

08008230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	220f      	movs	r2, #15
 800823e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008240:	4b12      	ldr	r3, [pc, #72]	@ (800828c <HAL_RCC_GetClockConfig+0x5c>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0203 	and.w	r2, r3, #3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800824c:	4b0f      	ldr	r3, [pc, #60]	@ (800828c <HAL_RCC_GetClockConfig+0x5c>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008258:	4b0c      	ldr	r3, [pc, #48]	@ (800828c <HAL_RCC_GetClockConfig+0x5c>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008264:	4b09      	ldr	r3, [pc, #36]	@ (800828c <HAL_RCC_GetClockConfig+0x5c>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	08db      	lsrs	r3, r3, #3
 800826a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008272:	4b07      	ldr	r3, [pc, #28]	@ (8008290 <HAL_RCC_GetClockConfig+0x60>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 020f 	and.w	r2, r3, #15
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	601a      	str	r2, [r3, #0]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40023800 	.word	0x40023800
 8008290:	40023c00 	.word	0x40023c00

08008294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d075      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082c8:	4b91      	ldr	r3, [pc, #580]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082ce:	f7fb fb87 	bl	80039e0 <HAL_GetTick>
 80082d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082d4:	e008      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082d6:	f7fb fb83 	bl	80039e0 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e189      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082e8:	4b8a      	ldr	r3, [pc, #552]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	019a      	lsls	r2, r3, #6
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	071b      	lsls	r3, r3, #28
 800830c:	4981      	ldr	r1, [pc, #516]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01f      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008320:	4b7c      	ldr	r3, [pc, #496]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008326:	0f1b      	lsrs	r3, r3, #28
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	019a      	lsls	r2, r3, #6
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	061b      	lsls	r3, r3, #24
 800833a:	431a      	orrs	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	071b      	lsls	r3, r3, #28
 8008340:	4974      	ldr	r1, [pc, #464]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008348:	4b72      	ldr	r3, [pc, #456]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800834a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834e:	f023 021f 	bic.w	r2, r3, #31
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	3b01      	subs	r3, #1
 8008358:	496e      	ldr	r1, [pc, #440]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00d      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	019a      	lsls	r2, r3, #6
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	061b      	lsls	r3, r3, #24
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	071b      	lsls	r3, r3, #28
 8008380:	4964      	ldr	r1, [pc, #400]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008388:	4b61      	ldr	r3, [pc, #388]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800838e:	f7fb fb27 	bl	80039e0 <HAL_GetTick>
 8008392:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008394:	e008      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008396:	f7fb fb23 	bl	80039e0 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d901      	bls.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e129      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0f0      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d105      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d079      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80083cc:	4b52      	ldr	r3, [pc, #328]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083d2:	f7fb fb05 	bl	80039e0 <HAL_GetTick>
 80083d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083d8:	e008      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083da:	f7fb fb01 	bl	80039e0 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e107      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083ec:	4b49      	ldr	r3, [pc, #292]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f8:	d0ef      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d020      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008406:	4b43      	ldr	r3, [pc, #268]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840c:	0f1b      	lsrs	r3, r3, #28
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	019a      	lsls	r2, r3, #6
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	061b      	lsls	r3, r3, #24
 8008420:	431a      	orrs	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	071b      	lsls	r3, r3, #28
 8008426:	493b      	ldr	r1, [pc, #236]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800842e:	4b39      	ldr	r3, [pc, #228]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008434:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	3b01      	subs	r3, #1
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	4934      	ldr	r1, [pc, #208]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01e      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008454:	4b2f      	ldr	r3, [pc, #188]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845a:	0e1b      	lsrs	r3, r3, #24
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	019a      	lsls	r2, r3, #6
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	061b      	lsls	r3, r3, #24
 800846c:	431a      	orrs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	071b      	lsls	r3, r3, #28
 8008474:	4927      	ldr	r1, [pc, #156]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800847c:	4b25      	ldr	r3, [pc, #148]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800847e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008482:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	4922      	ldr	r1, [pc, #136]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800848c:	4313      	orrs	r3, r2
 800848e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008492:	4b21      	ldr	r3, [pc, #132]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008494:	2201      	movs	r2, #1
 8008496:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008498:	f7fb faa2 	bl	80039e0 <HAL_GetTick>
 800849c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084a0:	f7fb fa9e 	bl	80039e0 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e0a4      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084b2:	4b18      	ldr	r3, [pc, #96]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084be:	d1ef      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 808b 	beq.w	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80084ea:	4b0c      	ldr	r3, [pc, #48]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a0b      	ldr	r2, [pc, #44]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80084f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084f6:	f7fb fa73 	bl	80039e0 <HAL_GetTick>
 80084fa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80084fc:	e010      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084fe:	f7fb fa6f 	bl	80039e0 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d909      	bls.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e075      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008510:	42470068 	.word	0x42470068
 8008514:	40023800 	.word	0x40023800
 8008518:	42470070 	.word	0x42470070
 800851c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008520:	4b38      	ldr	r3, [pc, #224]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0e8      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800852c:	4b36      	ldr	r3, [pc, #216]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008534:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d02f      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	429a      	cmp	r2, r3
 8008548:	d028      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800854a:	4b2f      	ldr	r3, [pc, #188]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008552:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008554:	4b2d      	ldr	r3, [pc, #180]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800855a:	4b2c      	ldr	r3, [pc, #176]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008560:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008566:	4b28      	ldr	r3, [pc, #160]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b01      	cmp	r3, #1
 8008570:	d114      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008572:	f7fb fa35 	bl	80039e0 <HAL_GetTick>
 8008576:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008578:	e00a      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857a:	f7fb fa31 	bl	80039e0 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008588:	4293      	cmp	r3, r2
 800858a:	d901      	bls.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e035      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008590:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0ee      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085a8:	d10d      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80085aa:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80085ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085be:	4912      	ldr	r1, [pc, #72]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	608b      	str	r3, [r1, #8]
 80085c4:	e005      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80085c6:	4b10      	ldr	r3, [pc, #64]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085cc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80085d0:	6093      	str	r3, [r2, #8]
 80085d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085de:	490a      	ldr	r1, [pc, #40]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80085f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40007000 	.word	0x40007000
 8008608:	40023800 	.word	0x40023800
 800860c:	42470e40 	.word	0x42470e40
 8008610:	424711e0 	.word	0x424711e0

08008614 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e025      	b.n	8008674 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7f8 ffe3 	bl	8001608 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f001 fef1 	bl	800a43c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	461a      	mov	r2, r3
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	f001 ff46 	bl	800a4f6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800868e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d101      	bne.n	800869a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008696:	2302      	movs	r3, #2
 8008698:	e021      	b.n	80086de <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d002      	beq.n	80086a6 <HAL_SDRAM_SendCommand+0x2a>
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d118      	bne.n	80086d8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 ff86 	bl	800a5c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d104      	bne.n	80086ce <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2205      	movs	r2, #5
 80086c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086cc:	e006      	b.n	80086dc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086d6:	e001      	b.n	80086dc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d101      	bne.n	8008700 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
 80086fe:	e016      	b.n	800872e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d10f      	bne.n	800872c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f001 ff91 	bl	800a642 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	e000      	b.n	800872e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e07b      	b.n	8008840 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d108      	bne.n	8008762 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008758:	d009      	beq.n	800876e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	61da      	str	r2, [r3, #28]
 8008760:	e005      	b.n	800876e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d106      	bne.n	800878e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7f8 fddb 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	431a      	orrs	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f2:	ea42 0103 	orr.w	r1, r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	0c1b      	lsrs	r3, r3, #16
 800880c:	f003 0104 	and.w	r1, r3, #4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	f003 0210 	and.w	r2, r3, #16
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69da      	ldr	r2, [r3, #28]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800882e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e01a      	b.n	8008890 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008870:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7f8 fdae 	bl	80013d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	4613      	mov	r3, r2
 80088a6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088a8:	f7fb f89a 	bl	80039e0 <HAL_GetTick>
 80088ac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d001      	beq.n	80088c2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80088be:	2302      	movs	r3, #2
 80088c0:	e12a      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_SPI_Transmit+0x36>
 80088c8:	88fb      	ldrh	r3, [r7, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e122      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_SPI_Transmit+0x48>
 80088dc:	2302      	movs	r3, #2
 80088de:	e11b      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2203      	movs	r2, #3
 80088ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	88fa      	ldrh	r2, [r7, #6]
 8008900:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	88fa      	ldrh	r2, [r7, #6]
 8008906:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800892e:	d10f      	bne.n	8008950 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800893e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800894e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895a:	2b40      	cmp	r3, #64	@ 0x40
 800895c:	d007      	beq.n	800896e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800896c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008976:	d152      	bne.n	8008a1e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <HAL_SPI_Transmit+0xee>
 8008980:	8b7b      	ldrh	r3, [r7, #26]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d145      	bne.n	8008a12 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898a:	881a      	ldrh	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008996:	1c9a      	adds	r2, r3, #2
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089aa:	e032      	b.n	8008a12 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d112      	bne.n	80089e0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	881a      	ldrh	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	1c9a      	adds	r2, r3, #2
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80089de:	e018      	b.n	8008a12 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089e0:	f7fa fffe 	bl	80039e0 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d803      	bhi.n	80089f8 <HAL_SPI_Transmit+0x160>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d102      	bne.n	80089fe <HAL_SPI_Transmit+0x166>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e082      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1c7      	bne.n	80089ac <HAL_SPI_Transmit+0x114>
 8008a1c:	e053      	b.n	8008ac6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_SPI_Transmit+0x194>
 8008a26:	8b7b      	ldrh	r3, [r7, #26]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d147      	bne.n	8008abc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	7812      	ldrb	r2, [r2, #0]
 8008a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a52:	e033      	b.n	8008abc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d113      	bne.n	8008a8a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008a88:	e018      	b.n	8008abc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a8a:	f7fa ffa9 	bl	80039e0 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d803      	bhi.n	8008aa2 <HAL_SPI_Transmit+0x20a>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa0:	d102      	bne.n	8008aa8 <HAL_SPI_Transmit+0x210>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e02d      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1c6      	bne.n	8008a54 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fbe6 	bl	800929c <SPI_EndRxTxTransaction>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
  }
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d001      	beq.n	8008b40 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e104      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_SPI_Receive+0x2c>
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0fc      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b58:	d112      	bne.n	8008b80 <HAL_SPI_Receive+0x60>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10e      	bne.n	8008b80 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2204      	movs	r2, #4
 8008b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b6a:	88fa      	ldrh	r2, [r7, #6]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f8eb 	bl	8008d52 <HAL_SPI_TransmitReceive>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	e0e4      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b80:	f7fa ff2e 	bl	80039e0 <HAL_GetTick>
 8008b84:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_SPI_Receive+0x74>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e0da      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008be2:	d10f      	bne.n	8008c04 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0e:	2b40      	cmp	r3, #64	@ 0x40
 8008c10:	d007      	beq.n	8008c22 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d170      	bne.n	8008d0c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c2a:	e035      	b.n	8008c98 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d115      	bne.n	8008c66 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f103 020c 	add.w	r2, r3, #12
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	b2d2      	uxtb	r2, r2
 8008c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c64:	e018      	b.n	8008c98 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c66:	f7fa febb 	bl	80039e0 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d803      	bhi.n	8008c7e <HAL_SPI_Receive+0x15e>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d102      	bne.n	8008c84 <HAL_SPI_Receive+0x164>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d109      	bne.n	8008c98 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e058      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1c4      	bne.n	8008c2c <HAL_SPI_Receive+0x10c>
 8008ca2:	e038      	b.n	8008d16 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d113      	bne.n	8008cda <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbc:	b292      	uxth	r2, r2
 8008cbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc4:	1c9a      	adds	r2, r3, #2
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cd8:	e018      	b.n	8008d0c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cda:	f7fa fe81 	bl	80039e0 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d803      	bhi.n	8008cf2 <HAL_SPI_Receive+0x1d2>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d102      	bne.n	8008cf8 <HAL_SPI_Receive+0x1d8>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e01e      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1c6      	bne.n	8008ca4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fa58 	bl	80091d0 <SPI_EndRxTransaction>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008d48:	2300      	movs	r3, #0
  }
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b08a      	sub	sp, #40	@ 0x28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d60:	2301      	movs	r3, #1
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d64:	f7fa fe3c 	bl	80039e0 <HAL_GetTick>
 8008d68:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d70:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008d78:	887b      	ldrh	r3, [r7, #2]
 8008d7a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d7c:	7ffb      	ldrb	r3, [r7, #31]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d00c      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x4a>
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d88:	d106      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x46>
 8008d92:	7ffb      	ldrb	r3, [r7, #31]
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d001      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e17f      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x5c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x5c>
 8008da8:	887b      	ldrh	r3, [r7, #2]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e174      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_SPI_TransmitReceive+0x6e>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e16d      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d003      	beq.n	8008ddc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	887a      	ldrh	r2, [r7, #2]
 8008e04:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1c:	2b40      	cmp	r3, #64	@ 0x40
 8008e1e:	d007      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e38:	d17e      	bne.n	8008f38 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_SPI_TransmitReceive+0xf6>
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d16c      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4c:	881a      	ldrh	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e6c:	e059      	b.n	8008f22 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d11b      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x162>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d016      	beq.n	8008eb4 <HAL_SPI_TransmitReceive+0x162>
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d113      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e90:	881a      	ldrh	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d119      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0x1a4>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ede:	1c9a      	adds	r2, r3, #2
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ef6:	f7fa fd73 	bl	80039e0 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d80d      	bhi.n	8008f22 <HAL_SPI_TransmitReceive+0x1d0>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d009      	beq.n	8008f22 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e0bc      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1a0      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x11c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d19b      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x11c>
 8008f36:	e082      	b.n	800903e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x1f4>
 8008f40:	8afb      	ldrh	r3, [r7, #22]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d171      	bne.n	800902a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6c:	e05d      	b.n	800902a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d11c      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x264>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d017      	beq.n	8008fb6 <HAL_SPI_TransmitReceive+0x264>
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d114      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d119      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x2a6>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d014      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	b2d2      	uxtb	r2, r2
 8008fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ff8:	f7fa fcf2 	bl	80039e0 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009004:	429a      	cmp	r2, r3
 8009006:	d803      	bhi.n	8009010 <HAL_SPI_TransmitReceive+0x2be>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900e:	d102      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x2c4>
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e038      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d19c      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009038:	b29b      	uxth	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d197      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f92a 	bl	800929c <SPI_EndRxTxTransaction>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d008      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2220      	movs	r2, #32
 8009052:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e01d      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009068:	2300      	movs	r3, #0
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	613b      	str	r3, [r7, #16]
 800907c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800909a:	2300      	movs	r3, #0
  }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	@ 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80090b2:	b2db      	uxtb	r3, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	4613      	mov	r3, r2
 80090ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090d0:	f7fa fc86 	bl	80039e0 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4413      	add	r3, r2
 80090de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090e0:	f7fa fc7e 	bl	80039e0 <HAL_GetTick>
 80090e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090e6:	4b39      	ldr	r3, [pc, #228]	@ (80091cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	015b      	lsls	r3, r3, #5
 80090ec:	0d1b      	lsrs	r3, r3, #20
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090f6:	e055      	b.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d051      	beq.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009100:	f7fa fc6e 	bl	80039e0 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	429a      	cmp	r2, r3
 800910e:	d902      	bls.n	8009116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d13d      	bne.n	8009192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800912e:	d111      	bne.n	8009154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009138:	d004      	beq.n	8009144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009142:	d107      	bne.n	8009154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800915c:	d10f      	bne.n	800917e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800917c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e018      	b.n	80091c4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	e002      	b.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	4013      	ands	r3, r2
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d19a      	bne.n	80090f8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000004 	.word	0x20000004

080091d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af02      	add	r7, sp, #8
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091e4:	d111      	bne.n	800920a <SPI_EndRxTransaction+0x3a>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091ee:	d004      	beq.n	80091fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091f8:	d107      	bne.n	800920a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009208:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009212:	d12a      	bne.n	800926a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921c:	d012      	beq.n	8009244 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	2180      	movs	r1, #128	@ 0x80
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7ff ff49 	bl	80090c0 <SPI_WaitFlagStateUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d02d      	beq.n	8009290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e026      	b.n	8009292 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	2101      	movs	r1, #1
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7ff ff36 	bl	80090c0 <SPI_WaitFlagStateUntilTimeout>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01a      	beq.n	8009290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800925e:	f043 0220 	orr.w	r2, r3, #32
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e013      	b.n	8009292 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2200      	movs	r2, #0
 8009272:	2101      	movs	r1, #1
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff ff23 	bl	80090c0 <SPI_WaitFlagStateUntilTimeout>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009284:	f043 0220 	orr.w	r2, r3, #32
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e000      	b.n	8009292 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2201      	movs	r2, #1
 80092b0:	2102      	movs	r1, #2
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f7ff ff04 	bl	80090c0 <SPI_WaitFlagStateUntilTimeout>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d007      	beq.n	80092ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c2:	f043 0220 	orr.w	r2, r3, #32
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e032      	b.n	8009334 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092ce:	4b1b      	ldr	r3, [pc, #108]	@ (800933c <SPI_EndRxTxTransaction+0xa0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009340 <SPI_EndRxTxTransaction+0xa4>)
 80092d4:	fba2 2303 	umull	r2, r3, r2, r3
 80092d8:	0d5b      	lsrs	r3, r3, #21
 80092da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092ec:	d112      	bne.n	8009314 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2200      	movs	r2, #0
 80092f6:	2180      	movs	r1, #128	@ 0x80
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fee1 	bl	80090c0 <SPI_WaitFlagStateUntilTimeout>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d016      	beq.n	8009332 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	f043 0220 	orr.w	r2, r3, #32
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e00f      	b.n	8009334 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	3b01      	subs	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800932a:	2b80      	cmp	r3, #128	@ 0x80
 800932c:	d0f2      	beq.n	8009314 <SPI_EndRxTxTransaction+0x78>
 800932e:	e000      	b.n	8009332 <SPI_EndRxTxTransaction+0x96>
        break;
 8009330:	bf00      	nop
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000004 	.word	0x20000004
 8009340:	165e9f81 	.word	0x165e9f81

08009344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e041      	b.n	80093da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7f8 f850 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fa7e 	bl	8009884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d001      	beq.n	80093fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e04e      	b.n	800949a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0201 	orr.w	r2, r2, #1
 8009412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a23      	ldr	r2, [pc, #140]	@ (80094a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d022      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009426:	d01d      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a1f      	ldr	r2, [pc, #124]	@ (80094ac <HAL_TIM_Base_Start_IT+0xc8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d018      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1e      	ldr	r2, [pc, #120]	@ (80094b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d013      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1c      	ldr	r2, [pc, #112]	@ (80094b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00e      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1b      	ldr	r2, [pc, #108]	@ (80094b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d009      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a19      	ldr	r2, [pc, #100]	@ (80094bc <HAL_TIM_Base_Start_IT+0xd8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d004      	beq.n	8009464 <HAL_TIM_Base_Start_IT+0x80>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d111      	bne.n	8009488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b06      	cmp	r3, #6
 8009474:	d010      	beq.n	8009498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0201 	orr.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009486:	e007      	b.n	8009498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40010400 	.word	0x40010400
 80094bc:	40014000 	.word	0x40014000
 80094c0:	40001800 	.word	0x40001800

080094c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d020      	beq.n	8009528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01b      	beq.n	8009528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0202 	mvn.w	r2, #2
 80094f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f999 	bl	8009846 <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f98b 	bl	8009832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f99c 	bl	800985a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	d020      	beq.n	8009574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01b      	beq.n	8009574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0204 	mvn.w	r2, #4
 8009544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f973 	bl	8009846 <HAL_TIM_IC_CaptureCallback>
 8009560:	e005      	b.n	800956e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f965 	bl	8009832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f976 	bl	800985a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 0308 	and.w	r3, r3, #8
 800957a:	2b00      	cmp	r3, #0
 800957c:	d020      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01b      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0208 	mvn.w	r2, #8
 8009590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2204      	movs	r2, #4
 8009596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f94d 	bl	8009846 <HAL_TIM_IC_CaptureCallback>
 80095ac:	e005      	b.n	80095ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f93f 	bl	8009832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f950 	bl	800985a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f003 0310 	and.w	r3, r3, #16
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d020      	beq.n	800960c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0310 	and.w	r3, r3, #16
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0210 	mvn.w	r2, #16
 80095dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2208      	movs	r2, #8
 80095e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f927 	bl	8009846 <HAL_TIM_IC_CaptureCallback>
 80095f8:	e005      	b.n	8009606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f919 	bl	8009832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f92a 	bl	800985a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00c      	beq.n	8009630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0201 	mvn.w	r2, #1
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7f7 fc62 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00c      	beq.n	8009654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009640:	2b00      	cmp	r3, #0
 8009642:	d007      	beq.n	8009654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800964c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fade 	bl	8009c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00c      	beq.n	8009678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8fb 	bl	800986e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00c      	beq.n	800969c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0220 	mvn.w	r2, #32
 8009694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fab0 	bl	8009bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d101      	bne.n	80096c0 <HAL_TIM_ConfigClockSource+0x1c>
 80096bc:	2302      	movs	r3, #2
 80096be:	e0b4      	b.n	800982a <HAL_TIM_ConfigClockSource+0x186>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80096de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f8:	d03e      	beq.n	8009778 <HAL_TIM_ConfigClockSource+0xd4>
 80096fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096fe:	f200 8087 	bhi.w	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009706:	f000 8086 	beq.w	8009816 <HAL_TIM_ConfigClockSource+0x172>
 800970a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800970e:	d87f      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b70      	cmp	r3, #112	@ 0x70
 8009712:	d01a      	beq.n	800974a <HAL_TIM_ConfigClockSource+0xa6>
 8009714:	2b70      	cmp	r3, #112	@ 0x70
 8009716:	d87b      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009718:	2b60      	cmp	r3, #96	@ 0x60
 800971a:	d050      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x11a>
 800971c:	2b60      	cmp	r3, #96	@ 0x60
 800971e:	d877      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009720:	2b50      	cmp	r3, #80	@ 0x50
 8009722:	d03c      	beq.n	800979e <HAL_TIM_ConfigClockSource+0xfa>
 8009724:	2b50      	cmp	r3, #80	@ 0x50
 8009726:	d873      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009728:	2b40      	cmp	r3, #64	@ 0x40
 800972a:	d058      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x13a>
 800972c:	2b40      	cmp	r3, #64	@ 0x40
 800972e:	d86f      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009730:	2b30      	cmp	r3, #48	@ 0x30
 8009732:	d064      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009734:	2b30      	cmp	r3, #48	@ 0x30
 8009736:	d86b      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009738:	2b20      	cmp	r3, #32
 800973a:	d060      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 800973c:	2b20      	cmp	r3, #32
 800973e:	d867      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d05c      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009744:	2b10      	cmp	r3, #16
 8009746:	d05a      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009748:	e062      	b.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800975a:	f000 f9b3 	bl	8009ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800976c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	609a      	str	r2, [r3, #8]
      break;
 8009776:	e04f      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009788:	f000 f99c 	bl	8009ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689a      	ldr	r2, [r3, #8]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800979a:	609a      	str	r2, [r3, #8]
      break;
 800979c:	e03c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097aa:	461a      	mov	r2, r3
 80097ac:	f000 f910 	bl	80099d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2150      	movs	r1, #80	@ 0x50
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f969 	bl	8009a8e <TIM_ITRx_SetConfig>
      break;
 80097bc:	e02c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ca:	461a      	mov	r2, r3
 80097cc:	f000 f92f 	bl	8009a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2160      	movs	r1, #96	@ 0x60
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f959 	bl	8009a8e <TIM_ITRx_SetConfig>
      break;
 80097dc:	e01c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ea:	461a      	mov	r2, r3
 80097ec:	f000 f8f0 	bl	80099d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2140      	movs	r1, #64	@ 0x40
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 f949 	bl	8009a8e <TIM_ITRx_SetConfig>
      break;
 80097fc:	e00c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f000 f940 	bl	8009a8e <TIM_ITRx_SetConfig>
      break;
 800980e:	e003      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
      break;
 8009814:	e000      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
	...

08009884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a43      	ldr	r2, [pc, #268]	@ (80099a4 <TIM_Base_SetConfig+0x120>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <TIM_Base_SetConfig+0x40>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a2:	d00f      	beq.n	80098c4 <TIM_Base_SetConfig+0x40>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a40      	ldr	r2, [pc, #256]	@ (80099a8 <TIM_Base_SetConfig+0x124>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00b      	beq.n	80098c4 <TIM_Base_SetConfig+0x40>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a3f      	ldr	r2, [pc, #252]	@ (80099ac <TIM_Base_SetConfig+0x128>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d007      	beq.n	80098c4 <TIM_Base_SetConfig+0x40>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a3e      	ldr	r2, [pc, #248]	@ (80099b0 <TIM_Base_SetConfig+0x12c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_Base_SetConfig+0x40>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a3d      	ldr	r2, [pc, #244]	@ (80099b4 <TIM_Base_SetConfig+0x130>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d108      	bne.n	80098d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a32      	ldr	r2, [pc, #200]	@ (80099a4 <TIM_Base_SetConfig+0x120>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d02b      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098e4:	d027      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a2f      	ldr	r2, [pc, #188]	@ (80099a8 <TIM_Base_SetConfig+0x124>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d023      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a2e      	ldr	r2, [pc, #184]	@ (80099ac <TIM_Base_SetConfig+0x128>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d01f      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a2d      	ldr	r2, [pc, #180]	@ (80099b0 <TIM_Base_SetConfig+0x12c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d01b      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a2c      	ldr	r2, [pc, #176]	@ (80099b4 <TIM_Base_SetConfig+0x130>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d017      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a2b      	ldr	r2, [pc, #172]	@ (80099b8 <TIM_Base_SetConfig+0x134>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d013      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a2a      	ldr	r2, [pc, #168]	@ (80099bc <TIM_Base_SetConfig+0x138>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00f      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a29      	ldr	r2, [pc, #164]	@ (80099c0 <TIM_Base_SetConfig+0x13c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00b      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a28      	ldr	r2, [pc, #160]	@ (80099c4 <TIM_Base_SetConfig+0x140>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d007      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a27      	ldr	r2, [pc, #156]	@ (80099c8 <TIM_Base_SetConfig+0x144>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d003      	beq.n	8009936 <TIM_Base_SetConfig+0xb2>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a26      	ldr	r2, [pc, #152]	@ (80099cc <TIM_Base_SetConfig+0x148>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d108      	bne.n	8009948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800993c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689a      	ldr	r2, [r3, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a0e      	ldr	r2, [pc, #56]	@ (80099a4 <TIM_Base_SetConfig+0x120>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d003      	beq.n	8009976 <TIM_Base_SetConfig+0xf2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a10      	ldr	r2, [pc, #64]	@ (80099b4 <TIM_Base_SetConfig+0x130>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d103      	bne.n	800997e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f043 0204 	orr.w	r2, r3, #4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	601a      	str	r2, [r3, #0]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800
 80099c4:	40001800 	.word	0x40001800
 80099c8:	40001c00 	.word	0x40001c00
 80099cc:	40002000 	.word	0x40002000

080099d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f023 0201 	bic.w	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f023 030a 	bic.w	r3, r3, #10
 8009a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	621a      	str	r2, [r3, #32]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	f023 0210 	bic.w	r2, r3, #16
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	031b      	lsls	r3, r3, #12
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	621a      	str	r2, [r3, #32]
}
 8009a82:	bf00      	nop
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b085      	sub	sp, #20
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f043 0307 	orr.w	r3, r3, #7
 8009ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	609a      	str	r2, [r3, #8]
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	021a      	lsls	r2, r3, #8
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	609a      	str	r2, [r3, #8]
}
 8009af8:	bf00      	nop
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d101      	bne.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e05a      	b.n	8009bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a21      	ldr	r2, [pc, #132]	@ (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d022      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b68:	d01d      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d018      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1b      	ldr	r2, [pc, #108]	@ (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d013      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1a      	ldr	r2, [pc, #104]	@ (8009bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00e      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a18      	ldr	r2, [pc, #96]	@ (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d009      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a17      	ldr	r2, [pc, #92]	@ (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d004      	beq.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a15      	ldr	r2, [pc, #84]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d10c      	bne.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40010400 	.word	0x40010400
 8009bf4:	40014000 	.word	0x40014000
 8009bf8:	40001800 	.word	0x40001800

08009bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e042      	b.n	8009cbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7f7 fc02 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2224      	movs	r2, #36	@ 0x24
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68da      	ldr	r2, [r3, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f973 	bl	8009f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691a      	ldr	r2, [r3, #16]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695a      	ldr	r2, [r3, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08a      	sub	sp, #40	@ 0x28
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d175      	bne.n	8009dd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <HAL_UART_Transmit+0x2c>
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e06e      	b.n	8009dd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2221      	movs	r2, #33	@ 0x21
 8009cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d02:	f7f9 fe6d 	bl	80039e0 <HAL_GetTick>
 8009d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	88fa      	ldrh	r2, [r7, #6]
 8009d12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d1c:	d108      	bne.n	8009d30 <HAL_UART_Transmit+0x6c>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d104      	bne.n	8009d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e003      	b.n	8009d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d38:	e02e      	b.n	8009d98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2200      	movs	r2, #0
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 f848 	bl	8009dda <UART_WaitOnFlagUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e03a      	b.n	8009dd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10b      	bne.n	8009d7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	3302      	adds	r3, #2
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	e007      	b.n	8009d8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	3301      	adds	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1cb      	bne.n	8009d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2200      	movs	r2, #0
 8009daa:	2140      	movs	r1, #64	@ 0x40
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f814 	bl	8009dda <UART_WaitOnFlagUntilTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d005      	beq.n	8009dc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e006      	b.n	8009dd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e000      	b.n	8009dd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009dd0:	2302      	movs	r3, #2
  }
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b086      	sub	sp, #24
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dea:	e03b      	b.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df2:	d037      	beq.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009df4:	f7f9 fdf4 	bl	80039e0 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	6a3a      	ldr	r2, [r7, #32]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d302      	bcc.n	8009e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e03a      	b.n	8009e84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d023      	beq.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b80      	cmp	r3, #128	@ 0x80
 8009e20:	d020      	beq.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b40      	cmp	r3, #64	@ 0x40
 8009e26:	d01d      	beq.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d116      	bne.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 f81d 	bl	8009e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2208      	movs	r2, #8
 8009e56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e00f      	b.n	8009e84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	bf0c      	ite	eq
 8009e74:	2301      	moveq	r3, #1
 8009e76:	2300      	movne	r3, #0
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d0b4      	beq.n	8009dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b095      	sub	sp, #84	@ 0x54
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e5      	bne.n	8009e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3314      	adds	r3, #20
 8009ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	e853 3f00 	ldrex	r3, [r3]
 8009ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	f023 0301 	bic.w	r3, r3, #1
 8009ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3314      	adds	r3, #20
 8009ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef0:	e841 2300 	strex	r3, r2, [r1]
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1e5      	bne.n	8009ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d119      	bne.n	8009f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	330c      	adds	r3, #12
 8009f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	330c      	adds	r3, #12
 8009f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f24:	61ba      	str	r2, [r7, #24]
 8009f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6979      	ldr	r1, [r7, #20]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	613b      	str	r3, [r7, #16]
   return(result);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e5      	bne.n	8009f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f46:	bf00      	nop
 8009f48:	3754      	adds	r7, #84	@ 0x54
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
	...

08009f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f58:	b0c0      	sub	sp, #256	@ 0x100
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f70:	68d9      	ldr	r1, [r3, #12]
 8009f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	ea40 0301 	orr.w	r3, r0, r1
 8009f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	431a      	orrs	r2, r3
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009fac:	f021 010c 	bic.w	r1, r1, #12
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fce:	6999      	ldr	r1, [r3, #24]
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	ea40 0301 	orr.w	r3, r0, r1
 8009fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4b8f      	ldr	r3, [pc, #572]	@ (800a220 <UART_SetConfig+0x2cc>)
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d005      	beq.n	8009ff4 <UART_SetConfig+0xa0>
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b8d      	ldr	r3, [pc, #564]	@ (800a224 <UART_SetConfig+0x2d0>)
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d104      	bne.n	8009ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ff4:	f7fe f908 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 8009ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ffc:	e003      	b.n	800a006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ffe:	f7fe f8ef 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800a002:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a010:	f040 810c 	bne.w	800a22c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a01e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	1891      	adds	r1, r2, r2
 800a02c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a02e:	415b      	adcs	r3, r3
 800a030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a036:	4621      	mov	r1, r4
 800a038:	eb12 0801 	adds.w	r8, r2, r1
 800a03c:	4629      	mov	r1, r5
 800a03e:	eb43 0901 	adc.w	r9, r3, r1
 800a042:	f04f 0200 	mov.w	r2, #0
 800a046:	f04f 0300 	mov.w	r3, #0
 800a04a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a04e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a056:	4690      	mov	r8, r2
 800a058:	4699      	mov	r9, r3
 800a05a:	4623      	mov	r3, r4
 800a05c:	eb18 0303 	adds.w	r3, r8, r3
 800a060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a064:	462b      	mov	r3, r5
 800a066:	eb49 0303 	adc.w	r3, r9, r3
 800a06a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a07a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a07e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a082:	460b      	mov	r3, r1
 800a084:	18db      	adds	r3, r3, r3
 800a086:	653b      	str	r3, [r7, #80]	@ 0x50
 800a088:	4613      	mov	r3, r2
 800a08a:	eb42 0303 	adc.w	r3, r2, r3
 800a08e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a098:	f7f6 f902 	bl	80002a0 <__aeabi_uldivmod>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4b61      	ldr	r3, [pc, #388]	@ (800a228 <UART_SetConfig+0x2d4>)
 800a0a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	011c      	lsls	r4, r3, #4
 800a0aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a0b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a0bc:	4642      	mov	r2, r8
 800a0be:	464b      	mov	r3, r9
 800a0c0:	1891      	adds	r1, r2, r2
 800a0c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a0c4:	415b      	adcs	r3, r3
 800a0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a0cc:	4641      	mov	r1, r8
 800a0ce:	eb12 0a01 	adds.w	sl, r2, r1
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	eb43 0b01 	adc.w	fp, r3, r1
 800a0d8:	f04f 0200 	mov.w	r2, #0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0ec:	4692      	mov	sl, r2
 800a0ee:	469b      	mov	fp, r3
 800a0f0:	4643      	mov	r3, r8
 800a0f2:	eb1a 0303 	adds.w	r3, sl, r3
 800a0f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	eb4b 0303 	adc.w	r3, fp, r3
 800a100:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a110:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a118:	460b      	mov	r3, r1
 800a11a:	18db      	adds	r3, r3, r3
 800a11c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a11e:	4613      	mov	r3, r2
 800a120:	eb42 0303 	adc.w	r3, r2, r3
 800a124:	647b      	str	r3, [r7, #68]	@ 0x44
 800a126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a12a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a12e:	f7f6 f8b7 	bl	80002a0 <__aeabi_uldivmod>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4611      	mov	r1, r2
 800a138:	4b3b      	ldr	r3, [pc, #236]	@ (800a228 <UART_SetConfig+0x2d4>)
 800a13a:	fba3 2301 	umull	r2, r3, r3, r1
 800a13e:	095b      	lsrs	r3, r3, #5
 800a140:	2264      	movs	r2, #100	@ 0x64
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	1acb      	subs	r3, r1, r3
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a14e:	4b36      	ldr	r3, [pc, #216]	@ (800a228 <UART_SetConfig+0x2d4>)
 800a150:	fba3 2302 	umull	r2, r3, r3, r2
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a15c:	441c      	add	r4, r3
 800a15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a162:	2200      	movs	r2, #0
 800a164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a168:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a16c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	1891      	adds	r1, r2, r2
 800a176:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a178:	415b      	adcs	r3, r3
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a17c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a180:	4641      	mov	r1, r8
 800a182:	1851      	adds	r1, r2, r1
 800a184:	6339      	str	r1, [r7, #48]	@ 0x30
 800a186:	4649      	mov	r1, r9
 800a188:	414b      	adcs	r3, r1
 800a18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18c:	f04f 0200 	mov.w	r2, #0
 800a190:	f04f 0300 	mov.w	r3, #0
 800a194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a198:	4659      	mov	r1, fp
 800a19a:	00cb      	lsls	r3, r1, #3
 800a19c:	4651      	mov	r1, sl
 800a19e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1a2:	4651      	mov	r1, sl
 800a1a4:	00ca      	lsls	r2, r1, #3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	189b      	adds	r3, r3, r2
 800a1b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	460a      	mov	r2, r1
 800a1b8:	eb42 0303 	adc.w	r3, r2, r3
 800a1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a1cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a1d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	18db      	adds	r3, r3, r3
 800a1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1da:	4613      	mov	r3, r2
 800a1dc:	eb42 0303 	adc.w	r3, r2, r3
 800a1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a1e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a1ea:	f7f6 f859 	bl	80002a0 <__aeabi_uldivmod>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <UART_SetConfig+0x2d4>)
 800a1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1f8:	095b      	lsrs	r3, r3, #5
 800a1fa:	2164      	movs	r1, #100	@ 0x64
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	3332      	adds	r3, #50	@ 0x32
 800a206:	4a08      	ldr	r2, [pc, #32]	@ (800a228 <UART_SetConfig+0x2d4>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	f003 0207 	and.w	r2, r3, #7
 800a212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4422      	add	r2, r4
 800a21a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a21c:	e106      	b.n	800a42c <UART_SetConfig+0x4d8>
 800a21e:	bf00      	nop
 800a220:	40011000 	.word	0x40011000
 800a224:	40011400 	.word	0x40011400
 800a228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a22c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a230:	2200      	movs	r2, #0
 800a232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a236:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a23a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	1891      	adds	r1, r2, r2
 800a244:	6239      	str	r1, [r7, #32]
 800a246:	415b      	adcs	r3, r3
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24
 800a24a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a24e:	4641      	mov	r1, r8
 800a250:	1854      	adds	r4, r2, r1
 800a252:	4649      	mov	r1, r9
 800a254:	eb43 0501 	adc.w	r5, r3, r1
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	00eb      	lsls	r3, r5, #3
 800a262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a266:	00e2      	lsls	r2, r4, #3
 800a268:	4614      	mov	r4, r2
 800a26a:	461d      	mov	r5, r3
 800a26c:	4643      	mov	r3, r8
 800a26e:	18e3      	adds	r3, r4, r3
 800a270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a274:	464b      	mov	r3, r9
 800a276:	eb45 0303 	adc.w	r3, r5, r3
 800a27a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a28a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	f04f 0300 	mov.w	r3, #0
 800a296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a29a:	4629      	mov	r1, r5
 800a29c:	008b      	lsls	r3, r1, #2
 800a29e:	4621      	mov	r1, r4
 800a2a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	008a      	lsls	r2, r1, #2
 800a2a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2ac:	f7f5 fff8 	bl	80002a0 <__aeabi_uldivmod>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4b60      	ldr	r3, [pc, #384]	@ (800a438 <UART_SetConfig+0x4e4>)
 800a2b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	011c      	lsls	r4, r3, #4
 800a2be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a2cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	1891      	adds	r1, r2, r2
 800a2d6:	61b9      	str	r1, [r7, #24]
 800a2d8:	415b      	adcs	r3, r3
 800a2da:	61fb      	str	r3, [r7, #28]
 800a2dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	1851      	adds	r1, r2, r1
 800a2e4:	6139      	str	r1, [r7, #16]
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	414b      	adcs	r3, r1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2f8:	4659      	mov	r1, fp
 800a2fa:	00cb      	lsls	r3, r1, #3
 800a2fc:	4651      	mov	r1, sl
 800a2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a302:	4651      	mov	r1, sl
 800a304:	00ca      	lsls	r2, r1, #3
 800a306:	4610      	mov	r0, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	4642      	mov	r2, r8
 800a30e:	189b      	adds	r3, r3, r2
 800a310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a314:	464b      	mov	r3, r9
 800a316:	460a      	mov	r2, r1
 800a318:	eb42 0303 	adc.w	r3, r2, r3
 800a31c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a32a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a338:	4649      	mov	r1, r9
 800a33a:	008b      	lsls	r3, r1, #2
 800a33c:	4641      	mov	r1, r8
 800a33e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a342:	4641      	mov	r1, r8
 800a344:	008a      	lsls	r2, r1, #2
 800a346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a34a:	f7f5 ffa9 	bl	80002a0 <__aeabi_uldivmod>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4611      	mov	r1, r2
 800a354:	4b38      	ldr	r3, [pc, #224]	@ (800a438 <UART_SetConfig+0x4e4>)
 800a356:	fba3 2301 	umull	r2, r3, r3, r1
 800a35a:	095b      	lsrs	r3, r3, #5
 800a35c:	2264      	movs	r2, #100	@ 0x64
 800a35e:	fb02 f303 	mul.w	r3, r2, r3
 800a362:	1acb      	subs	r3, r1, r3
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	3332      	adds	r3, #50	@ 0x32
 800a368:	4a33      	ldr	r2, [pc, #204]	@ (800a438 <UART_SetConfig+0x4e4>)
 800a36a:	fba2 2303 	umull	r2, r3, r2, r3
 800a36e:	095b      	lsrs	r3, r3, #5
 800a370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a374:	441c      	add	r4, r3
 800a376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a37a:	2200      	movs	r2, #0
 800a37c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a37e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a380:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a384:	4642      	mov	r2, r8
 800a386:	464b      	mov	r3, r9
 800a388:	1891      	adds	r1, r2, r2
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	415b      	adcs	r3, r3
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a394:	4641      	mov	r1, r8
 800a396:	1851      	adds	r1, r2, r1
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	4649      	mov	r1, r9
 800a39c:	414b      	adcs	r3, r1
 800a39e:	607b      	str	r3, [r7, #4]
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	00cb      	lsls	r3, r1, #3
 800a3b0:	4651      	mov	r1, sl
 800a3b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3b6:	4651      	mov	r1, sl
 800a3b8:	00ca      	lsls	r2, r1, #3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	460a      	mov	r2, r1
 800a3ca:	eb42 0303 	adc.w	r3, r2, r3
 800a3ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3da:	667a      	str	r2, [r7, #100]	@ 0x64
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	008b      	lsls	r3, r1, #2
 800a3ec:	4641      	mov	r1, r8
 800a3ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	008a      	lsls	r2, r1, #2
 800a3f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a3fa:	f7f5 ff51 	bl	80002a0 <__aeabi_uldivmod>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4b0d      	ldr	r3, [pc, #52]	@ (800a438 <UART_SetConfig+0x4e4>)
 800a404:	fba3 1302 	umull	r1, r3, r3, r2
 800a408:	095b      	lsrs	r3, r3, #5
 800a40a:	2164      	movs	r1, #100	@ 0x64
 800a40c:	fb01 f303 	mul.w	r3, r1, r3
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	3332      	adds	r3, #50	@ 0x32
 800a416:	4a08      	ldr	r2, [pc, #32]	@ (800a438 <UART_SetConfig+0x4e4>)
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	095b      	lsrs	r3, r3, #5
 800a41e:	f003 020f 	and.w	r2, r3, #15
 800a422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4422      	add	r2, r4
 800a42a:	609a      	str	r2, [r3, #8]
}
 800a42c:	bf00      	nop
 800a42e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a432:	46bd      	mov	sp, r7
 800a434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a438:	51eb851f 	.word	0x51eb851f

0800a43c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d123      	bne.n	800a496 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a456:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	6851      	ldr	r1, [r2, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	6892      	ldr	r2, [r2, #8]
 800a462:	4311      	orrs	r1, r2
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	68d2      	ldr	r2, [r2, #12]
 800a468:	4311      	orrs	r1, r2
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	6912      	ldr	r2, [r2, #16]
 800a46e:	4311      	orrs	r1, r2
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	6952      	ldr	r2, [r2, #20]
 800a474:	4311      	orrs	r1, r2
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	6992      	ldr	r2, [r2, #24]
 800a47a:	4311      	orrs	r1, r2
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	69d2      	ldr	r2, [r2, #28]
 800a480:	4311      	orrs	r1, r2
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	6a12      	ldr	r2, [r2, #32]
 800a486:	4311      	orrs	r1, r2
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a48c:	430a      	orrs	r2, r1
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e028      	b.n	800a4e8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	69d9      	ldr	r1, [r3, #28]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	4319      	orrs	r1, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a4bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	6851      	ldr	r1, [r2, #4]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6892      	ldr	r2, [r2, #8]
 800a4c8:	4311      	orrs	r1, r2
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	68d2      	ldr	r2, [r2, #12]
 800a4ce:	4311      	orrs	r1, r2
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	6912      	ldr	r2, [r2, #16]
 800a4d4:	4311      	orrs	r1, r2
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	6952      	ldr	r2, [r2, #20]
 800a4da:	4311      	orrs	r1, r2
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	6992      	ldr	r2, [r2, #24]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d128      	bne.n	800a55a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	1e59      	subs	r1, r3, #1
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	4319      	orrs	r1, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	3b01      	subs	r3, #1
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	4319      	orrs	r1, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	3b01      	subs	r3, #1
 800a530:	031b      	lsls	r3, r3, #12
 800a532:	4319      	orrs	r1, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	3b01      	subs	r3, #1
 800a53a:	041b      	lsls	r3, r3, #16
 800a53c:	4319      	orrs	r1, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	3b01      	subs	r3, #1
 800a544:	051b      	lsls	r3, r3, #20
 800a546:	4319      	orrs	r1, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	061b      	lsls	r3, r3, #24
 800a550:	430b      	orrs	r3, r1
 800a552:	431a      	orrs	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	609a      	str	r2, [r3, #8]
 800a558:	e02f      	b.n	800a5ba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	68d2      	ldr	r2, [r2, #12]
 800a56a:	3a01      	subs	r2, #1
 800a56c:	0311      	lsls	r1, r2, #12
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	6952      	ldr	r2, [r2, #20]
 800a572:	3a01      	subs	r2, #1
 800a574:	0512      	lsls	r2, r2, #20
 800a576:	430a      	orrs	r2, r1
 800a578:	431a      	orrs	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	1e59      	subs	r1, r3, #1
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	3b01      	subs	r3, #1
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	4319      	orrs	r1, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	4319      	orrs	r1, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	4319      	orrs	r1, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	061b      	lsls	r3, r3, #24
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	0d9b      	lsrs	r3, r3, #22
 800a5de:	059b      	lsls	r3, r3, #22
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	6811      	ldr	r1, [r2, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	6852      	ldr	r2, [r2, #4]
 800a5e8:	4311      	orrs	r1, r2
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	6892      	ldr	r2, [r2, #8]
 800a5ee:	3a01      	subs	r2, #1
 800a5f0:	0152      	lsls	r2, r2, #5
 800a5f2:	4311      	orrs	r1, r2
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	68d2      	ldr	r2, [r2, #12]
 800a5f8:	0252      	lsls	r2, r2, #9
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a602:	f7f9 f9ed 	bl	80039e0 <HAL_GetTick>
 800a606:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a608:	e010      	b.n	800a62c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a610:	d00c      	beq.n	800a62c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d007      	beq.n	800a628 <FMC_SDRAM_SendCommand+0x60>
 800a618:	f7f9 f9e2 	bl	80039e0 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	429a      	cmp	r2, r3
 800a626:	d201      	bcs.n	800a62c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e006      	b.n	800a63a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b20      	cmp	r3, #32
 800a636:	d0e8      	beq.n	800a60a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a654:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	0052      	lsls	r2, r2, #1
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a670:	b084      	sub	sp, #16
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	f107 001c 	add.w	r0, r7, #28
 800a67e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a682:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a686:	2b01      	cmp	r3, #1
 800a688:	d123      	bne.n	800a6d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a69e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a6b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d105      	bne.n	800a6c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fae8 	bl	800bc9c <USB_CoreReset>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
 800a6d0:	e01b      	b.n	800a70a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f001 fadc 	bl	800bc9c <USB_CoreReset>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a6e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	639a      	str	r2, [r3, #56]	@ 0x38
 800a6fc:	e005      	b.n	800a70a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a702:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a70a:	7fbb      	ldrb	r3, [r7, #30]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10b      	bne.n	800a728 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f043 0206 	orr.w	r2, r3, #6
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f043 0220 	orr.w	r2, r3, #32
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a734:	b004      	add	sp, #16
 800a736:	4770      	bx	lr

0800a738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d165      	bne.n	800a818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a41      	ldr	r2, [pc, #260]	@ (800a854 <USB_SetTurnaroundTime+0x11c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <USB_SetTurnaroundTime+0x2a>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a40      	ldr	r2, [pc, #256]	@ (800a858 <USB_SetTurnaroundTime+0x120>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d202      	bcs.n	800a762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a75c:	230f      	movs	r3, #15
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e062      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a3c      	ldr	r2, [pc, #240]	@ (800a858 <USB_SetTurnaroundTime+0x120>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d306      	bcc.n	800a778 <USB_SetTurnaroundTime+0x40>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4a3b      	ldr	r2, [pc, #236]	@ (800a85c <USB_SetTurnaroundTime+0x124>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d202      	bcs.n	800a778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a772:	230e      	movs	r3, #14
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e057      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a38      	ldr	r2, [pc, #224]	@ (800a85c <USB_SetTurnaroundTime+0x124>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d306      	bcc.n	800a78e <USB_SetTurnaroundTime+0x56>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4a37      	ldr	r2, [pc, #220]	@ (800a860 <USB_SetTurnaroundTime+0x128>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d202      	bcs.n	800a78e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a788:	230d      	movs	r3, #13
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e04c      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	4a33      	ldr	r2, [pc, #204]	@ (800a860 <USB_SetTurnaroundTime+0x128>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d306      	bcc.n	800a7a4 <USB_SetTurnaroundTime+0x6c>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	4a32      	ldr	r2, [pc, #200]	@ (800a864 <USB_SetTurnaroundTime+0x12c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d802      	bhi.n	800a7a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a79e:	230c      	movs	r3, #12
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	e041      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a864 <USB_SetTurnaroundTime+0x12c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d906      	bls.n	800a7ba <USB_SetTurnaroundTime+0x82>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800a868 <USB_SetTurnaroundTime+0x130>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d802      	bhi.n	800a7ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a7b4:	230b      	movs	r3, #11
 800a7b6:	617b      	str	r3, [r7, #20]
 800a7b8:	e036      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4a2a      	ldr	r2, [pc, #168]	@ (800a868 <USB_SetTurnaroundTime+0x130>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d906      	bls.n	800a7d0 <USB_SetTurnaroundTime+0x98>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4a29      	ldr	r2, [pc, #164]	@ (800a86c <USB_SetTurnaroundTime+0x134>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d802      	bhi.n	800a7d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a7ca:	230a      	movs	r3, #10
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	e02b      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4a26      	ldr	r2, [pc, #152]	@ (800a86c <USB_SetTurnaroundTime+0x134>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d906      	bls.n	800a7e6 <USB_SetTurnaroundTime+0xae>
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	4a25      	ldr	r2, [pc, #148]	@ (800a870 <USB_SetTurnaroundTime+0x138>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d202      	bcs.n	800a7e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a7e0:	2309      	movs	r3, #9
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e020      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	4a21      	ldr	r2, [pc, #132]	@ (800a870 <USB_SetTurnaroundTime+0x138>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d306      	bcc.n	800a7fc <USB_SetTurnaroundTime+0xc4>
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	4a20      	ldr	r2, [pc, #128]	@ (800a874 <USB_SetTurnaroundTime+0x13c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d802      	bhi.n	800a7fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	617b      	str	r3, [r7, #20]
 800a7fa:	e015      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4a1d      	ldr	r2, [pc, #116]	@ (800a874 <USB_SetTurnaroundTime+0x13c>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d906      	bls.n	800a812 <USB_SetTurnaroundTime+0xda>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	4a1c      	ldr	r2, [pc, #112]	@ (800a878 <USB_SetTurnaroundTime+0x140>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d202      	bcs.n	800a812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a80c:	2307      	movs	r3, #7
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	e00a      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a812:	2306      	movs	r3, #6
 800a814:	617b      	str	r3, [r7, #20]
 800a816:	e007      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a81e:	2309      	movs	r3, #9
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e001      	b.n	800a828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a824:	2309      	movs	r3, #9
 800a826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a840:	431a      	orrs	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	00d8acbf 	.word	0x00d8acbf
 800a858:	00e4e1c0 	.word	0x00e4e1c0
 800a85c:	00f42400 	.word	0x00f42400
 800a860:	01067380 	.word	0x01067380
 800a864:	011a499f 	.word	0x011a499f
 800a868:	01312cff 	.word	0x01312cff
 800a86c:	014ca43f 	.word	0x014ca43f
 800a870:	016e3600 	.word	0x016e3600
 800a874:	01a6ab1f 	.word	0x01a6ab1f
 800a878:	01e84800 	.word	0x01e84800

0800a87c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f043 0201 	orr.w	r2, r3, #1
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f023 0201 	bic.w	r2, r3, #1
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d115      	bne.n	800a90e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a8ee:	200a      	movs	r0, #10
 800a8f0:	f7f9 f882 	bl	80039f8 <HAL_Delay>
      ms += 10U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	330a      	adds	r3, #10
 800a8f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 f93f 	bl	800bb7e <USB_GetMode>
 800a900:	4603      	mov	r3, r0
 800a902:	2b01      	cmp	r3, #1
 800a904:	d01e      	beq.n	800a944 <USB_SetCurrentMode+0x84>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2bc7      	cmp	r3, #199	@ 0xc7
 800a90a:	d9f0      	bls.n	800a8ee <USB_SetCurrentMode+0x2e>
 800a90c:	e01a      	b.n	800a944 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a90e:	78fb      	ldrb	r3, [r7, #3]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d115      	bne.n	800a940 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a920:	200a      	movs	r0, #10
 800a922:	f7f9 f869 	bl	80039f8 <HAL_Delay>
      ms += 10U;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	330a      	adds	r3, #10
 800a92a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 f926 	bl	800bb7e <USB_GetMode>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <USB_SetCurrentMode+0x84>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a93c:	d9f0      	bls.n	800a920 <USB_SetCurrentMode+0x60>
 800a93e:	e001      	b.n	800a944 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e005      	b.n	800a950 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2bc8      	cmp	r3, #200	@ 0xc8
 800a948:	d101      	bne.n	800a94e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a958:	b084      	sub	sp, #16
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b086      	sub	sp, #24
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a972:	2300      	movs	r3, #0
 800a974:	613b      	str	r3, [r7, #16]
 800a976:	e009      	b.n	800a98c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3340      	adds	r3, #64	@ 0x40
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	2200      	movs	r2, #0
 800a984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	3301      	adds	r3, #1
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	2b0e      	cmp	r3, #14
 800a990:	d9f2      	bls.n	800a978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a992:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a996:	2b00      	cmp	r3, #0
 800a998:	d11c      	bne.n	800a9d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9a8:	f043 0302 	orr.w	r3, r3, #2
 800a9ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	639a      	str	r2, [r3, #56]	@ 0x38
 800a9d2:	e00b      	b.n	800a9ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d10d      	bne.n	800aa1c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa08:	2100      	movs	r1, #0
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f968 	bl	800ace0 <USB_SetDevSpeed>
 800aa10:	e008      	b.n	800aa24 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa12:	2101      	movs	r1, #1
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f963 	bl	800ace0 <USB_SetDevSpeed>
 800aa1a:	e003      	b.n	800aa24 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa1c:	2103      	movs	r1, #3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f95e 	bl	800ace0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa24:	2110      	movs	r1, #16
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f8fa 	bl	800ac20 <USB_FlushTxFifo>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f924 	bl	800ac84 <USB_FlushRxFifo>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa58:	461a      	mov	r2, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa64:	461a      	mov	r2, r3
 800aa66:	2300      	movs	r3, #0
 800aa68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	613b      	str	r3, [r7, #16]
 800aa6e:	e043      	b.n	800aaf8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa86:	d118      	bne.n	800aaba <USB_DevInit+0x162>
    {
      if (i == 0U)
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	e013      	b.n	800aacc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	461a      	mov	r2, r3
 800aab2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	e008      	b.n	800aacc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac6:	461a      	mov	r2, r3
 800aac8:	2300      	movs	r3, #0
 800aaca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad8:	461a      	mov	r2, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaea:	461a      	mov	r2, r3
 800aaec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aaf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aafc:	461a      	mov	r2, r3
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d3b5      	bcc.n	800aa70 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	e043      	b.n	800ab92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab20:	d118      	bne.n	800ab54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab34:	461a      	mov	r2, r3
 800ab36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	e013      	b.n	800ab66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e008      	b.n	800ab66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab72:	461a      	mov	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab84:	461a      	mov	r2, r3
 800ab86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ab8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab96:	461a      	mov	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d3b5      	bcc.n	800ab0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800abbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f043 0210 	orr.w	r2, r3, #16
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	4b10      	ldr	r3, [pc, #64]	@ (800ac1c <USB_DevInit+0x2c4>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abe0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	f043 0208 	orr.w	r2, r3, #8
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abf4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d107      	bne.n	800ac0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac04:	f043 0304 	orr.w	r3, r3, #4
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac18:	b004      	add	sp, #16
 800ac1a:	4770      	bx	lr
 800ac1c:	803c3800 	.word	0x803c3800

0800ac20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac3a:	d901      	bls.n	800ac40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e01b      	b.n	800ac78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	daf2      	bge.n	800ac2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	019b      	lsls	r3, r3, #6
 800ac50:	f043 0220 	orr.w	r2, r3, #32
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac64:	d901      	bls.n	800ac6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e006      	b.n	800ac78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d0f0      	beq.n	800ac58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac9c:	d901      	bls.n	800aca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e018      	b.n	800acd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	daf2      	bge.n	800ac90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2210      	movs	r2, #16
 800acb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acc0:	d901      	bls.n	800acc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e006      	b.n	800acd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0310 	and.w	r3, r3, #16
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d0f0      	beq.n	800acb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad00:	4313      	orrs	r3, r2
 800ad02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0306 	and.w	r3, r3, #6
 800ad2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75fb      	strb	r3, [r7, #23]
 800ad36:	e00a      	b.n	800ad4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d002      	beq.n	800ad44 <USB_GetDevSpeed+0x32>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b06      	cmp	r3, #6
 800ad42:	d102      	bne.n	800ad4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad44:	2302      	movs	r3, #2
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	e001      	b.n	800ad4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad4a:	230f      	movs	r3, #15
 800ad4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d13a      	bne.n	800adee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7e:	69da      	ldr	r2, [r3, #28]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	2101      	movs	r1, #1
 800ad8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad96:	4313      	orrs	r3, r2
 800ad98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d155      	bne.n	800ae5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	059b      	lsls	r3, r3, #22
 800add2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800add4:	4313      	orrs	r3, r2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ade2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ade6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	e036      	b.n	800ae5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf4:	69da      	ldr	r2, [r3, #28]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	2101      	movs	r1, #1
 800ae00:	fa01 f303 	lsl.w	r3, r1, r3
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d11a      	bne.n	800ae5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	791b      	ldrb	r3, [r3, #4]
 800ae40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae42:	430b      	orrs	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d161      	bne.n	800af4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae9e:	d11f      	bne.n	800aee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	2101      	movs	r1, #1
 800aef2:	fa01 f303 	lsl.w	r3, r1, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	43db      	mvns	r3, r3
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af00:	4013      	ands	r3, r2
 800af02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af0a:	69da      	ldr	r2, [r3, #28]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	2101      	movs	r1, #1
 800af16:	fa01 f303 	lsl.w	r3, r1, r3
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	43db      	mvns	r3, r3
 800af1e:	68f9      	ldr	r1, [r7, #12]
 800af20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af24:	4013      	ands	r3, r2
 800af26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	0159      	lsls	r1, r3, #5
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	440b      	add	r3, r1
 800af3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af42:	4619      	mov	r1, r3
 800af44:	4b35      	ldr	r3, [pc, #212]	@ (800b01c <USB_DeactivateEndpoint+0x1b0>)
 800af46:	4013      	ands	r3, r2
 800af48:	600b      	str	r3, [r1, #0]
 800af4a:	e060      	b.n	800b00e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af62:	d11f      	bne.n	800afa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	015a      	lsls	r2, r3, #5
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4413      	add	r3, r2
 800af6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	0151      	lsls	r1, r2, #5
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	440a      	add	r2, r1
 800af7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	2101      	movs	r1, #1
 800afb6:	fa01 f303 	lsl.w	r3, r1, r3
 800afba:	041b      	lsls	r3, r3, #16
 800afbc:	43db      	mvns	r3, r3
 800afbe:	68f9      	ldr	r1, [r7, #12]
 800afc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afc4:	4013      	ands	r3, r2
 800afc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	f003 030f 	and.w	r3, r3, #15
 800afd8:	2101      	movs	r1, #1
 800afda:	fa01 f303 	lsl.w	r3, r1, r3
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	43db      	mvns	r3, r3
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afe8:	4013      	ands	r3, r2
 800afea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	0159      	lsls	r1, r3, #5
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	440b      	add	r3, r1
 800b002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b006:	4619      	mov	r1, r3
 800b008:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <USB_DeactivateEndpoint+0x1b4>)
 800b00a:	4013      	ands	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	ec337800 	.word	0xec337800
 800b020:	eff37800 	.word	0xeff37800

0800b024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08a      	sub	sp, #40	@ 0x28
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	2b01      	cmp	r3, #1
 800b042:	f040 817f 	bne.w	800b344 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d132      	bne.n	800b0b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	69ba      	ldr	r2, [r7, #24]
 800b05e:	0151      	lsls	r1, r2, #5
 800b060:	69fa      	ldr	r2, [r7, #28]
 800b062:	440a      	add	r2, r1
 800b064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b068:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b06c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	0151      	lsls	r1, r2, #5
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	440a      	add	r2, r1
 800b088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b08c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ac:	0cdb      	lsrs	r3, r3, #19
 800b0ae:	04db      	lsls	r3, r3, #19
 800b0b0:	6113      	str	r3, [r2, #16]
 800b0b2:	e097      	b.n	800b1e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ce:	0cdb      	lsrs	r3, r3, #19
 800b0d0:	04db      	lsls	r3, r3, #19
 800b0d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b0f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b0f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d11a      	bne.n	800b134 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	015a      	lsls	r2, r3, #5
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	4413      	add	r3, r2
 800b11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	69ba      	ldr	r2, [r7, #24]
 800b122:	0151      	lsls	r1, r2, #5
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	440a      	add	r2, r1
 800b128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b130:	6113      	str	r3, [r2, #16]
 800b132:	e044      	b.n	800b1be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	4413      	add	r3, r2
 800b13e:	1e5a      	subs	r2, r3, #1
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	8afb      	ldrh	r3, [r7, #22]
 800b15a:	04d9      	lsls	r1, r3, #19
 800b15c:	4ba4      	ldr	r3, [pc, #656]	@ (800b3f0 <USB_EPStartXfer+0x3cc>)
 800b15e:	400b      	ands	r3, r1
 800b160:	69b9      	ldr	r1, [r7, #24]
 800b162:	0148      	lsls	r0, r1, #5
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	4401      	add	r1, r0
 800b168:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b16c:	4313      	orrs	r3, r2
 800b16e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	791b      	ldrb	r3, [r3, #4]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d122      	bne.n	800b1be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	0151      	lsls	r1, r2, #5
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	440a      	add	r2, r1
 800b18e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b192:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b196:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a4:	691a      	ldr	r2, [r3, #16]
 800b1a6:	8afb      	ldrh	r3, [r7, #22]
 800b1a8:	075b      	lsls	r3, r3, #29
 800b1aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b1ae:	69b9      	ldr	r1, [r7, #24]
 800b1b0:	0148      	lsls	r0, r1, #5
 800b1b2:	69f9      	ldr	r1, [r7, #28]
 800b1b4:	4401      	add	r1, r0
 800b1b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1d4:	69b9      	ldr	r1, [r7, #24]
 800b1d6:	0148      	lsls	r0, r1, #5
 800b1d8:	69f9      	ldr	r1, [r7, #28]
 800b1da:	4401      	add	r1, r0
 800b1dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d14b      	bne.n	800b282 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d009      	beq.n	800b206 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	791b      	ldrb	r3, [r3, #4]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d128      	bne.n	800b260 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d110      	bne.n	800b240 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	e00f      	b.n	800b260 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	0151      	lsls	r1, r2, #5
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	440a      	add	r2, r1
 800b256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b25a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b25e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69ba      	ldr	r2, [r7, #24]
 800b270:	0151      	lsls	r1, r2, #5
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	440a      	add	r2, r1
 800b276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b27a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	e166      	b.n	800b550 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b2a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d015      	beq.n	800b2d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 814e 	beq.w	800b550 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	f003 030f 	and.w	r3, r3, #15
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ca:	69f9      	ldr	r1, [r7, #28]
 800b2cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	634b      	str	r3, [r1, #52]	@ 0x34
 800b2d4:	e13c      	b.n	800b550 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d110      	bne.n	800b308 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	69fa      	ldr	r2, [r7, #28]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	e00f      	b.n	800b328 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	0151      	lsls	r1, r2, #5
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	440a      	add	r2, r1
 800b31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b326:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68d9      	ldr	r1, [r3, #12]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	b298      	uxth	r0, r3
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	4603      	mov	r3, r0
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f9b9 	bl	800b6b4 <USB_WritePacket>
 800b342:	e105      	b.n	800b550 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35e:	0cdb      	lsrs	r3, r3, #19
 800b360:	04db      	lsls	r3, r3, #19
 800b362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	0151      	lsls	r1, r2, #5
 800b376:	69fa      	ldr	r2, [r7, #28]
 800b378:	440a      	add	r2, r1
 800b37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b37e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b382:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b386:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d132      	bne.n	800b3f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	689a      	ldr	r2, [r3, #8]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3bc:	69b9      	ldr	r1, [r7, #24]
 800b3be:	0148      	lsls	r0, r1, #5
 800b3c0:	69f9      	ldr	r1, [r7, #28]
 800b3c2:	4401      	add	r1, r0
 800b3c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	0151      	lsls	r1, r2, #5
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	440a      	add	r2, r1
 800b3e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3ea:	6113      	str	r3, [r2, #16]
 800b3ec:	e062      	b.n	800b4b4 <USB_EPStartXfer+0x490>
 800b3ee:	bf00      	nop
 800b3f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d123      	bne.n	800b444 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b412:	69b9      	ldr	r1, [r7, #24]
 800b414:	0148      	lsls	r0, r1, #5
 800b416:	69f9      	ldr	r1, [r7, #28]
 800b418:	4401      	add	r1, r0
 800b41a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b41e:	4313      	orrs	r3, r2
 800b420:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	0151      	lsls	r1, r2, #5
 800b434:	69fa      	ldr	r2, [r7, #28]
 800b436:	440a      	add	r2, r1
 800b438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b43c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b440:	6113      	str	r3, [r2, #16]
 800b442:	e037      	b.n	800b4b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	4413      	add	r3, r2
 800b44e:	1e5a      	subs	r2, r3, #1
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	fbb2 f3f3 	udiv	r3, r2, r3
 800b458:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	8afa      	ldrh	r2, [r7, #22]
 800b460:	fb03 f202 	mul.w	r2, r3, r2
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	8afb      	ldrh	r3, [r7, #22]
 800b478:	04d9      	lsls	r1, r3, #19
 800b47a:	4b38      	ldr	r3, [pc, #224]	@ (800b55c <USB_EPStartXfer+0x538>)
 800b47c:	400b      	ands	r3, r1
 800b47e:	69b9      	ldr	r1, [r7, #24]
 800b480:	0148      	lsls	r0, r1, #5
 800b482:	69f9      	ldr	r1, [r7, #28]
 800b484:	4401      	add	r1, r0
 800b486:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b48a:	4313      	orrs	r3, r2
 800b48c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b49a:	691a      	ldr	r2, [r3, #16]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4a4:	69b9      	ldr	r1, [r7, #24]
 800b4a6:	0148      	lsls	r0, r1, #5
 800b4a8:	69f9      	ldr	r1, [r7, #28]
 800b4aa:	4401      	add	r1, r0
 800b4ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b4b4:	79fb      	ldrb	r3, [r7, #7]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d10d      	bne.n	800b4d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	68d9      	ldr	r1, [r3, #12]
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d2:	460a      	mov	r2, r1
 800b4d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d128      	bne.n	800b530 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d110      	bne.n	800b510 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	e00f      	b.n	800b530 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b52e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b54a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b54e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	1ff80000 	.word	0x1ff80000

0800b560 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d14a      	bne.n	800b614 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b596:	f040 8086 	bne.w	800b6a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	0151      	lsls	r1, r2, #5
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	440a      	add	r2, r1
 800b5b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	7812      	ldrb	r2, [r2, #0]
 800b5d2:	0151      	lsls	r1, r2, #5
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	440a      	add	r2, r1
 800b5d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d902      	bls.n	800b5f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5f6:	e056      	b.n	800b6a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b60c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b610:	d0e7      	beq.n	800b5e2 <USB_EPStopXfer+0x82>
 800b612:	e048      	b.n	800b6a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b62c:	d13b      	bne.n	800b6a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	7812      	ldrb	r2, [r2, #0]
 800b642:	0151      	lsls	r1, r2, #5
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	440a      	add	r2, r1
 800b648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b650:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
 800b67a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b682:	4293      	cmp	r3, r2
 800b684:	d902      	bls.n	800b68c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
          break;
 800b68a:	e00c      	b.n	800b6a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6a4:	d0e7      	beq.n	800b676 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	371c      	adds	r7, #28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b089      	sub	sp, #36	@ 0x24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	71fb      	strb	r3, [r7, #7]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b6d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d123      	bne.n	800b722 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b6da:	88bb      	ldrh	r3, [r7, #4]
 800b6dc:	3303      	adds	r3, #3
 800b6de:	089b      	lsrs	r3, r3, #2
 800b6e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	e018      	b.n	800b71a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	031a      	lsls	r2, r3, #12
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	3301      	adds	r3, #1
 800b700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3301      	adds	r3, #1
 800b706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	3301      	adds	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	3301      	adds	r3, #1
 800b712:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	3301      	adds	r3, #1
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d3e2      	bcc.n	800b6e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3724      	adds	r7, #36	@ 0x24
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b730:	b480      	push	{r7}
 800b732:	b08b      	sub	sp, #44	@ 0x2c
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	089b      	lsrs	r3, r3, #2
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b74e:	88fb      	ldrh	r3, [r7, #6]
 800b750:	f003 0303 	and.w	r3, r3, #3
 800b754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b756:	2300      	movs	r3, #0
 800b758:	623b      	str	r3, [r7, #32]
 800b75a:	e014      	b.n	800b786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	601a      	str	r2, [r3, #0]
    pDest++;
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	3301      	adds	r3, #1
 800b76c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	3301      	adds	r3, #1
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	3301      	adds	r3, #1
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	3301      	adds	r3, #1
 800b77e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	3301      	adds	r3, #1
 800b784:	623b      	str	r3, [r7, #32]
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d3e6      	bcc.n	800b75c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b78e:	8bfb      	ldrh	r3, [r7, #30]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d01e      	beq.n	800b7d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f107 0310 	add.w	r3, r7, #16
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	701a      	strb	r2, [r3, #0]
      i++;
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	623b      	str	r3, [r7, #32]
      pDest++;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b7c6:	8bfb      	ldrh	r3, [r7, #30]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1ea      	bne.n	800b7a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	372c      	adds	r7, #44	@ 0x2c
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d12c      	bne.n	800b856 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db12      	blt.n	800b834 <USB_EPSetStall+0x54>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00f      	beq.n	800b834 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	0151      	lsls	r1, r2, #5
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	440a      	add	r2, r1
 800b82a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b82e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b832:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	0151      	lsls	r1, r2, #5
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	440a      	add	r2, r1
 800b84a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b84e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b852:	6013      	str	r3, [r2, #0]
 800b854:	e02b      	b.n	800b8ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	db12      	blt.n	800b88e <USB_EPSetStall+0xae>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4413      	add	r3, r2
 800b876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	0151      	lsls	r1, r2, #5
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	440a      	add	r2, r1
 800b884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b88c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	0151      	lsls	r1, r2, #5
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	440a      	add	r2, r1
 800b8a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d128      	bne.n	800b92a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	015a      	lsls	r2, r3, #5
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	0151      	lsls	r1, r2, #5
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	440a      	add	r2, r1
 800b8ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	791b      	ldrb	r3, [r3, #4]
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d003      	beq.n	800b908 <USB_EPClearStall+0x4c>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	791b      	ldrb	r3, [r3, #4]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d138      	bne.n	800b97a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e027      	b.n	800b97a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b944:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b948:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d003      	beq.n	800b95a <USB_EPClearStall+0x9e>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	791b      	ldrb	r3, [r3, #4]
 800b956:	2b02      	cmp	r3, #2
 800b958:	d10f      	bne.n	800b97a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	0151      	lsls	r1, r2, #5
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	440a      	add	r2, r1
 800b970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b978:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b9aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b9bc:	68f9      	ldr	r1, [r7, #12]
 800b9be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba02:	f023 0302 	bic.w	r3, r3, #2
 800ba06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba70:	68fb      	ldr	r3, [r7, #12]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	0c1b      	lsrs	r3, r3, #16
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	4013      	ands	r3, r2
 800bad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	b29b      	uxth	r3, r3
}
 800bada:	4618      	mov	r0, r3
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	4013      	ands	r3, r2
 800bb12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb14:	68bb      	ldr	r3, [r7, #8]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b087      	sub	sp, #28
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb52:	01db      	lsls	r3, r3, #7
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb70:	68bb      	ldr	r3, [r7, #8]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b083      	sub	sp, #12
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b085      	sub	sp, #20
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bbb8:	f023 0307 	bic.w	r3, r3, #7
 800bbbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	333c      	adds	r3, #60	@ 0x3c
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4a26      	ldr	r2, [pc, #152]	@ (800bc98 <USB_EP0_OutStart+0xb8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d90a      	bls.n	800bc1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc14:	d101      	bne.n	800bc1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	e037      	b.n	800bc8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc20:	461a      	mov	r2, r3
 800bc22:	2300      	movs	r3, #0
 800bc24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc48:	f043 0318 	orr.w	r3, r3, #24
 800bc4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bc60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d10f      	bne.n	800bc88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bc86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	4f54300a 	.word	0x4f54300a

0800bc9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bcb4:	d901      	bls.n	800bcba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e022      	b.n	800bd00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	daf2      	bge.n	800bca8 <USB_CoreReset+0xc>

  count = 10U;
 800bcc2:	230a      	movs	r3, #10
 800bcc4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bcc6:	e002      	b.n	800bcce <USB_CoreReset+0x32>
  {
    count--;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1f9      	bne.n	800bcc8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	f043 0201 	orr.w	r2, r3, #1
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bcec:	d901      	bls.n	800bcf2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e006      	b.n	800bd00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d0f0      	beq.n	800bce0 <USB_CoreReset+0x44>

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bd18:	2010      	movs	r0, #16
 800bd1a:	f002 f953 	bl	800dfc4 <USBD_static_malloc>
 800bd1e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	32b0      	adds	r2, #176	@ 0xb0
 800bd30:	2100      	movs	r1, #0
 800bd32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bd36:	2302      	movs	r3, #2
 800bd38:	e048      	b.n	800bdcc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	32b0      	adds	r2, #176	@ 0xb0
 800bd44:	68f9      	ldr	r1, [r7, #12]
 800bd46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	32b0      	adds	r2, #176	@ 0xb0
 800bd54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7c1b      	ldrb	r3, [r3, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10d      	bne.n	800bd82 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800bd66:	4b1b      	ldr	r3, [pc, #108]	@ (800bdd4 <USBD_HID_Init+0xc8>)
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	f003 020f 	and.w	r2, r3, #15
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	440b      	add	r3, r1
 800bd7a:	331c      	adds	r3, #28
 800bd7c:	2207      	movs	r2, #7
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	e00c      	b.n	800bd9c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800bd82:	4b14      	ldr	r3, [pc, #80]	@ (800bdd4 <USBD_HID_Init+0xc8>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 020f 	and.w	r2, r3, #15
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	440b      	add	r3, r1
 800bd96:	331c      	adds	r3, #28
 800bd98:	220a      	movs	r2, #10
 800bd9a:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bd9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd4 <USBD_HID_Init+0xc8>)
 800bd9e:	7819      	ldrb	r1, [r3, #0]
 800bda0:	2304      	movs	r3, #4
 800bda2:	2203      	movs	r2, #3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 fffc 	bl	800dda2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800bdaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd4 <USBD_HID_Init+0xc8>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	f003 020f 	and.w	r2, r3, #15
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	4413      	add	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	440b      	add	r3, r1
 800bdbe:	3323      	adds	r3, #35	@ 0x23
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20000142 	.word	0x20000142

0800bdd8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800bde4:	4b1f      	ldr	r3, [pc, #124]	@ (800be64 <USBD_HID_DeInit+0x8c>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 ffff 	bl	800ddee <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800bdf0:	4b1c      	ldr	r3, [pc, #112]	@ (800be64 <USBD_HID_DeInit+0x8c>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	f003 020f 	and.w	r2, r3, #15
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	3323      	adds	r3, #35	@ 0x23
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800be0a:	4b16      	ldr	r3, [pc, #88]	@ (800be64 <USBD_HID_DeInit+0x8c>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	f003 020f 	and.w	r2, r3, #15
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	4613      	mov	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	440b      	add	r3, r1
 800be1e:	331c      	adds	r3, #28
 800be20:	2200      	movs	r2, #0
 800be22:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32b0      	adds	r2, #176	@ 0xb0
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d011      	beq.n	800be5a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	32b0      	adds	r2, #176	@ 0xb0
 800be40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be44:	4618      	mov	r0, r3
 800be46:	f002 f8cb 	bl	800dfe0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	32b0      	adds	r2, #176	@ 0xb0
 800be54:	2100      	movs	r1, #0
 800be56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20000142 	.word	0x20000142

0800be68 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	32b0      	adds	r2, #176	@ 0xb0
 800be7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be80:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800be86:	2300      	movs	r3, #0
 800be88:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800be90:	2303      	movs	r3, #3
 800be92:	e0e8      	b.n	800c066 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d046      	beq.n	800bf2e <USBD_HID_Setup+0xc6>
 800bea0:	2b20      	cmp	r3, #32
 800bea2:	f040 80d8 	bne.w	800c056 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	785b      	ldrb	r3, [r3, #1]
 800beaa:	3b02      	subs	r3, #2
 800beac:	2b09      	cmp	r3, #9
 800beae:	d836      	bhi.n	800bf1e <USBD_HID_Setup+0xb6>
 800beb0:	a201      	add	r2, pc, #4	@ (adr r2, 800beb8 <USBD_HID_Setup+0x50>)
 800beb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb6:	bf00      	nop
 800beb8:	0800bf0f 	.word	0x0800bf0f
 800bebc:	0800beef 	.word	0x0800beef
 800bec0:	0800bf1f 	.word	0x0800bf1f
 800bec4:	0800bf1f 	.word	0x0800bf1f
 800bec8:	0800bf1f 	.word	0x0800bf1f
 800becc:	0800bf1f 	.word	0x0800bf1f
 800bed0:	0800bf1f 	.word	0x0800bf1f
 800bed4:	0800bf1f 	.word	0x0800bf1f
 800bed8:	0800befd 	.word	0x0800befd
 800bedc:	0800bee1 	.word	0x0800bee1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	885b      	ldrh	r3, [r3, #2]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	461a      	mov	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	601a      	str	r2, [r3, #0]
          break;
 800beec:	e01e      	b.n	800bf2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f001 fbfb 	bl	800d6f0 <USBD_CtlSendData>
          break;
 800befa:	e017      	b.n	800bf2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	885b      	ldrh	r3, [r3, #2]
 800bf00:	0a1b      	lsrs	r3, r3, #8
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	461a      	mov	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	605a      	str	r2, [r3, #4]
          break;
 800bf0c:	e00e      	b.n	800bf2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3304      	adds	r3, #4
 800bf12:	2201      	movs	r2, #1
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 fbea 	bl	800d6f0 <USBD_CtlSendData>
          break;
 800bf1c:	e006      	b.n	800bf2c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 fb68 	bl	800d5f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf26:	2303      	movs	r3, #3
 800bf28:	75fb      	strb	r3, [r7, #23]
          break;
 800bf2a:	bf00      	nop
      }
      break;
 800bf2c:	e09a      	b.n	800c064 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	785b      	ldrb	r3, [r3, #1]
 800bf32:	2b0b      	cmp	r3, #11
 800bf34:	f200 8086 	bhi.w	800c044 <USBD_HID_Setup+0x1dc>
 800bf38:	a201      	add	r2, pc, #4	@ (adr r2, 800bf40 <USBD_HID_Setup+0xd8>)
 800bf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3e:	bf00      	nop
 800bf40:	0800bf71 	.word	0x0800bf71
 800bf44:	0800c053 	.word	0x0800c053
 800bf48:	0800c045 	.word	0x0800c045
 800bf4c:	0800c045 	.word	0x0800c045
 800bf50:	0800c045 	.word	0x0800c045
 800bf54:	0800c045 	.word	0x0800c045
 800bf58:	0800bf9b 	.word	0x0800bf9b
 800bf5c:	0800c045 	.word	0x0800c045
 800bf60:	0800c045 	.word	0x0800c045
 800bf64:	0800c045 	.word	0x0800c045
 800bf68:	0800bff3 	.word	0x0800bff3
 800bf6c:	0800c01d 	.word	0x0800c01d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d107      	bne.n	800bf8c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf7c:	f107 030a 	add.w	r3, r7, #10
 800bf80:	2202      	movs	r2, #2
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 fbb3 	bl	800d6f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf8a:	e063      	b.n	800c054 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 fb31 	bl	800d5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf94:	2303      	movs	r3, #3
 800bf96:	75fb      	strb	r3, [r7, #23]
          break;
 800bf98:	e05c      	b.n	800c054 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	885b      	ldrh	r3, [r3, #2]
 800bf9e:	0a1b      	lsrs	r3, r3, #8
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	2b22      	cmp	r3, #34	@ 0x22
 800bfa4:	d108      	bne.n	800bfb8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	88db      	ldrh	r3, [r3, #6]
 800bfaa:	2b4a      	cmp	r3, #74	@ 0x4a
 800bfac:	bf28      	it	cs
 800bfae:	234a      	movcs	r3, #74	@ 0x4a
 800bfb0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800bfb2:	4b2f      	ldr	r3, [pc, #188]	@ (800c070 <USBD_HID_Setup+0x208>)
 800bfb4:	613b      	str	r3, [r7, #16]
 800bfb6:	e015      	b.n	800bfe4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	885b      	ldrh	r3, [r3, #2]
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	2b21      	cmp	r3, #33	@ 0x21
 800bfc2:	d108      	bne.n	800bfd6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800bfc4:	4b2b      	ldr	r3, [pc, #172]	@ (800c074 <USBD_HID_Setup+0x20c>)
 800bfc6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	88db      	ldrh	r3, [r3, #6]
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	bf28      	it	cs
 800bfd0:	2309      	movcs	r3, #9
 800bfd2:	82bb      	strh	r3, [r7, #20]
 800bfd4:	e006      	b.n	800bfe4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fb0c 	bl	800d5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	75fb      	strb	r3, [r7, #23]
            break;
 800bfe2:	e037      	b.n	800c054 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfe4:	8abb      	ldrh	r3, [r7, #20]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6939      	ldr	r1, [r7, #16]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fb80 	bl	800d6f0 <USBD_CtlSendData>
          break;
 800bff0:	e030      	b.n	800c054 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d107      	bne.n	800c00e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3308      	adds	r3, #8
 800c002:	2201      	movs	r2, #1
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f001 fb72 	bl	800d6f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c00c:	e022      	b.n	800c054 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 faf0 	bl	800d5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c016:	2303      	movs	r3, #3
 800c018:	75fb      	strb	r3, [r7, #23]
          break;
 800c01a:	e01b      	b.n	800c054 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b03      	cmp	r3, #3
 800c026:	d106      	bne.n	800c036 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	461a      	mov	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c034:	e00e      	b.n	800c054 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fadc 	bl	800d5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c03e:	2303      	movs	r3, #3
 800c040:	75fb      	strb	r3, [r7, #23]
          break;
 800c042:	e007      	b.n	800c054 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f001 fad5 	bl	800d5f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	75fb      	strb	r3, [r7, #23]
          break;
 800c050:	e000      	b.n	800c054 <USBD_HID_Setup+0x1ec>
          break;
 800c052:	bf00      	nop
      }
      break;
 800c054:	e006      	b.n	800c064 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 facc 	bl	800d5f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c05e:	2303      	movs	r3, #3
 800c060:	75fb      	strb	r3, [r7, #23]
      break;
 800c062:	bf00      	nop
  }

  return (uint8_t)ret;
 800c064:	7dfb      	ldrb	r3, [r7, #23]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200000f8 	.word	0x200000f8
 800c074:	200000e0 	.word	0x200000e0

0800c078 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	4613      	mov	r3, r2
 800c084:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	32b0      	adds	r2, #176	@ 0xb0
 800c090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c094:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e014      	b.n	800c0ca <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	d10d      	bne.n	800c0c8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	7b1b      	ldrb	r3, [r3, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d109      	bne.n	800c0c8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800c0ba:	4b06      	ldr	r3, [pc, #24]	@ (800c0d4 <USBD_HID_SendReport+0x5c>)
 800c0bc:	7819      	ldrb	r1, [r3, #0]
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f001 ff3b 	bl	800df3e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000142 	.word	0x20000142

0800c0d8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c0e0:	2181      	movs	r1, #129	@ 0x81
 800c0e2:	4809      	ldr	r0, [pc, #36]	@ (800c108 <USBD_HID_GetFSCfgDesc+0x30>)
 800c0e4:	f000 fc4e 	bl	800c984 <USBD_GetEpDesc>
 800c0e8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	220a      	movs	r2, #10
 800c0f4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2222      	movs	r2, #34	@ 0x22
 800c0fa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c0fc:	4b02      	ldr	r3, [pc, #8]	@ (800c108 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200000bc 	.word	0x200000bc

0800c10c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c114:	2181      	movs	r1, #129	@ 0x81
 800c116:	4809      	ldr	r0, [pc, #36]	@ (800c13c <USBD_HID_GetHSCfgDesc+0x30>)
 800c118:	f000 fc34 	bl	800c984 <USBD_GetEpDesc>
 800c11c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2207      	movs	r2, #7
 800c128:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2222      	movs	r2, #34	@ 0x22
 800c12e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c130:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <USBD_HID_GetHSCfgDesc+0x30>)
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	200000bc 	.word	0x200000bc

0800c140 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c148:	2181      	movs	r1, #129	@ 0x81
 800c14a:	4809      	ldr	r0, [pc, #36]	@ (800c170 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800c14c:	f000 fc1a 	bl	800c984 <USBD_GetEpDesc>
 800c150:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	220a      	movs	r2, #10
 800c15c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2222      	movs	r2, #34	@ 0x22
 800c162:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	200000bc 	.word	0x200000bc

0800c174 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32b0      	adds	r2, #176	@ 0xb0
 800c18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18e:	2200      	movs	r2, #0
 800c190:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	220a      	movs	r2, #10
 800c1ac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c1ae:	4b03      	ldr	r3, [pc, #12]	@ (800c1bc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	200000ec 	.word	0x200000ec

0800c1c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e01f      	b.n	800c218 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f001 fd5b 	bl	800dcc8 <USBD_LL_Init>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c216:	7dfb      	ldrb	r3, [r7, #23]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e025      	b.n	800c284 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	32ae      	adds	r2, #174	@ 0xae
 800c24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00f      	beq.n	800c274 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	32ae      	adds	r2, #174	@ 0xae
 800c25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c264:	f107 020e 	add.w	r2, r7, #14
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
 800c26c:	4602      	mov	r2, r0
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 fd69 	bl	800dd6c <USBD_LL_Start>
 800c29a:	4603      	mov	r3, r0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d009      	beq.n	800c2e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	78fa      	ldrb	r2, [r7, #3]
 800c2de:	4611      	mov	r1, r2
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	4798      	blx	r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	78fa      	ldrb	r2, [r7, #3]
 800c30c:	4611      	mov	r1, r2
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	4798      	blx	r3
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c318:	2303      	movs	r3, #3
 800c31a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	4618      	mov	r0, r3
 800c33a:	f001 f922 	bl	800d582 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c34c:	461a      	mov	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c35a:	f003 031f 	and.w	r3, r3, #31
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d01a      	beq.n	800c398 <USBD_LL_SetupStage+0x72>
 800c362:	2b02      	cmp	r3, #2
 800c364:	d822      	bhi.n	800c3ac <USBD_LL_SetupStage+0x86>
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <USBD_LL_SetupStage+0x4a>
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d00a      	beq.n	800c384 <USBD_LL_SetupStage+0x5e>
 800c36e:	e01d      	b.n	800c3ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fb77 	bl	800ca6c <USBD_StdDevReq>
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]
      break;
 800c382:	e020      	b.n	800c3c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fbdf 	bl	800cb50 <USBD_StdItfReq>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]
      break;
 800c396:	e016      	b.n	800c3c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc41 	bl	800cc28 <USBD_StdEPReq>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3aa:	e00c      	b.n	800c3c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c3b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 fd36 	bl	800de2c <USBD_LL_StallEP>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c4:	bf00      	nop
  }

  return ret;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d177      	bne.n	800c4d8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c3ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	f040 80a1 	bne.w	800c53e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	8992      	ldrh	r2, [r2, #12]
 800c404:	4293      	cmp	r3, r2
 800c406:	d91c      	bls.n	800c442 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	8992      	ldrh	r2, [r2, #12]
 800c410:	1a9a      	subs	r2, r3, r2
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	8992      	ldrh	r2, [r2, #12]
 800c41e:	441a      	add	r2, r3
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6919      	ldr	r1, [r3, #16]
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	899b      	ldrh	r3, [r3, #12]
 800c42c:	461a      	mov	r2, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	4293      	cmp	r3, r2
 800c434:	bf38      	it	cc
 800c436:	4613      	movcc	r3, r2
 800c438:	461a      	mov	r2, r3
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f001 f987 	bl	800d74e <USBD_CtlContinueRx>
 800c440:	e07d      	b.n	800c53e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c448:	f003 031f 	and.w	r3, r3, #31
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d014      	beq.n	800c47a <USBD_LL_DataOutStage+0xaa>
 800c450:	2b02      	cmp	r3, #2
 800c452:	d81d      	bhi.n	800c490 <USBD_LL_DataOutStage+0xc0>
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <USBD_LL_DataOutStage+0x8e>
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d003      	beq.n	800c464 <USBD_LL_DataOutStage+0x94>
 800c45c:	e018      	b.n	800c490 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	75bb      	strb	r3, [r7, #22]
            break;
 800c462:	e018      	b.n	800c496 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 fa6e 	bl	800c950 <USBD_CoreFindIF>
 800c474:	4603      	mov	r3, r0
 800c476:	75bb      	strb	r3, [r7, #22]
            break;
 800c478:	e00d      	b.n	800c496 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c480:	b2db      	uxtb	r3, r3
 800c482:	4619      	mov	r1, r3
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 fa70 	bl	800c96a <USBD_CoreFindEP>
 800c48a:	4603      	mov	r3, r0
 800c48c:	75bb      	strb	r3, [r7, #22]
            break;
 800c48e:	e002      	b.n	800c496 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	75bb      	strb	r3, [r7, #22]
            break;
 800c494:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c496:	7dbb      	ldrb	r3, [r7, #22]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d119      	bne.n	800c4d0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d113      	bne.n	800c4d0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c4a8:	7dba      	ldrb	r2, [r7, #22]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	32ae      	adds	r2, #174	@ 0xae
 800c4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c4b8:	7dba      	ldrb	r2, [r7, #22]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c4c0:	7dba      	ldrb	r2, [r7, #22]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	32ae      	adds	r2, #174	@ 0xae
 800c4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f001 f94d 	bl	800d770 <USBD_CtlSendStatus>
 800c4d6:	e032      	b.n	800c53e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 fa41 	bl	800c96a <USBD_CoreFindEP>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4ec:	7dbb      	ldrb	r3, [r7, #22]
 800c4ee:	2bff      	cmp	r3, #255	@ 0xff
 800c4f0:	d025      	beq.n	800c53e <USBD_LL_DataOutStage+0x16e>
 800c4f2:	7dbb      	ldrb	r3, [r7, #22]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d122      	bne.n	800c53e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b03      	cmp	r3, #3
 800c502:	d117      	bne.n	800c534 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c504:	7dba      	ldrb	r2, [r7, #22]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	32ae      	adds	r2, #174	@ 0xae
 800c50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00f      	beq.n	800c534 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c514:	7dba      	ldrb	r2, [r7, #22]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c51c:	7dba      	ldrb	r2, [r7, #22]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	32ae      	adds	r2, #174	@ 0xae
 800c522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	7afa      	ldrb	r2, [r7, #11]
 800c52a:	4611      	mov	r1, r2
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	e000      	b.n	800c540 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	460b      	mov	r3, r1
 800c552:	607a      	str	r2, [r7, #4]
 800c554:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d178      	bne.n	800c64e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3314      	adds	r3, #20
 800c560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d163      	bne.n	800c634 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	8992      	ldrh	r2, [r2, #12]
 800c574:	4293      	cmp	r3, r2
 800c576:	d91c      	bls.n	800c5b2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	8992      	ldrh	r2, [r2, #12]
 800c580:	1a9a      	subs	r2, r3, r2
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	8992      	ldrh	r2, [r2, #12]
 800c58e:	441a      	add	r2, r3
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	6919      	ldr	r1, [r3, #16]
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	461a      	mov	r2, r3
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f001 f8c4 	bl	800d72c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f001 fce8 	bl	800df80 <USBD_LL_PrepareReceive>
 800c5b0:	e040      	b.n	800c634 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	899b      	ldrh	r3, [r3, #12]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d11c      	bne.n	800c5fa <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d316      	bcc.n	800c5fa <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d20f      	bcs.n	800c5fa <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f001 f8a4 	bl	800d72c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f001 fcc4 	bl	800df80 <USBD_LL_PrepareReceive>
 800c5f8:	e01c      	b.n	800c634 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b03      	cmp	r3, #3
 800c604:	d10f      	bne.n	800c626 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d009      	beq.n	800c626 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c626:	2180      	movs	r1, #128	@ 0x80
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f001 fbff 	bl	800de2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f001 f8b1 	bl	800d796 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d03a      	beq.n	800c6b4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f7ff fe30 	bl	800c2a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c64c:	e032      	b.n	800c6b4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c654:	b2db      	uxtb	r3, r3
 800c656:	4619      	mov	r1, r3
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f000 f986 	bl	800c96a <USBD_CoreFindEP>
 800c65e:	4603      	mov	r3, r0
 800c660:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c662:	7dfb      	ldrb	r3, [r7, #23]
 800c664:	2bff      	cmp	r3, #255	@ 0xff
 800c666:	d025      	beq.n	800c6b4 <USBD_LL_DataInStage+0x16c>
 800c668:	7dfb      	ldrb	r3, [r7, #23]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d122      	bne.n	800c6b4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b03      	cmp	r3, #3
 800c678:	d11c      	bne.n	800c6b4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c67a:	7dfa      	ldrb	r2, [r7, #23]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	32ae      	adds	r2, #174	@ 0xae
 800c680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d014      	beq.n	800c6b4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c68a:	7dfa      	ldrb	r2, [r7, #23]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c692:	7dfa      	ldrb	r2, [r7, #23]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	32ae      	adds	r2, #174	@ 0xae
 800c698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	7afa      	ldrb	r2, [r7, #11]
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	4798      	blx	r3
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c6aa:	7dbb      	ldrb	r3, [r7, #22]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c6b0:	7dbb      	ldrb	r3, [r7, #22]
 800c6b2:	e000      	b.n	800c6b6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d014      	beq.n	800c724 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00e      	beq.n	800c724 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	6852      	ldr	r2, [r2, #4]
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	4611      	mov	r1, r2
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	4798      	blx	r3
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c720:	2303      	movs	r3, #3
 800c722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c724:	2340      	movs	r3, #64	@ 0x40
 800c726:	2200      	movs	r2, #0
 800c728:	2100      	movs	r1, #0
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f001 fb39 	bl	800dda2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2240      	movs	r2, #64	@ 0x40
 800c73c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c740:	2340      	movs	r3, #64	@ 0x40
 800c742:	2200      	movs	r2, #0
 800c744:	2180      	movs	r1, #128	@ 0x80
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 fb2b 	bl	800dda2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2240      	movs	r2, #64	@ 0x40
 800c758:	841a      	strh	r2, [r3, #32]

  return ret;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	78fa      	ldrb	r2, [r7, #3]
 800c774:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b04      	cmp	r3, #4
 800c796:	d006      	beq.n	800c7a6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2204      	movs	r2, #4
 800c7aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b04      	cmp	r3, #4
 800c7ce:	d106      	bne.n	800c7de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d110      	bne.n	800c822 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	32ae      	adds	r2, #174	@ 0xae
 800c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e01c      	b.n	800c888 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b03      	cmp	r3, #3
 800c858:	d115      	bne.n	800c886 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	32ae      	adds	r2, #174	@ 0xae
 800c864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00b      	beq.n	800c886 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	32ae      	adds	r2, #174	@ 0xae
 800c878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	4611      	mov	r1, r2
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	32ae      	adds	r2, #174	@ 0xae
 800c8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e01c      	b.n	800c8ec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d115      	bne.n	800c8ea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	32ae      	adds	r2, #174	@ 0xae
 800c8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00b      	beq.n	800c8ea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	32ae      	adds	r2, #174	@ 0xae
 800c8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00e      	beq.n	800c946 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	6852      	ldr	r2, [r2, #4]
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	4611      	mov	r1, r2
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	4798      	blx	r3
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c942:	2303      	movs	r3, #3
 800c944:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c95c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	460b      	mov	r3, r1
 800c974:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c976:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	885b      	ldrh	r3, [r3, #2]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d91f      	bls.n	800c9ea <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c9b0:	e013      	b.n	800c9da <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c9b2:	f107 030a 	add.w	r3, r7, #10
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6978      	ldr	r0, [r7, #20]
 800c9ba:	f000 f81b 	bl	800c9f4 <USBD_GetNextDesc>
 800c9be:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	2b05      	cmp	r3, #5
 800c9c6:	d108      	bne.n	800c9da <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	789b      	ldrb	r3, [r3, #2]
 800c9d0:	78fa      	ldrb	r2, [r7, #3]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d008      	beq.n	800c9e8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	897b      	ldrh	r3, [r7, #10]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d8e5      	bhi.n	800c9b2 <USBD_GetEpDesc+0x2e>
 800c9e6:	e000      	b.n	800c9ea <USBD_GetEpDesc+0x66>
          break;
 800c9e8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c9ea:	693b      	ldr	r3, [r7, #16]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	7812      	ldrb	r2, [r2, #0]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	3301      	adds	r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ca4e:	021b      	lsls	r3, r3, #8
 800ca50:	b21a      	sxth	r2, r3
 800ca52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b21b      	sxth	r3, r3
 800ca5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ca5c:	89fb      	ldrh	r3, [r7, #14]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
	...

0800ca6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca82:	2b40      	cmp	r3, #64	@ 0x40
 800ca84:	d005      	beq.n	800ca92 <USBD_StdDevReq+0x26>
 800ca86:	2b40      	cmp	r3, #64	@ 0x40
 800ca88:	d857      	bhi.n	800cb3a <USBD_StdDevReq+0xce>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00f      	beq.n	800caae <USBD_StdDevReq+0x42>
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d153      	bne.n	800cb3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	32ae      	adds	r2, #174	@ 0xae
 800ca9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]
      break;
 800caac:	e04a      	b.n	800cb44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	785b      	ldrb	r3, [r3, #1]
 800cab2:	2b09      	cmp	r3, #9
 800cab4:	d83b      	bhi.n	800cb2e <USBD_StdDevReq+0xc2>
 800cab6:	a201      	add	r2, pc, #4	@ (adr r2, 800cabc <USBD_StdDevReq+0x50>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cb11 	.word	0x0800cb11
 800cac0:	0800cb25 	.word	0x0800cb25
 800cac4:	0800cb2f 	.word	0x0800cb2f
 800cac8:	0800cb1b 	.word	0x0800cb1b
 800cacc:	0800cb2f 	.word	0x0800cb2f
 800cad0:	0800caef 	.word	0x0800caef
 800cad4:	0800cae5 	.word	0x0800cae5
 800cad8:	0800cb2f 	.word	0x0800cb2f
 800cadc:	0800cb07 	.word	0x0800cb07
 800cae0:	0800caf9 	.word	0x0800caf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa3e 	bl	800cf68 <USBD_GetDescriptor>
          break;
 800caec:	e024      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fba3 	bl	800d23c <USBD_SetAddress>
          break;
 800caf6:	e01f      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fbe2 	bl	800d2c4 <USBD_SetConfig>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73fb      	strb	r3, [r7, #15]
          break;
 800cb04:	e018      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fc85 	bl	800d418 <USBD_GetConfig>
          break;
 800cb0e:	e013      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fcb6 	bl	800d484 <USBD_GetStatus>
          break;
 800cb18:	e00e      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fce5 	bl	800d4ec <USBD_SetFeature>
          break;
 800cb22:	e009      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fd09 	bl	800d53e <USBD_ClrFeature>
          break;
 800cb2c:	e004      	b.n	800cb38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fd60 	bl	800d5f6 <USBD_CtlError>
          break;
 800cb36:	bf00      	nop
      }
      break;
 800cb38:	e004      	b.n	800cb44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fd5a 	bl	800d5f6 <USBD_CtlError>
      break;
 800cb42:	bf00      	nop
  }

  return ret;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop

0800cb50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb66:	2b40      	cmp	r3, #64	@ 0x40
 800cb68:	d005      	beq.n	800cb76 <USBD_StdItfReq+0x26>
 800cb6a:	2b40      	cmp	r3, #64	@ 0x40
 800cb6c:	d852      	bhi.n	800cc14 <USBD_StdItfReq+0xc4>
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <USBD_StdItfReq+0x26>
 800cb72:	2b20      	cmp	r3, #32
 800cb74:	d14e      	bne.n	800cc14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d840      	bhi.n	800cc06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	889b      	ldrh	r3, [r3, #4]
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d836      	bhi.n	800cbfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	889b      	ldrh	r3, [r3, #4]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff feda 	bl	800c950 <USBD_CoreFindIF>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
 800cba2:	2bff      	cmp	r3, #255	@ 0xff
 800cba4:	d01d      	beq.n	800cbe2 <USBD_StdItfReq+0x92>
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11a      	bne.n	800cbe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cbac:	7bba      	ldrb	r2, [r7, #14]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	32ae      	adds	r2, #174	@ 0xae
 800cbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00f      	beq.n	800cbdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cbbc:	7bba      	ldrb	r2, [r7, #14]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cbc4:	7bba      	ldrb	r2, [r7, #14]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	32ae      	adds	r2, #174	@ 0xae
 800cbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	4798      	blx	r3
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cbda:	e004      	b.n	800cbe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cbe0:	e001      	b.n	800cbe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	88db      	ldrh	r3, [r3, #6]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d110      	bne.n	800cc10 <USBD_StdItfReq+0xc0>
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10d      	bne.n	800cc10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fdbb 	bl	800d770 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cbfa:	e009      	b.n	800cc10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fcf9 	bl	800d5f6 <USBD_CtlError>
          break;
 800cc04:	e004      	b.n	800cc10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fcf4 	bl	800d5f6 <USBD_CtlError>
          break;
 800cc0e:	e000      	b.n	800cc12 <USBD_StdItfReq+0xc2>
          break;
 800cc10:	bf00      	nop
      }
      break;
 800cc12:	e004      	b.n	800cc1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fced 	bl	800d5f6 <USBD_CtlError>
      break;
 800cc1c:	bf00      	nop
  }

  return ret;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	889b      	ldrh	r3, [r3, #4]
 800cc3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc44:	2b40      	cmp	r3, #64	@ 0x40
 800cc46:	d007      	beq.n	800cc58 <USBD_StdEPReq+0x30>
 800cc48:	2b40      	cmp	r3, #64	@ 0x40
 800cc4a:	f200 8181 	bhi.w	800cf50 <USBD_StdEPReq+0x328>
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d02a      	beq.n	800cca8 <USBD_StdEPReq+0x80>
 800cc52:	2b20      	cmp	r3, #32
 800cc54:	f040 817c 	bne.w	800cf50 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fe84 	bl	800c96a <USBD_CoreFindEP>
 800cc62:	4603      	mov	r3, r0
 800cc64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc66:	7b7b      	ldrb	r3, [r7, #13]
 800cc68:	2bff      	cmp	r3, #255	@ 0xff
 800cc6a:	f000 8176 	beq.w	800cf5a <USBD_StdEPReq+0x332>
 800cc6e:	7b7b      	ldrb	r3, [r7, #13]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f040 8172 	bne.w	800cf5a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800cc76:	7b7a      	ldrb	r2, [r7, #13]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cc7e:	7b7a      	ldrb	r2, [r7, #13]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	32ae      	adds	r2, #174	@ 0xae
 800cc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 8165 	beq.w	800cf5a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cc90:	7b7a      	ldrb	r2, [r7, #13]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	32ae      	adds	r2, #174	@ 0xae
 800cc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	4798      	blx	r3
 800cca2:	4603      	mov	r3, r0
 800cca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cca6:	e158      	b.n	800cf5a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d008      	beq.n	800ccc2 <USBD_StdEPReq+0x9a>
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	f300 8147 	bgt.w	800cf44 <USBD_StdEPReq+0x31c>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f000 809b 	beq.w	800cdf2 <USBD_StdEPReq+0x1ca>
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d03c      	beq.n	800cd3a <USBD_StdEPReq+0x112>
 800ccc0:	e140      	b.n	800cf44 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d002      	beq.n	800ccd4 <USBD_StdEPReq+0xac>
 800ccce:	2b03      	cmp	r3, #3
 800ccd0:	d016      	beq.n	800cd00 <USBD_StdEPReq+0xd8>
 800ccd2:	e02c      	b.n	800cd2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00d      	beq.n	800ccf6 <USBD_StdEPReq+0xce>
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	2b80      	cmp	r3, #128	@ 0x80
 800ccde:	d00a      	beq.n	800ccf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f001 f8a1 	bl	800de2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccea:	2180      	movs	r1, #128	@ 0x80
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f001 f89d 	bl	800de2c <USBD_LL_StallEP>
 800ccf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccf4:	e020      	b.n	800cd38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fc7c 	bl	800d5f6 <USBD_CtlError>
              break;
 800ccfe:	e01b      	b.n	800cd38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	885b      	ldrh	r3, [r3, #2]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10e      	bne.n	800cd26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00b      	beq.n	800cd26 <USBD_StdEPReq+0xfe>
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
 800cd10:	2b80      	cmp	r3, #128	@ 0x80
 800cd12:	d008      	beq.n	800cd26 <USBD_StdEPReq+0xfe>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	88db      	ldrh	r3, [r3, #6]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d104      	bne.n	800cd26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd1c:	7bbb      	ldrb	r3, [r7, #14]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f001 f883 	bl	800de2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fd22 	bl	800d770 <USBD_CtlSendStatus>

              break;
 800cd2c:	e004      	b.n	800cd38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fc60 	bl	800d5f6 <USBD_CtlError>
              break;
 800cd36:	bf00      	nop
          }
          break;
 800cd38:	e109      	b.n	800cf4e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d002      	beq.n	800cd4c <USBD_StdEPReq+0x124>
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d016      	beq.n	800cd78 <USBD_StdEPReq+0x150>
 800cd4a:	e04b      	b.n	800cde4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00d      	beq.n	800cd6e <USBD_StdEPReq+0x146>
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	2b80      	cmp	r3, #128	@ 0x80
 800cd56:	d00a      	beq.n	800cd6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f001 f865 	bl	800de2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd62:	2180      	movs	r1, #128	@ 0x80
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 f861 	bl	800de2c <USBD_LL_StallEP>
 800cd6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd6c:	e040      	b.n	800cdf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fc40 	bl	800d5f6 <USBD_CtlError>
              break;
 800cd76:	e03b      	b.n	800cdf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	885b      	ldrh	r3, [r3, #2]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d136      	bne.n	800cdee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d004      	beq.n	800cd94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 f86b 	bl	800de6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fceb 	bl	800d770 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff fde3 	bl	800c96a <USBD_CoreFindEP>
 800cda4:	4603      	mov	r3, r0
 800cda6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cda8:	7b7b      	ldrb	r3, [r7, #13]
 800cdaa:	2bff      	cmp	r3, #255	@ 0xff
 800cdac:	d01f      	beq.n	800cdee <USBD_StdEPReq+0x1c6>
 800cdae:	7b7b      	ldrb	r3, [r7, #13]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11c      	bne.n	800cdee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cdb4:	7b7a      	ldrb	r2, [r7, #13]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cdbc:	7b7a      	ldrb	r2, [r7, #13]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32ae      	adds	r2, #174	@ 0xae
 800cdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d010      	beq.n	800cdee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cdcc:	7b7a      	ldrb	r2, [r7, #13]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	32ae      	adds	r2, #174	@ 0xae
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	4798      	blx	r3
 800cdde:	4603      	mov	r3, r0
 800cde0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cde2:	e004      	b.n	800cdee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cde4:	6839      	ldr	r1, [r7, #0]
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fc05 	bl	800d5f6 <USBD_CtlError>
              break;
 800cdec:	e000      	b.n	800cdf0 <USBD_StdEPReq+0x1c8>
              break;
 800cdee:	bf00      	nop
          }
          break;
 800cdf0:	e0ad      	b.n	800cf4e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d002      	beq.n	800ce04 <USBD_StdEPReq+0x1dc>
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d033      	beq.n	800ce6a <USBD_StdEPReq+0x242>
 800ce02:	e099      	b.n	800cf38 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d007      	beq.n	800ce1a <USBD_StdEPReq+0x1f2>
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	2b80      	cmp	r3, #128	@ 0x80
 800ce0e:	d004      	beq.n	800ce1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fbef 	bl	800d5f6 <USBD_CtlError>
                break;
 800ce18:	e093      	b.n	800cf42 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	da0b      	bge.n	800ce3a <USBD_StdEPReq+0x212>
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	3310      	adds	r3, #16
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	4413      	add	r3, r2
 800ce36:	3304      	adds	r3, #4
 800ce38:	e00b      	b.n	800ce52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	4413      	add	r3, r2
 800ce50:	3304      	adds	r3, #4
 800ce52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2200      	movs	r2, #0
 800ce58:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	330e      	adds	r3, #14
 800ce5e:	2202      	movs	r2, #2
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fc44 	bl	800d6f0 <USBD_CtlSendData>
              break;
 800ce68:	e06b      	b.n	800cf42 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	da11      	bge.n	800ce96 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	440b      	add	r3, r1
 800ce84:	3323      	adds	r3, #35	@ 0x23
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d117      	bne.n	800cebc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fbb1 	bl	800d5f6 <USBD_CtlError>
                  break;
 800ce94:	e055      	b.n	800cf42 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	f003 020f 	and.w	r2, r3, #15
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d104      	bne.n	800cebc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fb9e 	bl	800d5f6 <USBD_CtlError>
                  break;
 800ceba:	e042      	b.n	800cf42 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	da0b      	bge.n	800cedc <USBD_StdEPReq+0x2b4>
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	3310      	adds	r3, #16
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	4413      	add	r3, r2
 800ced8:	3304      	adds	r3, #4
 800ceda:	e00b      	b.n	800cef4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cee2:	4613      	mov	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4413      	add	r3, r2
 800cef2:	3304      	adds	r3, #4
 800cef4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <USBD_StdEPReq+0x2da>
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	2b80      	cmp	r3, #128	@ 0x80
 800cf00:	d103      	bne.n	800cf0a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2200      	movs	r2, #0
 800cf06:	739a      	strb	r2, [r3, #14]
 800cf08:	e00e      	b.n	800cf28 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 ffca 	bl	800dea8 <USBD_LL_IsStallEP>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	739a      	strb	r2, [r3, #14]
 800cf20:	e002      	b.n	800cf28 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2200      	movs	r2, #0
 800cf26:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	330e      	adds	r3, #14
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fbdd 	bl	800d6f0 <USBD_CtlSendData>
              break;
 800cf36:	e004      	b.n	800cf42 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fb5b 	bl	800d5f6 <USBD_CtlError>
              break;
 800cf40:	bf00      	nop
          }
          break;
 800cf42:	e004      	b.n	800cf4e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fb55 	bl	800d5f6 <USBD_CtlError>
          break;
 800cf4c:	bf00      	nop
      }
      break;
 800cf4e:	e005      	b.n	800cf5c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fb4f 	bl	800d5f6 <USBD_CtlError>
      break;
 800cf58:	e000      	b.n	800cf5c <USBD_StdEPReq+0x334>
      break;
 800cf5a:	bf00      	nop
  }

  return ret;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	885b      	ldrh	r3, [r3, #2]
 800cf82:	0a1b      	lsrs	r3, r3, #8
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	2b06      	cmp	r3, #6
 800cf8a:	f200 8128 	bhi.w	800d1de <USBD_GetDescriptor+0x276>
 800cf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf94 <USBD_GetDescriptor+0x2c>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfb1 	.word	0x0800cfb1
 800cf98:	0800cfc9 	.word	0x0800cfc9
 800cf9c:	0800d009 	.word	0x0800d009
 800cfa0:	0800d1df 	.word	0x0800d1df
 800cfa4:	0800d1df 	.word	0x0800d1df
 800cfa8:	0800d17f 	.word	0x0800d17f
 800cfac:	0800d1ab 	.word	0x0800d1ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	7c12      	ldrb	r2, [r2, #16]
 800cfbc:	f107 0108 	add.w	r1, r7, #8
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
 800cfc4:	60f8      	str	r0, [r7, #12]
      break;
 800cfc6:	e112      	b.n	800d1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7c1b      	ldrb	r3, [r3, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10d      	bne.n	800cfec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfd8:	f107 0208 	add.w	r2, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cfea:	e100      	b.n	800d1ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff4:	f107 0208 	add.w	r2, r7, #8
 800cff8:	4610      	mov	r0, r2
 800cffa:	4798      	blx	r3
 800cffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3301      	adds	r3, #1
 800d002:	2202      	movs	r2, #2
 800d004:	701a      	strb	r2, [r3, #0]
      break;
 800d006:	e0f2      	b.n	800d1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	885b      	ldrh	r3, [r3, #2]
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b05      	cmp	r3, #5
 800d010:	f200 80ac 	bhi.w	800d16c <USBD_GetDescriptor+0x204>
 800d014:	a201      	add	r2, pc, #4	@ (adr r2, 800d01c <USBD_GetDescriptor+0xb4>)
 800d016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01a:	bf00      	nop
 800d01c:	0800d035 	.word	0x0800d035
 800d020:	0800d069 	.word	0x0800d069
 800d024:	0800d09d 	.word	0x0800d09d
 800d028:	0800d0d1 	.word	0x0800d0d1
 800d02c:	0800d105 	.word	0x0800d105
 800d030:	0800d139 	.word	0x0800d139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	7c12      	ldrb	r2, [r2, #16]
 800d04c:	f107 0108 	add.w	r1, r7, #8
 800d050:	4610      	mov	r0, r2
 800d052:	4798      	blx	r3
 800d054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d056:	e091      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 facb 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d060:	7afb      	ldrb	r3, [r7, #11]
 800d062:	3301      	adds	r3, #1
 800d064:	72fb      	strb	r3, [r7, #11]
          break;
 800d066:	e089      	b.n	800d17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00b      	beq.n	800d08c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	7c12      	ldrb	r2, [r2, #16]
 800d080:	f107 0108 	add.w	r1, r7, #8
 800d084:	4610      	mov	r0, r2
 800d086:	4798      	blx	r3
 800d088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d08a:	e077      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fab1 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d094:	7afb      	ldrb	r3, [r7, #11]
 800d096:	3301      	adds	r3, #1
 800d098:	72fb      	strb	r3, [r7, #11]
          break;
 800d09a:	e06f      	b.n	800d17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	7c12      	ldrb	r2, [r2, #16]
 800d0b4:	f107 0108 	add.w	r1, r7, #8
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4798      	blx	r3
 800d0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0be:	e05d      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0c0:	6839      	ldr	r1, [r7, #0]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fa97 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ce:	e055      	b.n	800d17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	7c12      	ldrb	r2, [r2, #16]
 800d0e8:	f107 0108 	add.w	r1, r7, #8
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
 800d0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0f2:	e043      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fa7d 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d0fc:	7afb      	ldrb	r3, [r7, #11]
 800d0fe:	3301      	adds	r3, #1
 800d100:	72fb      	strb	r3, [r7, #11]
          break;
 800d102:	e03b      	b.n	800d17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d116:	695b      	ldr	r3, [r3, #20]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	7c12      	ldrb	r2, [r2, #16]
 800d11c:	f107 0108 	add.w	r1, r7, #8
 800d120:	4610      	mov	r0, r2
 800d122:	4798      	blx	r3
 800d124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d126:	e029      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fa63 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d130:	7afb      	ldrb	r3, [r7, #11]
 800d132:	3301      	adds	r3, #1
 800d134:	72fb      	strb	r3, [r7, #11]
          break;
 800d136:	e021      	b.n	800d17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00b      	beq.n	800d15c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	7c12      	ldrb	r2, [r2, #16]
 800d150:	f107 0108 	add.w	r1, r7, #8
 800d154:	4610      	mov	r0, r2
 800d156:	4798      	blx	r3
 800d158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d15a:	e00f      	b.n	800d17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fa49 	bl	800d5f6 <USBD_CtlError>
            err++;
 800d164:	7afb      	ldrb	r3, [r7, #11]
 800d166:	3301      	adds	r3, #1
 800d168:	72fb      	strb	r3, [r7, #11]
          break;
 800d16a:	e007      	b.n	800d17c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fa41 	bl	800d5f6 <USBD_CtlError>
          err++;
 800d174:	7afb      	ldrb	r3, [r7, #11]
 800d176:	3301      	adds	r3, #1
 800d178:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d17a:	bf00      	nop
      }
      break;
 800d17c:	e037      	b.n	800d1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	7c1b      	ldrb	r3, [r3, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d109      	bne.n	800d19a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d18e:	f107 0208 	add.w	r2, r7, #8
 800d192:	4610      	mov	r0, r2
 800d194:	4798      	blx	r3
 800d196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d198:	e029      	b.n	800d1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fa2a 	bl	800d5f6 <USBD_CtlError>
        err++;
 800d1a2:	7afb      	ldrb	r3, [r7, #11]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d1a8:	e021      	b.n	800d1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7c1b      	ldrb	r3, [r3, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10d      	bne.n	800d1ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ba:	f107 0208 	add.w	r2, r7, #8
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4798      	blx	r3
 800d1c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	2207      	movs	r2, #7
 800d1ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1cc:	e00f      	b.n	800d1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fa10 	bl	800d5f6 <USBD_CtlError>
        err++;
 800d1d6:	7afb      	ldrb	r3, [r7, #11]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	72fb      	strb	r3, [r7, #11]
      break;
 800d1dc:	e007      	b.n	800d1ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa08 	bl	800d5f6 <USBD_CtlError>
      err++;
 800d1e6:	7afb      	ldrb	r3, [r7, #11]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ec:	bf00      	nop
  }

  if (err != 0U)
 800d1ee:	7afb      	ldrb	r3, [r7, #11]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11e      	bne.n	800d232 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	88db      	ldrh	r3, [r3, #6]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d016      	beq.n	800d22a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d1fc:	893b      	ldrh	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00e      	beq.n	800d220 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	88da      	ldrh	r2, [r3, #6]
 800d206:	893b      	ldrh	r3, [r7, #8]
 800d208:	4293      	cmp	r3, r2
 800d20a:	bf28      	it	cs
 800d20c:	4613      	movcs	r3, r2
 800d20e:	b29b      	uxth	r3, r3
 800d210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d212:	893b      	ldrh	r3, [r7, #8]
 800d214:	461a      	mov	r2, r3
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fa69 	bl	800d6f0 <USBD_CtlSendData>
 800d21e:	e009      	b.n	800d234 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f9e7 	bl	800d5f6 <USBD_CtlError>
 800d228:	e004      	b.n	800d234 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 faa0 	bl	800d770 <USBD_CtlSendStatus>
 800d230:	e000      	b.n	800d234 <USBD_GetDescriptor+0x2cc>
    return;
 800d232:	bf00      	nop
  }
}
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop

0800d23c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	889b      	ldrh	r3, [r3, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d131      	bne.n	800d2b2 <USBD_SetAddress+0x76>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	88db      	ldrh	r3, [r3, #6]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d12d      	bne.n	800d2b2 <USBD_SetAddress+0x76>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	885b      	ldrh	r3, [r3, #2]
 800d25a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d25c:	d829      	bhi.n	800d2b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	885b      	ldrh	r3, [r3, #2]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b03      	cmp	r3, #3
 800d274:	d104      	bne.n	800d280 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f9bc 	bl	800d5f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27e:	e01d      	b.n	800d2bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7bfa      	ldrb	r2, [r7, #15]
 800d284:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d288:	7bfb      	ldrb	r3, [r7, #15]
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fe37 	bl	800df00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa6c 	bl	800d770 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d004      	beq.n	800d2a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2a6:	e009      	b.n	800d2bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b0:	e004      	b.n	800d2bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f99e 	bl	800d5f6 <USBD_CtlError>
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	bf00      	nop
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	885b      	ldrh	r3, [r3, #2]
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	4b4e      	ldr	r3, [pc, #312]	@ (800d414 <USBD_SetConfig+0x150>)
 800d2da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d414 <USBD_SetConfig+0x150>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d905      	bls.n	800d2f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f985 	bl	800d5f6 <USBD_CtlError>
    return USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	e08c      	b.n	800d40a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d002      	beq.n	800d302 <USBD_SetConfig+0x3e>
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d029      	beq.n	800d354 <USBD_SetConfig+0x90>
 800d300:	e075      	b.n	800d3ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d302:	4b44      	ldr	r3, [pc, #272]	@ (800d414 <USBD_SetConfig+0x150>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d020      	beq.n	800d34c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d30a:	4b42      	ldr	r3, [pc, #264]	@ (800d414 <USBD_SetConfig+0x150>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d314:	4b3f      	ldr	r3, [pc, #252]	@ (800d414 <USBD_SetConfig+0x150>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7fe ffcd 	bl	800c2ba <USBD_SetClassConfig>
 800d320:	4603      	mov	r3, r0
 800d322:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d008      	beq.n	800d33c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f962 	bl	800d5f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2202      	movs	r2, #2
 800d336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d33a:	e065      	b.n	800d408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fa17 	bl	800d770 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2203      	movs	r2, #3
 800d346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d34a:	e05d      	b.n	800d408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa0f 	bl	800d770 <USBD_CtlSendStatus>
      break;
 800d352:	e059      	b.n	800d408 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d354:	4b2f      	ldr	r3, [pc, #188]	@ (800d414 <USBD_SetConfig+0x150>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d112      	bne.n	800d382 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2202      	movs	r2, #2
 800d360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d364:	4b2b      	ldr	r3, [pc, #172]	@ (800d414 <USBD_SetConfig+0x150>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d36e:	4b29      	ldr	r3, [pc, #164]	@ (800d414 <USBD_SetConfig+0x150>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7fe ffbc 	bl	800c2f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f9f8 	bl	800d770 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d380:	e042      	b.n	800d408 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d382:	4b24      	ldr	r3, [pc, #144]	@ (800d414 <USBD_SetConfig+0x150>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d02a      	beq.n	800d3e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	b2db      	uxtb	r3, r3
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7fe ffaa 	bl	800c2f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d39e:	4b1d      	ldr	r3, [pc, #116]	@ (800d414 <USBD_SetConfig+0x150>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d414 <USBD_SetConfig+0x150>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7fe ff83 	bl	800c2ba <USBD_SetClassConfig>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00f      	beq.n	800d3de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f918 	bl	800d5f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7fe ff8f 	bl	800c2f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d3dc:	e014      	b.n	800d408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f9c6 	bl	800d770 <USBD_CtlSendStatus>
      break;
 800d3e4:	e010      	b.n	800d408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f9c2 	bl	800d770 <USBD_CtlSendStatus>
      break;
 800d3ec:	e00c      	b.n	800d408 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f900 	bl	800d5f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3f6:	4b07      	ldr	r3, [pc, #28]	@ (800d414 <USBD_SetConfig+0x150>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7fe ff78 	bl	800c2f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d402:	2303      	movs	r3, #3
 800d404:	73fb      	strb	r3, [r7, #15]
      break;
 800d406:	bf00      	nop
  }

  return ret;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	20000778 	.word	0x20000778

0800d418 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	88db      	ldrh	r3, [r3, #6]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d004      	beq.n	800d434 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 f8e2 	bl	800d5f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d432:	e023      	b.n	800d47c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	dc02      	bgt.n	800d446 <USBD_GetConfig+0x2e>
 800d440:	2b00      	cmp	r3, #0
 800d442:	dc03      	bgt.n	800d44c <USBD_GetConfig+0x34>
 800d444:	e015      	b.n	800d472 <USBD_GetConfig+0x5a>
 800d446:	2b03      	cmp	r3, #3
 800d448:	d00b      	beq.n	800d462 <USBD_GetConfig+0x4a>
 800d44a:	e012      	b.n	800d472 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3308      	adds	r3, #8
 800d456:	2201      	movs	r2, #1
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f948 	bl	800d6f0 <USBD_CtlSendData>
        break;
 800d460:	e00c      	b.n	800d47c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3304      	adds	r3, #4
 800d466:	2201      	movs	r2, #1
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f940 	bl	800d6f0 <USBD_CtlSendData>
        break;
 800d470:	e004      	b.n	800d47c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f8be 	bl	800d5f6 <USBD_CtlError>
        break;
 800d47a:	bf00      	nop
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d494:	b2db      	uxtb	r3, r3
 800d496:	3b01      	subs	r3, #1
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d81e      	bhi.n	800d4da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	88db      	ldrh	r3, [r3, #6]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d004      	beq.n	800d4ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4a4:	6839      	ldr	r1, [r7, #0]
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f8a5 	bl	800d5f6 <USBD_CtlError>
        break;
 800d4ac:	e01a      	b.n	800d4e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f043 0202 	orr.w	r2, r3, #2
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	330c      	adds	r3, #12
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f90c 	bl	800d6f0 <USBD_CtlSendData>
      break;
 800d4d8:	e004      	b.n	800d4e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f88a 	bl	800d5f6 <USBD_CtlError>
      break;
 800d4e2:	bf00      	nop
  }
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	885b      	ldrh	r3, [r3, #2]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d107      	bne.n	800d50e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f932 	bl	800d770 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d50c:	e013      	b.n	800d536 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	885b      	ldrh	r3, [r3, #2]
 800d512:	2b02      	cmp	r3, #2
 800d514:	d10b      	bne.n	800d52e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	889b      	ldrh	r3, [r3, #4]
 800d51a:	0a1b      	lsrs	r3, r3, #8
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f922 	bl	800d770 <USBD_CtlSendStatus>
}
 800d52c:	e003      	b.n	800d536 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f860 	bl	800d5f6 <USBD_CtlError>
}
 800d536:	bf00      	nop
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	3b01      	subs	r3, #1
 800d552:	2b02      	cmp	r3, #2
 800d554:	d80b      	bhi.n	800d56e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	885b      	ldrh	r3, [r3, #2]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d10c      	bne.n	800d578 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f902 	bl	800d770 <USBD_CtlSendStatus>
      }
      break;
 800d56c:	e004      	b.n	800d578 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f840 	bl	800d5f6 <USBD_CtlError>
      break;
 800d576:	e000      	b.n	800d57a <USBD_ClrFeature+0x3c>
      break;
 800d578:	bf00      	nop
  }
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	781a      	ldrb	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	3301      	adds	r3, #1
 800d59c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	781a      	ldrb	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff fa3d 	bl	800ca2c <SWAPBYTE>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fa30 	bl	800ca2c <SWAPBYTE>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff fa23 	bl	800ca2c <SWAPBYTE>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	80da      	strh	r2, [r3, #6]
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d600:	2180      	movs	r1, #128	@ 0x80
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fc12 	bl	800de2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d608:	2100      	movs	r1, #0
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fc0e 	bl	800de2c <USBD_LL_StallEP>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d042      	beq.n	800d6b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d632:	6938      	ldr	r0, [r7, #16]
 800d634:	f000 f842 	bl	800d6bc <USBD_GetLen>
 800d638:	4603      	mov	r3, r0
 800d63a:	3301      	adds	r3, #1
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d642:	d808      	bhi.n	800d656 <USBD_GetString+0x3e>
 800d644:	6938      	ldr	r0, [r7, #16]
 800d646:	f000 f839 	bl	800d6bc <USBD_GetLen>
 800d64a:	4603      	mov	r3, r0
 800d64c:	3301      	adds	r3, #1
 800d64e:	b29b      	uxth	r3, r3
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	b29a      	uxth	r2, r3
 800d654:	e001      	b.n	800d65a <USBD_GetString+0x42>
 800d656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	4413      	add	r3, r2
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	7812      	ldrb	r2, [r2, #0]
 800d668:	701a      	strb	r2, [r3, #0]
  idx++;
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	3301      	adds	r3, #1
 800d66e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	4413      	add	r3, r2
 800d676:	2203      	movs	r2, #3
 800d678:	701a      	strb	r2, [r3, #0]
  idx++;
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	3301      	adds	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d680:	e013      	b.n	800d6aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d682:	7dfb      	ldrb	r3, [r7, #23]
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	4413      	add	r3, r2
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	7812      	ldrb	r2, [r2, #0]
 800d68c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3301      	adds	r3, #1
 800d692:	613b      	str	r3, [r7, #16]
    idx++;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	3301      	adds	r3, #1
 800d698:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	4413      	add	r3, r2
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1e7      	bne.n	800d682 <USBD_GetString+0x6a>
 800d6b2:	e000      	b.n	800d6b6 <USBD_GetString+0x9e>
    return;
 800d6b4:	bf00      	nop
  }
}
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d6cc:	e005      	b.n	800d6da <USBD_GetLen+0x1e>
  {
    len++;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f5      	bne.n	800d6ce <USBD_GetLen+0x12>
  }

  return len;
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2202      	movs	r2, #2
 800d700:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	2100      	movs	r1, #0
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 fc0e 	bl	800df3e <USBD_LL_Transmit>

  return USBD_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	2100      	movs	r1, #0
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 fbfd 	bl	800df3e <USBD_LL_Transmit>

  return USBD_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	60f8      	str	r0, [r7, #12]
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	2100      	movs	r1, #0
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 fc0d 	bl	800df80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2204      	movs	r2, #4
 800d77c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d780:	2300      	movs	r3, #0
 800d782:	2200      	movs	r2, #0
 800d784:	2100      	movs	r1, #0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fbd9 	bl	800df3e <USBD_LL_Transmit>

  return USBD_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2205      	movs	r2, #5
 800d7a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fbe7 	bl	800df80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	490e      	ldr	r1, [pc, #56]	@ (800d7fc <MX_USB_DEVICE_Init+0x40>)
 800d7c4:	480e      	ldr	r0, [pc, #56]	@ (800d800 <MX_USB_DEVICE_Init+0x44>)
 800d7c6:	f7fe fcfb 	bl	800c1c0 <USBD_Init>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d7d0:	f7f3 fba2 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800d7d4:	490b      	ldr	r1, [pc, #44]	@ (800d804 <MX_USB_DEVICE_Init+0x48>)
 800d7d6:	480a      	ldr	r0, [pc, #40]	@ (800d800 <MX_USB_DEVICE_Init+0x44>)
 800d7d8:	f7fe fd22 	bl	800c220 <USBD_RegisterClass>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7e2:	f7f3 fb99 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d7e6:	4806      	ldr	r0, [pc, #24]	@ (800d800 <MX_USB_DEVICE_Init+0x44>)
 800d7e8:	f7fe fd50 	bl	800c28c <USBD_Start>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800d7f2:	f7f3 fb91 	bl	8000f18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7f6:	bf00      	nop
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000144 	.word	0x20000144
 800d800:	2000077c 	.word	0x2000077c
 800d804:	20000084 	.word	0x20000084

0800d808 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	4603      	mov	r3, r0
 800d810:	6039      	str	r1, [r7, #0]
 800d812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2212      	movs	r2, #18
 800d818:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d81a:	4b03      	ldr	r3, [pc, #12]	@ (800d828 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	20000160 	.word	0x20000160

0800d82c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	6039      	str	r1, [r7, #0]
 800d836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2204      	movs	r2, #4
 800d83c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d83e:	4b03      	ldr	r3, [pc, #12]	@ (800d84c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20000174 	.word	0x20000174

0800d850 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	6039      	str	r1, [r7, #0]
 800d85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d85c:	79fb      	ldrb	r3, [r7, #7]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d105      	bne.n	800d86e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	4907      	ldr	r1, [pc, #28]	@ (800d884 <USBD_HS_ProductStrDescriptor+0x34>)
 800d866:	4808      	ldr	r0, [pc, #32]	@ (800d888 <USBD_HS_ProductStrDescriptor+0x38>)
 800d868:	f7ff fed6 	bl	800d618 <USBD_GetString>
 800d86c:	e004      	b.n	800d878 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4904      	ldr	r1, [pc, #16]	@ (800d884 <USBD_HS_ProductStrDescriptor+0x34>)
 800d872:	4805      	ldr	r0, [pc, #20]	@ (800d888 <USBD_HS_ProductStrDescriptor+0x38>)
 800d874:	f7ff fed0 	bl	800d618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d878:	4b02      	ldr	r3, [pc, #8]	@ (800d884 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20000a58 	.word	0x20000a58
 800d888:	0800ea40 	.word	0x0800ea40

0800d88c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	6039      	str	r1, [r7, #0]
 800d896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	4904      	ldr	r1, [pc, #16]	@ (800d8ac <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d89c:	4804      	ldr	r0, [pc, #16]	@ (800d8b0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d89e:	f7ff febb 	bl	800d618 <USBD_GetString>
  return USBD_StrDesc;
 800d8a2:	4b02      	ldr	r3, [pc, #8]	@ (800d8ac <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20000a58 	.word	0x20000a58
 800d8b0:	0800ea58 	.word	0x0800ea58

0800d8b4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	6039      	str	r1, [r7, #0]
 800d8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	221a      	movs	r2, #26
 800d8c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8c6:	f000 f843 	bl	800d950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d8ca:	4b02      	ldr	r3, [pc, #8]	@ (800d8d4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20000178 	.word	0x20000178

0800d8d8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	4907      	ldr	r1, [pc, #28]	@ (800d90c <USBD_HS_ConfigStrDescriptor+0x34>)
 800d8ee:	4808      	ldr	r0, [pc, #32]	@ (800d910 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d8f0:	f7ff fe92 	bl	800d618 <USBD_GetString>
 800d8f4:	e004      	b.n	800d900 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	4904      	ldr	r1, [pc, #16]	@ (800d90c <USBD_HS_ConfigStrDescriptor+0x34>)
 800d8fa:	4805      	ldr	r0, [pc, #20]	@ (800d910 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d8fc:	f7ff fe8c 	bl	800d618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d900:	4b02      	ldr	r3, [pc, #8]	@ (800d90c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	20000a58 	.word	0x20000a58
 800d910:	0800ea6c 	.word	0x0800ea6c

0800d914 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	6039      	str	r1, [r7, #0]
 800d91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d105      	bne.n	800d932 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	4907      	ldr	r1, [pc, #28]	@ (800d948 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d92a:	4808      	ldr	r0, [pc, #32]	@ (800d94c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d92c:	f7ff fe74 	bl	800d618 <USBD_GetString>
 800d930:	e004      	b.n	800d93c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	4904      	ldr	r1, [pc, #16]	@ (800d948 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d936:	4805      	ldr	r0, [pc, #20]	@ (800d94c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d938:	f7ff fe6e 	bl	800d618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d93c:	4b02      	ldr	r3, [pc, #8]	@ (800d948 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000a58 	.word	0x20000a58
 800d94c:	0800ea78 	.word	0x0800ea78

0800d950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d956:	4b0f      	ldr	r3, [pc, #60]	@ (800d994 <Get_SerialNum+0x44>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d95c:	4b0e      	ldr	r3, [pc, #56]	@ (800d998 <Get_SerialNum+0x48>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d962:	4b0e      	ldr	r3, [pc, #56]	@ (800d99c <Get_SerialNum+0x4c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4413      	add	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d976:	2208      	movs	r2, #8
 800d978:	4909      	ldr	r1, [pc, #36]	@ (800d9a0 <Get_SerialNum+0x50>)
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f000 f814 	bl	800d9a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d980:	2204      	movs	r2, #4
 800d982:	4908      	ldr	r1, [pc, #32]	@ (800d9a4 <Get_SerialNum+0x54>)
 800d984:	68b8      	ldr	r0, [r7, #8]
 800d986:	f000 f80f 	bl	800d9a8 <IntToUnicode>
  }
}
 800d98a:	bf00      	nop
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	1fff7a10 	.word	0x1fff7a10
 800d998:	1fff7a14 	.word	0x1fff7a14
 800d99c:	1fff7a18 	.word	0x1fff7a18
 800d9a0:	2000017a 	.word	0x2000017a
 800d9a4:	2000018a 	.word	0x2000018a

0800d9a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	75fb      	strb	r3, [r7, #23]
 800d9be:	e027      	b.n	800da10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	0f1b      	lsrs	r3, r3, #28
 800d9c4:	2b09      	cmp	r3, #9
 800d9c6:	d80b      	bhi.n	800d9e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	0f1b      	lsrs	r3, r3, #28
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	440b      	add	r3, r1
 800d9d8:	3230      	adds	r2, #48	@ 0x30
 800d9da:	b2d2      	uxtb	r2, r2
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	e00a      	b.n	800d9f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	0f1b      	lsrs	r3, r3, #28
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	440b      	add	r3, r1
 800d9f0:	3237      	adds	r2, #55	@ 0x37
 800d9f2:	b2d2      	uxtb	r2, r2
 800d9f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	011b      	lsls	r3, r3, #4
 800d9fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	3301      	adds	r3, #1
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	4413      	add	r3, r2
 800da06:	2200      	movs	r2, #0
 800da08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
 800da0c:	3301      	adds	r3, #1
 800da0e:	75fb      	strb	r3, [r7, #23]
 800da10:	7dfa      	ldrb	r2, [r7, #23]
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	429a      	cmp	r2, r3
 800da16:	d3d3      	bcc.n	800d9c0 <IntToUnicode+0x18>
  }
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08a      	sub	sp, #40	@ 0x28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da30:	f107 0314 	add.w	r3, r7, #20
 800da34:	2200      	movs	r2, #0
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	605a      	str	r2, [r3, #4]
 800da3a:	609a      	str	r2, [r3, #8]
 800da3c:	60da      	str	r2, [r3, #12]
 800da3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a24      	ldr	r2, [pc, #144]	@ (800dad8 <HAL_PCD_MspInit+0xb0>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d141      	bne.n	800dace <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da4a:	2300      	movs	r3, #0
 800da4c:	613b      	str	r3, [r7, #16]
 800da4e:	4b23      	ldr	r3, [pc, #140]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800da50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da52:	4a22      	ldr	r2, [pc, #136]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800da54:	f043 0302 	orr.w	r3, r3, #2
 800da58:	6313      	str	r3, [r2, #48]	@ 0x30
 800da5a:	4b20      	ldr	r3, [pc, #128]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800da5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	613b      	str	r3, [r7, #16]
 800da64:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800da66:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800da6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da6c:	2302      	movs	r3, #2
 800da6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da70:	2300      	movs	r3, #0
 800da72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da74:	2300      	movs	r3, #0
 800da76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800da78:	230c      	movs	r3, #12
 800da7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800da7c:	f107 0314 	add.w	r3, r7, #20
 800da80:	4619      	mov	r1, r3
 800da82:	4817      	ldr	r0, [pc, #92]	@ (800dae0 <HAL_PCD_MspInit+0xb8>)
 800da84:	f7f6 fe18 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800da88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da8e:	2300      	movs	r3, #0
 800da90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da92:	2300      	movs	r3, #0
 800da94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800da96:	f107 0314 	add.w	r3, r7, #20
 800da9a:	4619      	mov	r1, r3
 800da9c:	4810      	ldr	r0, [pc, #64]	@ (800dae0 <HAL_PCD_MspInit+0xb8>)
 800da9e:	f7f6 fe0b 	bl	80046b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800daa2:	2300      	movs	r3, #0
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	4b0d      	ldr	r3, [pc, #52]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800daa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daaa:	4a0c      	ldr	r2, [pc, #48]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800daac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dab0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dab2:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <HAL_PCD_MspInit+0xb4>)
 800dab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daba:	60fb      	str	r3, [r7, #12]
 800dabc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dabe:	2200      	movs	r2, #0
 800dac0:	2100      	movs	r1, #0
 800dac2:	204d      	movs	r0, #77	@ 0x4d
 800dac4:	f7f6 f874 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dac8:	204d      	movs	r0, #77	@ 0x4d
 800daca:	f7f6 f88d 	bl	8003be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dace:	bf00      	nop
 800dad0:	3728      	adds	r7, #40	@ 0x28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	40040000 	.word	0x40040000
 800dadc:	40023800 	.word	0x40023800
 800dae0:	40020400 	.word	0x40020400

0800dae4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800daf8:	4619      	mov	r1, r3
 800dafa:	4610      	mov	r0, r2
 800dafc:	f7fe fc13 	bl	800c326 <USBD_LL_SetupStage>
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800db1a:	78fa      	ldrb	r2, [r7, #3]
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	4613      	mov	r3, r2
 800db20:	00db      	lsls	r3, r3, #3
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	78fb      	ldrb	r3, [r7, #3]
 800db30:	4619      	mov	r1, r3
 800db32:	f7fe fc4d 	bl	800c3d0 <USBD_LL_DataOutStage>
}
 800db36:	bf00      	nop
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	460b      	mov	r3, r1
 800db48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800db50:	78fa      	ldrb	r2, [r7, #3]
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	4613      	mov	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	4413      	add	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	440b      	add	r3, r1
 800db5e:	3320      	adds	r3, #32
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	78fb      	ldrb	r3, [r7, #3]
 800db64:	4619      	mov	r1, r3
 800db66:	f7fe fcef 	bl	800c548 <USBD_LL_DataInStage>
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b082      	sub	sp, #8
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fe33 	bl	800c7ec <USBD_LL_SOF>
}
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b084      	sub	sp, #16
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db96:	2301      	movs	r3, #1
 800db98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	79db      	ldrb	r3, [r3, #7]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dba2:	2300      	movs	r3, #0
 800dba4:	73fb      	strb	r3, [r7, #15]
 800dba6:	e008      	b.n	800dbba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	79db      	ldrb	r3, [r3, #7]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d102      	bne.n	800dbb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	73fb      	strb	r3, [r7, #15]
 800dbb4:	e001      	b.n	800dbba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dbb6:	f7f3 f9af 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbc0:	7bfa      	ldrb	r2, [r7, #15]
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fdcd 	bl	800c764 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe fd74 	bl	800c6be <USBD_LL_Reset>
}
 800dbd6:	bf00      	nop
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fdc8 	bl	800c784 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6812      	ldr	r2, [r2, #0]
 800dc02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc06:	f043 0301 	orr.w	r3, r3, #1
 800dc0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7adb      	ldrb	r3, [r3, #11]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d005      	beq.n	800dc20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc14:	4b04      	ldr	r3, [pc, #16]	@ (800dc28 <HAL_PCD_SuspendCallback+0x48>)
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	4a03      	ldr	r2, [pc, #12]	@ (800dc28 <HAL_PCD_SuspendCallback+0x48>)
 800dc1a:	f043 0306 	orr.w	r3, r3, #6
 800dc1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	e000ed00 	.word	0xe000ed00

0800dc2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe fdbe 	bl	800c7bc <USBD_LL_Resume>
}
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	460b      	mov	r3, r1
 800dc52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc5a:	78fa      	ldrb	r2, [r7, #3]
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fe fe16 	bl	800c890 <USBD_LL_IsoOUTIncomplete>
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc7e:	78fa      	ldrb	r2, [r7, #3]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fdd2 	bl	800c82c <USBD_LL_IsoINIncomplete>
}
 800dc88:	bf00      	nop
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fe28 	bl	800c8f4 <USBD_LL_DevConnected>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fe25 	bl	800c90a <USBD_LL_DevDisconnected>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d140      	bne.n	800dd5a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800dcd8:	4a22      	ldr	r2, [pc, #136]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a20      	ldr	r2, [pc, #128]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dce4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dce8:	4b1e      	ldr	r3, [pc, #120]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dcea:	4a1f      	ldr	r2, [pc, #124]	@ (800dd68 <USBD_LL_Init+0xa0>)
 800dcec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800dcee:	4b1d      	ldr	r3, [pc, #116]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dcf0:	2206      	movs	r2, #6
 800dcf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800dcf4:	4b1b      	ldr	r3, [pc, #108]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dcfa:	4b1a      	ldr	r3, [pc, #104]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dd00:	4b18      	ldr	r3, [pc, #96]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd02:	2202      	movs	r2, #2
 800dd04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd06:	4b17      	ldr	r3, [pc, #92]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd0c:	4b15      	ldr	r3, [pc, #84]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800dd12:	4b14      	ldr	r3, [pc, #80]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800dd18:	4b12      	ldr	r3, [pc, #72]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800dd1e:	4b11      	ldr	r3, [pc, #68]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd24:	4b0f      	ldr	r3, [pc, #60]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800dd2a:	480e      	ldr	r0, [pc, #56]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd2c:	f7f8 fbad 	bl	800648a <HAL_PCD_Init>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dd36:	f7f3 f8ef 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dd3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dd3e:	4809      	ldr	r0, [pc, #36]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd40:	f7f9 fdc1 	bl	80078c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800dd44:	2280      	movs	r2, #128	@ 0x80
 800dd46:	2100      	movs	r1, #0
 800dd48:	4806      	ldr	r0, [pc, #24]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd4a:	f7f9 fd75 	bl	8007838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dd4e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800dd52:	2101      	movs	r1, #1
 800dd54:	4803      	ldr	r0, [pc, #12]	@ (800dd64 <USBD_LL_Init+0x9c>)
 800dd56:	f7f9 fd6f 	bl	8007838 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd5a:	2300      	movs	r3, #0
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	20000c58 	.word	0x20000c58
 800dd68:	40040000 	.word	0x40040000

0800dd6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7f8 fc90 	bl	80066a8 <HAL_PCD_Start>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f930 	bl	800dff4 <USBD_Get_USB_Status>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	4608      	mov	r0, r1
 800ddac:	4611      	mov	r1, r2
 800ddae:	461a      	mov	r2, r3
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	70fb      	strb	r3, [r7, #3]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70bb      	strb	r3, [r7, #2]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ddca:	78bb      	ldrb	r3, [r7, #2]
 800ddcc:	883a      	ldrh	r2, [r7, #0]
 800ddce:	78f9      	ldrb	r1, [r7, #3]
 800ddd0:	f7f9 f964 	bl	800709c <HAL_PCD_EP_Open>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd8:	7bfb      	ldrb	r3, [r7, #15]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 f90a 	bl	800dff4 <USBD_Get_USB_Status>
 800dde0:	4603      	mov	r3, r0
 800dde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b084      	sub	sp, #16
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de08:	78fa      	ldrb	r2, [r7, #3]
 800de0a:	4611      	mov	r1, r2
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7f9 f9af 	bl	8007170 <HAL_PCD_EP_Close>
 800de12:	4603      	mov	r3, r0
 800de14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	4618      	mov	r0, r3
 800de1a:	f000 f8eb 	bl	800dff4 <USBD_Get_USB_Status>
 800de1e:	4603      	mov	r3, r0
 800de20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de22:	7bbb      	ldrb	r3, [r7, #14]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	460b      	mov	r3, r1
 800de36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de46:	78fa      	ldrb	r2, [r7, #3]
 800de48:	4611      	mov	r1, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f9 fa4f 	bl	80072ee <HAL_PCD_EP_SetStall>
 800de50:	4603      	mov	r3, r0
 800de52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 f8cc 	bl	800dff4 <USBD_Get_USB_Status>
 800de5c:	4603      	mov	r3, r0
 800de5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de60:	7bbb      	ldrb	r3, [r7, #14]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	460b      	mov	r3, r1
 800de74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de84:	78fa      	ldrb	r2, [r7, #3]
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7f9 fa93 	bl	80073b4 <HAL_PCD_EP_ClrStall>
 800de8e:	4603      	mov	r3, r0
 800de90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	4618      	mov	r0, r3
 800de96:	f000 f8ad 	bl	800dff4 <USBD_Get_USB_Status>
 800de9a:	4603      	mov	r3, r0
 800de9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	460b      	mov	r3, r1
 800deb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800deba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800debc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da0b      	bge.n	800dedc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dec4:	78fb      	ldrb	r3, [r7, #3]
 800dec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800deca:	68f9      	ldr	r1, [r7, #12]
 800decc:	4613      	mov	r3, r2
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	4413      	add	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	440b      	add	r3, r1
 800ded6:	3316      	adds	r3, #22
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	e00b      	b.n	800def4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dedc:	78fb      	ldrb	r3, [r7, #3]
 800dede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dee2:	68f9      	ldr	r1, [r7, #12]
 800dee4:	4613      	mov	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	4413      	add	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	440b      	add	r3, r1
 800deee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800def2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df10:	2300      	movs	r3, #0
 800df12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df1a:	78fa      	ldrb	r2, [r7, #3]
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f9 f898 	bl	8007054 <HAL_PCD_SetAddress>
 800df24:	4603      	mov	r3, r0
 800df26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df28:	7bfb      	ldrb	r3, [r7, #15]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f000 f862 	bl	800dff4 <USBD_Get_USB_Status>
 800df30:	4603      	mov	r3, r0
 800df32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df34:	7bbb      	ldrb	r3, [r7, #14]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b086      	sub	sp, #24
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
 800df4a:	460b      	mov	r3, r1
 800df4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df5c:	7af9      	ldrb	r1, [r7, #11]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	f7f9 f98a 	bl	800727a <HAL_PCD_EP_Transmit>
 800df66:	4603      	mov	r3, r0
 800df68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 f841 	bl	800dff4 <USBD_Get_USB_Status>
 800df72:	4603      	mov	r3, r0
 800df74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df76:	7dbb      	ldrb	r3, [r7, #22]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3718      	adds	r7, #24
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b086      	sub	sp, #24
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	460b      	mov	r3, r1
 800df8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df90:	2300      	movs	r3, #0
 800df92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df9e:	7af9      	ldrb	r1, [r7, #11]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	f7f9 f92e 	bl	8007204 <HAL_PCD_EP_Receive>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 f820 	bl	800dff4 <USBD_Get_USB_Status>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfcc:	4b03      	ldr	r3, [pc, #12]	@ (800dfdc <USBD_static_malloc+0x18>)
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	2000113c 	.word	0x2000113c

0800dfe0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d817      	bhi.n	800e038 <USBD_Get_USB_Status+0x44>
 800e008:	a201      	add	r2, pc, #4	@ (adr r2, 800e010 <USBD_Get_USB_Status+0x1c>)
 800e00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00e:	bf00      	nop
 800e010:	0800e021 	.word	0x0800e021
 800e014:	0800e027 	.word	0x0800e027
 800e018:	0800e02d 	.word	0x0800e02d
 800e01c:	0800e033 	.word	0x0800e033
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
    break;
 800e024:	e00b      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e026:	2303      	movs	r3, #3
 800e028:	73fb      	strb	r3, [r7, #15]
    break;
 800e02a:	e008      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e02c:	2301      	movs	r3, #1
 800e02e:	73fb      	strb	r3, [r7, #15]
    break;
 800e030:	e005      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e032:	2303      	movs	r3, #3
 800e034:	73fb      	strb	r3, [r7, #15]
    break;
 800e036:	e002      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	73fb      	strb	r3, [r7, #15]
    break;
 800e03c:	bf00      	nop
  }
  return usb_status;
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <siprintf>:
 800e04c:	b40e      	push	{r1, r2, r3}
 800e04e:	b510      	push	{r4, lr}
 800e050:	b09d      	sub	sp, #116	@ 0x74
 800e052:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e054:	9002      	str	r0, [sp, #8]
 800e056:	9006      	str	r0, [sp, #24]
 800e058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e05c:	480a      	ldr	r0, [pc, #40]	@ (800e088 <siprintf+0x3c>)
 800e05e:	9107      	str	r1, [sp, #28]
 800e060:	9104      	str	r1, [sp, #16]
 800e062:	490a      	ldr	r1, [pc, #40]	@ (800e08c <siprintf+0x40>)
 800e064:	f853 2b04 	ldr.w	r2, [r3], #4
 800e068:	9105      	str	r1, [sp, #20]
 800e06a:	2400      	movs	r4, #0
 800e06c:	a902      	add	r1, sp, #8
 800e06e:	6800      	ldr	r0, [r0, #0]
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e074:	f000 f994 	bl	800e3a0 <_svfiprintf_r>
 800e078:	9b02      	ldr	r3, [sp, #8]
 800e07a:	701c      	strb	r4, [r3, #0]
 800e07c:	b01d      	add	sp, #116	@ 0x74
 800e07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e082:	b003      	add	sp, #12
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	20000194 	.word	0x20000194
 800e08c:	ffff0208 	.word	0xffff0208

0800e090 <memset>:
 800e090:	4402      	add	r2, r0
 800e092:	4603      	mov	r3, r0
 800e094:	4293      	cmp	r3, r2
 800e096:	d100      	bne.n	800e09a <memset+0xa>
 800e098:	4770      	bx	lr
 800e09a:	f803 1b01 	strb.w	r1, [r3], #1
 800e09e:	e7f9      	b.n	800e094 <memset+0x4>

0800e0a0 <__errno>:
 800e0a0:	4b01      	ldr	r3, [pc, #4]	@ (800e0a8 <__errno+0x8>)
 800e0a2:	6818      	ldr	r0, [r3, #0]
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	20000194 	.word	0x20000194

0800e0ac <__libc_init_array>:
 800e0ac:	b570      	push	{r4, r5, r6, lr}
 800e0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e0e4 <__libc_init_array+0x38>)
 800e0b0:	4c0d      	ldr	r4, [pc, #52]	@ (800e0e8 <__libc_init_array+0x3c>)
 800e0b2:	1b64      	subs	r4, r4, r5
 800e0b4:	10a4      	asrs	r4, r4, #2
 800e0b6:	2600      	movs	r6, #0
 800e0b8:	42a6      	cmp	r6, r4
 800e0ba:	d109      	bne.n	800e0d0 <__libc_init_array+0x24>
 800e0bc:	4d0b      	ldr	r5, [pc, #44]	@ (800e0ec <__libc_init_array+0x40>)
 800e0be:	4c0c      	ldr	r4, [pc, #48]	@ (800e0f0 <__libc_init_array+0x44>)
 800e0c0:	f000 fc64 	bl	800e98c <_init>
 800e0c4:	1b64      	subs	r4, r4, r5
 800e0c6:	10a4      	asrs	r4, r4, #2
 800e0c8:	2600      	movs	r6, #0
 800e0ca:	42a6      	cmp	r6, r4
 800e0cc:	d105      	bne.n	800e0da <__libc_init_array+0x2e>
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0d4:	4798      	blx	r3
 800e0d6:	3601      	adds	r6, #1
 800e0d8:	e7ee      	b.n	800e0b8 <__libc_init_array+0xc>
 800e0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0de:	4798      	blx	r3
 800e0e0:	3601      	adds	r6, #1
 800e0e2:	e7f2      	b.n	800e0ca <__libc_init_array+0x1e>
 800e0e4:	0801059c 	.word	0x0801059c
 800e0e8:	0801059c 	.word	0x0801059c
 800e0ec:	0801059c 	.word	0x0801059c
 800e0f0:	080105a0 	.word	0x080105a0

0800e0f4 <__retarget_lock_acquire_recursive>:
 800e0f4:	4770      	bx	lr

0800e0f6 <__retarget_lock_release_recursive>:
 800e0f6:	4770      	bx	lr

0800e0f8 <_free_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	2900      	cmp	r1, #0
 800e0fe:	d041      	beq.n	800e184 <_free_r+0x8c>
 800e100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e104:	1f0c      	subs	r4, r1, #4
 800e106:	2b00      	cmp	r3, #0
 800e108:	bfb8      	it	lt
 800e10a:	18e4      	addlt	r4, r4, r3
 800e10c:	f000 f8e0 	bl	800e2d0 <__malloc_lock>
 800e110:	4a1d      	ldr	r2, [pc, #116]	@ (800e188 <_free_r+0x90>)
 800e112:	6813      	ldr	r3, [r2, #0]
 800e114:	b933      	cbnz	r3, 800e124 <_free_r+0x2c>
 800e116:	6063      	str	r3, [r4, #4]
 800e118:	6014      	str	r4, [r2, #0]
 800e11a:	4628      	mov	r0, r5
 800e11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e120:	f000 b8dc 	b.w	800e2dc <__malloc_unlock>
 800e124:	42a3      	cmp	r3, r4
 800e126:	d908      	bls.n	800e13a <_free_r+0x42>
 800e128:	6820      	ldr	r0, [r4, #0]
 800e12a:	1821      	adds	r1, r4, r0
 800e12c:	428b      	cmp	r3, r1
 800e12e:	bf01      	itttt	eq
 800e130:	6819      	ldreq	r1, [r3, #0]
 800e132:	685b      	ldreq	r3, [r3, #4]
 800e134:	1809      	addeq	r1, r1, r0
 800e136:	6021      	streq	r1, [r4, #0]
 800e138:	e7ed      	b.n	800e116 <_free_r+0x1e>
 800e13a:	461a      	mov	r2, r3
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	b10b      	cbz	r3, 800e144 <_free_r+0x4c>
 800e140:	42a3      	cmp	r3, r4
 800e142:	d9fa      	bls.n	800e13a <_free_r+0x42>
 800e144:	6811      	ldr	r1, [r2, #0]
 800e146:	1850      	adds	r0, r2, r1
 800e148:	42a0      	cmp	r0, r4
 800e14a:	d10b      	bne.n	800e164 <_free_r+0x6c>
 800e14c:	6820      	ldr	r0, [r4, #0]
 800e14e:	4401      	add	r1, r0
 800e150:	1850      	adds	r0, r2, r1
 800e152:	4283      	cmp	r3, r0
 800e154:	6011      	str	r1, [r2, #0]
 800e156:	d1e0      	bne.n	800e11a <_free_r+0x22>
 800e158:	6818      	ldr	r0, [r3, #0]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	6053      	str	r3, [r2, #4]
 800e15e:	4408      	add	r0, r1
 800e160:	6010      	str	r0, [r2, #0]
 800e162:	e7da      	b.n	800e11a <_free_r+0x22>
 800e164:	d902      	bls.n	800e16c <_free_r+0x74>
 800e166:	230c      	movs	r3, #12
 800e168:	602b      	str	r3, [r5, #0]
 800e16a:	e7d6      	b.n	800e11a <_free_r+0x22>
 800e16c:	6820      	ldr	r0, [r4, #0]
 800e16e:	1821      	adds	r1, r4, r0
 800e170:	428b      	cmp	r3, r1
 800e172:	bf04      	itt	eq
 800e174:	6819      	ldreq	r1, [r3, #0]
 800e176:	685b      	ldreq	r3, [r3, #4]
 800e178:	6063      	str	r3, [r4, #4]
 800e17a:	bf04      	itt	eq
 800e17c:	1809      	addeq	r1, r1, r0
 800e17e:	6021      	streq	r1, [r4, #0]
 800e180:	6054      	str	r4, [r2, #4]
 800e182:	e7ca      	b.n	800e11a <_free_r+0x22>
 800e184:	bd38      	pop	{r3, r4, r5, pc}
 800e186:	bf00      	nop
 800e188:	20001294 	.word	0x20001294

0800e18c <sbrk_aligned>:
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	4e0f      	ldr	r6, [pc, #60]	@ (800e1cc <sbrk_aligned+0x40>)
 800e190:	460c      	mov	r4, r1
 800e192:	6831      	ldr	r1, [r6, #0]
 800e194:	4605      	mov	r5, r0
 800e196:	b911      	cbnz	r1, 800e19e <sbrk_aligned+0x12>
 800e198:	f000 fba4 	bl	800e8e4 <_sbrk_r>
 800e19c:	6030      	str	r0, [r6, #0]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f000 fb9f 	bl	800e8e4 <_sbrk_r>
 800e1a6:	1c43      	adds	r3, r0, #1
 800e1a8:	d103      	bne.n	800e1b2 <sbrk_aligned+0x26>
 800e1aa:	f04f 34ff 	mov.w	r4, #4294967295
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	bd70      	pop	{r4, r5, r6, pc}
 800e1b2:	1cc4      	adds	r4, r0, #3
 800e1b4:	f024 0403 	bic.w	r4, r4, #3
 800e1b8:	42a0      	cmp	r0, r4
 800e1ba:	d0f8      	beq.n	800e1ae <sbrk_aligned+0x22>
 800e1bc:	1a21      	subs	r1, r4, r0
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 fb90 	bl	800e8e4 <_sbrk_r>
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	d1f2      	bne.n	800e1ae <sbrk_aligned+0x22>
 800e1c8:	e7ef      	b.n	800e1aa <sbrk_aligned+0x1e>
 800e1ca:	bf00      	nop
 800e1cc:	20001290 	.word	0x20001290

0800e1d0 <_malloc_r>:
 800e1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d4:	1ccd      	adds	r5, r1, #3
 800e1d6:	f025 0503 	bic.w	r5, r5, #3
 800e1da:	3508      	adds	r5, #8
 800e1dc:	2d0c      	cmp	r5, #12
 800e1de:	bf38      	it	cc
 800e1e0:	250c      	movcc	r5, #12
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	db01      	blt.n	800e1ec <_malloc_r+0x1c>
 800e1e8:	42a9      	cmp	r1, r5
 800e1ea:	d904      	bls.n	800e1f6 <_malloc_r+0x26>
 800e1ec:	230c      	movs	r3, #12
 800e1ee:	6033      	str	r3, [r6, #0]
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2cc <_malloc_r+0xfc>
 800e1fa:	f000 f869 	bl	800e2d0 <__malloc_lock>
 800e1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e202:	461c      	mov	r4, r3
 800e204:	bb44      	cbnz	r4, 800e258 <_malloc_r+0x88>
 800e206:	4629      	mov	r1, r5
 800e208:	4630      	mov	r0, r6
 800e20a:	f7ff ffbf 	bl	800e18c <sbrk_aligned>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	4604      	mov	r4, r0
 800e212:	d158      	bne.n	800e2c6 <_malloc_r+0xf6>
 800e214:	f8d8 4000 	ldr.w	r4, [r8]
 800e218:	4627      	mov	r7, r4
 800e21a:	2f00      	cmp	r7, #0
 800e21c:	d143      	bne.n	800e2a6 <_malloc_r+0xd6>
 800e21e:	2c00      	cmp	r4, #0
 800e220:	d04b      	beq.n	800e2ba <_malloc_r+0xea>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	4639      	mov	r1, r7
 800e226:	4630      	mov	r0, r6
 800e228:	eb04 0903 	add.w	r9, r4, r3
 800e22c:	f000 fb5a 	bl	800e8e4 <_sbrk_r>
 800e230:	4581      	cmp	r9, r0
 800e232:	d142      	bne.n	800e2ba <_malloc_r+0xea>
 800e234:	6821      	ldr	r1, [r4, #0]
 800e236:	1a6d      	subs	r5, r5, r1
 800e238:	4629      	mov	r1, r5
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7ff ffa6 	bl	800e18c <sbrk_aligned>
 800e240:	3001      	adds	r0, #1
 800e242:	d03a      	beq.n	800e2ba <_malloc_r+0xea>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	442b      	add	r3, r5
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	f8d8 3000 	ldr.w	r3, [r8]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	bb62      	cbnz	r2, 800e2ac <_malloc_r+0xdc>
 800e252:	f8c8 7000 	str.w	r7, [r8]
 800e256:	e00f      	b.n	800e278 <_malloc_r+0xa8>
 800e258:	6822      	ldr	r2, [r4, #0]
 800e25a:	1b52      	subs	r2, r2, r5
 800e25c:	d420      	bmi.n	800e2a0 <_malloc_r+0xd0>
 800e25e:	2a0b      	cmp	r2, #11
 800e260:	d917      	bls.n	800e292 <_malloc_r+0xc2>
 800e262:	1961      	adds	r1, r4, r5
 800e264:	42a3      	cmp	r3, r4
 800e266:	6025      	str	r5, [r4, #0]
 800e268:	bf18      	it	ne
 800e26a:	6059      	strne	r1, [r3, #4]
 800e26c:	6863      	ldr	r3, [r4, #4]
 800e26e:	bf08      	it	eq
 800e270:	f8c8 1000 	streq.w	r1, [r8]
 800e274:	5162      	str	r2, [r4, r5]
 800e276:	604b      	str	r3, [r1, #4]
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 f82f 	bl	800e2dc <__malloc_unlock>
 800e27e:	f104 000b 	add.w	r0, r4, #11
 800e282:	1d23      	adds	r3, r4, #4
 800e284:	f020 0007 	bic.w	r0, r0, #7
 800e288:	1ac2      	subs	r2, r0, r3
 800e28a:	bf1c      	itt	ne
 800e28c:	1a1b      	subne	r3, r3, r0
 800e28e:	50a3      	strne	r3, [r4, r2]
 800e290:	e7af      	b.n	800e1f2 <_malloc_r+0x22>
 800e292:	6862      	ldr	r2, [r4, #4]
 800e294:	42a3      	cmp	r3, r4
 800e296:	bf0c      	ite	eq
 800e298:	f8c8 2000 	streq.w	r2, [r8]
 800e29c:	605a      	strne	r2, [r3, #4]
 800e29e:	e7eb      	b.n	800e278 <_malloc_r+0xa8>
 800e2a0:	4623      	mov	r3, r4
 800e2a2:	6864      	ldr	r4, [r4, #4]
 800e2a4:	e7ae      	b.n	800e204 <_malloc_r+0x34>
 800e2a6:	463c      	mov	r4, r7
 800e2a8:	687f      	ldr	r7, [r7, #4]
 800e2aa:	e7b6      	b.n	800e21a <_malloc_r+0x4a>
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	42a3      	cmp	r3, r4
 800e2b2:	d1fb      	bne.n	800e2ac <_malloc_r+0xdc>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	6053      	str	r3, [r2, #4]
 800e2b8:	e7de      	b.n	800e278 <_malloc_r+0xa8>
 800e2ba:	230c      	movs	r3, #12
 800e2bc:	6033      	str	r3, [r6, #0]
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f000 f80c 	bl	800e2dc <__malloc_unlock>
 800e2c4:	e794      	b.n	800e1f0 <_malloc_r+0x20>
 800e2c6:	6005      	str	r5, [r0, #0]
 800e2c8:	e7d6      	b.n	800e278 <_malloc_r+0xa8>
 800e2ca:	bf00      	nop
 800e2cc:	20001294 	.word	0x20001294

0800e2d0 <__malloc_lock>:
 800e2d0:	4801      	ldr	r0, [pc, #4]	@ (800e2d8 <__malloc_lock+0x8>)
 800e2d2:	f7ff bf0f 	b.w	800e0f4 <__retarget_lock_acquire_recursive>
 800e2d6:	bf00      	nop
 800e2d8:	2000128c 	.word	0x2000128c

0800e2dc <__malloc_unlock>:
 800e2dc:	4801      	ldr	r0, [pc, #4]	@ (800e2e4 <__malloc_unlock+0x8>)
 800e2de:	f7ff bf0a 	b.w	800e0f6 <__retarget_lock_release_recursive>
 800e2e2:	bf00      	nop
 800e2e4:	2000128c 	.word	0x2000128c

0800e2e8 <__ssputs_r>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	688e      	ldr	r6, [r1, #8]
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	42be      	cmp	r6, r7
 800e2f2:	680b      	ldr	r3, [r1, #0]
 800e2f4:	4682      	mov	sl, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	4690      	mov	r8, r2
 800e2fa:	d82d      	bhi.n	800e358 <__ssputs_r+0x70>
 800e2fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e304:	d026      	beq.n	800e354 <__ssputs_r+0x6c>
 800e306:	6965      	ldr	r5, [r4, #20]
 800e308:	6909      	ldr	r1, [r1, #16]
 800e30a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e30e:	eba3 0901 	sub.w	r9, r3, r1
 800e312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e316:	1c7b      	adds	r3, r7, #1
 800e318:	444b      	add	r3, r9
 800e31a:	106d      	asrs	r5, r5, #1
 800e31c:	429d      	cmp	r5, r3
 800e31e:	bf38      	it	cc
 800e320:	461d      	movcc	r5, r3
 800e322:	0553      	lsls	r3, r2, #21
 800e324:	d527      	bpl.n	800e376 <__ssputs_r+0x8e>
 800e326:	4629      	mov	r1, r5
 800e328:	f7ff ff52 	bl	800e1d0 <_malloc_r>
 800e32c:	4606      	mov	r6, r0
 800e32e:	b360      	cbz	r0, 800e38a <__ssputs_r+0xa2>
 800e330:	6921      	ldr	r1, [r4, #16]
 800e332:	464a      	mov	r2, r9
 800e334:	f000 fae6 	bl	800e904 <memcpy>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	6126      	str	r6, [r4, #16]
 800e346:	6165      	str	r5, [r4, #20]
 800e348:	444e      	add	r6, r9
 800e34a:	eba5 0509 	sub.w	r5, r5, r9
 800e34e:	6026      	str	r6, [r4, #0]
 800e350:	60a5      	str	r5, [r4, #8]
 800e352:	463e      	mov	r6, r7
 800e354:	42be      	cmp	r6, r7
 800e356:	d900      	bls.n	800e35a <__ssputs_r+0x72>
 800e358:	463e      	mov	r6, r7
 800e35a:	6820      	ldr	r0, [r4, #0]
 800e35c:	4632      	mov	r2, r6
 800e35e:	4641      	mov	r1, r8
 800e360:	f000 faa6 	bl	800e8b0 <memmove>
 800e364:	68a3      	ldr	r3, [r4, #8]
 800e366:	1b9b      	subs	r3, r3, r6
 800e368:	60a3      	str	r3, [r4, #8]
 800e36a:	6823      	ldr	r3, [r4, #0]
 800e36c:	4433      	add	r3, r6
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	2000      	movs	r0, #0
 800e372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e376:	462a      	mov	r2, r5
 800e378:	f000 fad2 	bl	800e920 <_realloc_r>
 800e37c:	4606      	mov	r6, r0
 800e37e:	2800      	cmp	r0, #0
 800e380:	d1e0      	bne.n	800e344 <__ssputs_r+0x5c>
 800e382:	6921      	ldr	r1, [r4, #16]
 800e384:	4650      	mov	r0, sl
 800e386:	f7ff feb7 	bl	800e0f8 <_free_r>
 800e38a:	230c      	movs	r3, #12
 800e38c:	f8ca 3000 	str.w	r3, [sl]
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e396:	81a3      	strh	r3, [r4, #12]
 800e398:	f04f 30ff 	mov.w	r0, #4294967295
 800e39c:	e7e9      	b.n	800e372 <__ssputs_r+0x8a>
	...

0800e3a0 <_svfiprintf_r>:
 800e3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a4:	4698      	mov	r8, r3
 800e3a6:	898b      	ldrh	r3, [r1, #12]
 800e3a8:	061b      	lsls	r3, r3, #24
 800e3aa:	b09d      	sub	sp, #116	@ 0x74
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	d510      	bpl.n	800e3d6 <_svfiprintf_r+0x36>
 800e3b4:	690b      	ldr	r3, [r1, #16]
 800e3b6:	b973      	cbnz	r3, 800e3d6 <_svfiprintf_r+0x36>
 800e3b8:	2140      	movs	r1, #64	@ 0x40
 800e3ba:	f7ff ff09 	bl	800e1d0 <_malloc_r>
 800e3be:	6028      	str	r0, [r5, #0]
 800e3c0:	6128      	str	r0, [r5, #16]
 800e3c2:	b930      	cbnz	r0, 800e3d2 <_svfiprintf_r+0x32>
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	603b      	str	r3, [r7, #0]
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3cc:	b01d      	add	sp, #116	@ 0x74
 800e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d2:	2340      	movs	r3, #64	@ 0x40
 800e3d4:	616b      	str	r3, [r5, #20]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3da:	2320      	movs	r3, #32
 800e3dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3e4:	2330      	movs	r3, #48	@ 0x30
 800e3e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e584 <_svfiprintf_r+0x1e4>
 800e3ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3ee:	f04f 0901 	mov.w	r9, #1
 800e3f2:	4623      	mov	r3, r4
 800e3f4:	469a      	mov	sl, r3
 800e3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3fa:	b10a      	cbz	r2, 800e400 <_svfiprintf_r+0x60>
 800e3fc:	2a25      	cmp	r2, #37	@ 0x25
 800e3fe:	d1f9      	bne.n	800e3f4 <_svfiprintf_r+0x54>
 800e400:	ebba 0b04 	subs.w	fp, sl, r4
 800e404:	d00b      	beq.n	800e41e <_svfiprintf_r+0x7e>
 800e406:	465b      	mov	r3, fp
 800e408:	4622      	mov	r2, r4
 800e40a:	4629      	mov	r1, r5
 800e40c:	4638      	mov	r0, r7
 800e40e:	f7ff ff6b 	bl	800e2e8 <__ssputs_r>
 800e412:	3001      	adds	r0, #1
 800e414:	f000 80a7 	beq.w	800e566 <_svfiprintf_r+0x1c6>
 800e418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e41a:	445a      	add	r2, fp
 800e41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e41e:	f89a 3000 	ldrb.w	r3, [sl]
 800e422:	2b00      	cmp	r3, #0
 800e424:	f000 809f 	beq.w	800e566 <_svfiprintf_r+0x1c6>
 800e428:	2300      	movs	r3, #0
 800e42a:	f04f 32ff 	mov.w	r2, #4294967295
 800e42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e432:	f10a 0a01 	add.w	sl, sl, #1
 800e436:	9304      	str	r3, [sp, #16]
 800e438:	9307      	str	r3, [sp, #28]
 800e43a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e43e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e440:	4654      	mov	r4, sl
 800e442:	2205      	movs	r2, #5
 800e444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e448:	484e      	ldr	r0, [pc, #312]	@ (800e584 <_svfiprintf_r+0x1e4>)
 800e44a:	f7f1 fed9 	bl	8000200 <memchr>
 800e44e:	9a04      	ldr	r2, [sp, #16]
 800e450:	b9d8      	cbnz	r0, 800e48a <_svfiprintf_r+0xea>
 800e452:	06d0      	lsls	r0, r2, #27
 800e454:	bf44      	itt	mi
 800e456:	2320      	movmi	r3, #32
 800e458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e45c:	0711      	lsls	r1, r2, #28
 800e45e:	bf44      	itt	mi
 800e460:	232b      	movmi	r3, #43	@ 0x2b
 800e462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e466:	f89a 3000 	ldrb.w	r3, [sl]
 800e46a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e46c:	d015      	beq.n	800e49a <_svfiprintf_r+0xfa>
 800e46e:	9a07      	ldr	r2, [sp, #28]
 800e470:	4654      	mov	r4, sl
 800e472:	2000      	movs	r0, #0
 800e474:	f04f 0c0a 	mov.w	ip, #10
 800e478:	4621      	mov	r1, r4
 800e47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e47e:	3b30      	subs	r3, #48	@ 0x30
 800e480:	2b09      	cmp	r3, #9
 800e482:	d94b      	bls.n	800e51c <_svfiprintf_r+0x17c>
 800e484:	b1b0      	cbz	r0, 800e4b4 <_svfiprintf_r+0x114>
 800e486:	9207      	str	r2, [sp, #28]
 800e488:	e014      	b.n	800e4b4 <_svfiprintf_r+0x114>
 800e48a:	eba0 0308 	sub.w	r3, r0, r8
 800e48e:	fa09 f303 	lsl.w	r3, r9, r3
 800e492:	4313      	orrs	r3, r2
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	46a2      	mov	sl, r4
 800e498:	e7d2      	b.n	800e440 <_svfiprintf_r+0xa0>
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	1d19      	adds	r1, r3, #4
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	9103      	str	r1, [sp, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	bfbb      	ittet	lt
 800e4a6:	425b      	neglt	r3, r3
 800e4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ac:	9307      	strge	r3, [sp, #28]
 800e4ae:	9307      	strlt	r3, [sp, #28]
 800e4b0:	bfb8      	it	lt
 800e4b2:	9204      	strlt	r2, [sp, #16]
 800e4b4:	7823      	ldrb	r3, [r4, #0]
 800e4b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4b8:	d10a      	bne.n	800e4d0 <_svfiprintf_r+0x130>
 800e4ba:	7863      	ldrb	r3, [r4, #1]
 800e4bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4be:	d132      	bne.n	800e526 <_svfiprintf_r+0x186>
 800e4c0:	9b03      	ldr	r3, [sp, #12]
 800e4c2:	1d1a      	adds	r2, r3, #4
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	9203      	str	r2, [sp, #12]
 800e4c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4cc:	3402      	adds	r4, #2
 800e4ce:	9305      	str	r3, [sp, #20]
 800e4d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e594 <_svfiprintf_r+0x1f4>
 800e4d4:	7821      	ldrb	r1, [r4, #0]
 800e4d6:	2203      	movs	r2, #3
 800e4d8:	4650      	mov	r0, sl
 800e4da:	f7f1 fe91 	bl	8000200 <memchr>
 800e4de:	b138      	cbz	r0, 800e4f0 <_svfiprintf_r+0x150>
 800e4e0:	9b04      	ldr	r3, [sp, #16]
 800e4e2:	eba0 000a 	sub.w	r0, r0, sl
 800e4e6:	2240      	movs	r2, #64	@ 0x40
 800e4e8:	4082      	lsls	r2, r0
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	3401      	adds	r4, #1
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f4:	4824      	ldr	r0, [pc, #144]	@ (800e588 <_svfiprintf_r+0x1e8>)
 800e4f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4fa:	2206      	movs	r2, #6
 800e4fc:	f7f1 fe80 	bl	8000200 <memchr>
 800e500:	2800      	cmp	r0, #0
 800e502:	d036      	beq.n	800e572 <_svfiprintf_r+0x1d2>
 800e504:	4b21      	ldr	r3, [pc, #132]	@ (800e58c <_svfiprintf_r+0x1ec>)
 800e506:	bb1b      	cbnz	r3, 800e550 <_svfiprintf_r+0x1b0>
 800e508:	9b03      	ldr	r3, [sp, #12]
 800e50a:	3307      	adds	r3, #7
 800e50c:	f023 0307 	bic.w	r3, r3, #7
 800e510:	3308      	adds	r3, #8
 800e512:	9303      	str	r3, [sp, #12]
 800e514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e516:	4433      	add	r3, r6
 800e518:	9309      	str	r3, [sp, #36]	@ 0x24
 800e51a:	e76a      	b.n	800e3f2 <_svfiprintf_r+0x52>
 800e51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e520:	460c      	mov	r4, r1
 800e522:	2001      	movs	r0, #1
 800e524:	e7a8      	b.n	800e478 <_svfiprintf_r+0xd8>
 800e526:	2300      	movs	r3, #0
 800e528:	3401      	adds	r4, #1
 800e52a:	9305      	str	r3, [sp, #20]
 800e52c:	4619      	mov	r1, r3
 800e52e:	f04f 0c0a 	mov.w	ip, #10
 800e532:	4620      	mov	r0, r4
 800e534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e538:	3a30      	subs	r2, #48	@ 0x30
 800e53a:	2a09      	cmp	r2, #9
 800e53c:	d903      	bls.n	800e546 <_svfiprintf_r+0x1a6>
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d0c6      	beq.n	800e4d0 <_svfiprintf_r+0x130>
 800e542:	9105      	str	r1, [sp, #20]
 800e544:	e7c4      	b.n	800e4d0 <_svfiprintf_r+0x130>
 800e546:	fb0c 2101 	mla	r1, ip, r1, r2
 800e54a:	4604      	mov	r4, r0
 800e54c:	2301      	movs	r3, #1
 800e54e:	e7f0      	b.n	800e532 <_svfiprintf_r+0x192>
 800e550:	ab03      	add	r3, sp, #12
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	462a      	mov	r2, r5
 800e556:	4b0e      	ldr	r3, [pc, #56]	@ (800e590 <_svfiprintf_r+0x1f0>)
 800e558:	a904      	add	r1, sp, #16
 800e55a:	4638      	mov	r0, r7
 800e55c:	f3af 8000 	nop.w
 800e560:	1c42      	adds	r2, r0, #1
 800e562:	4606      	mov	r6, r0
 800e564:	d1d6      	bne.n	800e514 <_svfiprintf_r+0x174>
 800e566:	89ab      	ldrh	r3, [r5, #12]
 800e568:	065b      	lsls	r3, r3, #25
 800e56a:	f53f af2d 	bmi.w	800e3c8 <_svfiprintf_r+0x28>
 800e56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e570:	e72c      	b.n	800e3cc <_svfiprintf_r+0x2c>
 800e572:	ab03      	add	r3, sp, #12
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	462a      	mov	r2, r5
 800e578:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <_svfiprintf_r+0x1f0>)
 800e57a:	a904      	add	r1, sp, #16
 800e57c:	4638      	mov	r0, r7
 800e57e:	f000 f879 	bl	800e674 <_printf_i>
 800e582:	e7ed      	b.n	800e560 <_svfiprintf_r+0x1c0>
 800e584:	08010560 	.word	0x08010560
 800e588:	0801056a 	.word	0x0801056a
 800e58c:	00000000 	.word	0x00000000
 800e590:	0800e2e9 	.word	0x0800e2e9
 800e594:	08010566 	.word	0x08010566

0800e598 <_printf_common>:
 800e598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59c:	4616      	mov	r6, r2
 800e59e:	4698      	mov	r8, r3
 800e5a0:	688a      	ldr	r2, [r1, #8]
 800e5a2:	690b      	ldr	r3, [r1, #16]
 800e5a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	bfb8      	it	lt
 800e5ac:	4613      	movlt	r3, r2
 800e5ae:	6033      	str	r3, [r6, #0]
 800e5b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	b10a      	cbz	r2, 800e5be <_printf_common+0x26>
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	6033      	str	r3, [r6, #0]
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	0699      	lsls	r1, r3, #26
 800e5c2:	bf42      	ittt	mi
 800e5c4:	6833      	ldrmi	r3, [r6, #0]
 800e5c6:	3302      	addmi	r3, #2
 800e5c8:	6033      	strmi	r3, [r6, #0]
 800e5ca:	6825      	ldr	r5, [r4, #0]
 800e5cc:	f015 0506 	ands.w	r5, r5, #6
 800e5d0:	d106      	bne.n	800e5e0 <_printf_common+0x48>
 800e5d2:	f104 0a19 	add.w	sl, r4, #25
 800e5d6:	68e3      	ldr	r3, [r4, #12]
 800e5d8:	6832      	ldr	r2, [r6, #0]
 800e5da:	1a9b      	subs	r3, r3, r2
 800e5dc:	42ab      	cmp	r3, r5
 800e5de:	dc26      	bgt.n	800e62e <_printf_common+0x96>
 800e5e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5e4:	6822      	ldr	r2, [r4, #0]
 800e5e6:	3b00      	subs	r3, #0
 800e5e8:	bf18      	it	ne
 800e5ea:	2301      	movne	r3, #1
 800e5ec:	0692      	lsls	r2, r2, #26
 800e5ee:	d42b      	bmi.n	800e648 <_printf_common+0xb0>
 800e5f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5f4:	4641      	mov	r1, r8
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	47c8      	blx	r9
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	d01e      	beq.n	800e63c <_printf_common+0xa4>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	f003 0306 	and.w	r3, r3, #6
 800e606:	2b04      	cmp	r3, #4
 800e608:	bf02      	ittt	eq
 800e60a:	68e5      	ldreq	r5, [r4, #12]
 800e60c:	6833      	ldreq	r3, [r6, #0]
 800e60e:	1aed      	subeq	r5, r5, r3
 800e610:	68a3      	ldr	r3, [r4, #8]
 800e612:	bf0c      	ite	eq
 800e614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e618:	2500      	movne	r5, #0
 800e61a:	4293      	cmp	r3, r2
 800e61c:	bfc4      	itt	gt
 800e61e:	1a9b      	subgt	r3, r3, r2
 800e620:	18ed      	addgt	r5, r5, r3
 800e622:	2600      	movs	r6, #0
 800e624:	341a      	adds	r4, #26
 800e626:	42b5      	cmp	r5, r6
 800e628:	d11a      	bne.n	800e660 <_printf_common+0xc8>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e008      	b.n	800e640 <_printf_common+0xa8>
 800e62e:	2301      	movs	r3, #1
 800e630:	4652      	mov	r2, sl
 800e632:	4641      	mov	r1, r8
 800e634:	4638      	mov	r0, r7
 800e636:	47c8      	blx	r9
 800e638:	3001      	adds	r0, #1
 800e63a:	d103      	bne.n	800e644 <_printf_common+0xac>
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e644:	3501      	adds	r5, #1
 800e646:	e7c6      	b.n	800e5d6 <_printf_common+0x3e>
 800e648:	18e1      	adds	r1, r4, r3
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	2030      	movs	r0, #48	@ 0x30
 800e64e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e652:	4422      	add	r2, r4
 800e654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e65c:	3302      	adds	r3, #2
 800e65e:	e7c7      	b.n	800e5f0 <_printf_common+0x58>
 800e660:	2301      	movs	r3, #1
 800e662:	4622      	mov	r2, r4
 800e664:	4641      	mov	r1, r8
 800e666:	4638      	mov	r0, r7
 800e668:	47c8      	blx	r9
 800e66a:	3001      	adds	r0, #1
 800e66c:	d0e6      	beq.n	800e63c <_printf_common+0xa4>
 800e66e:	3601      	adds	r6, #1
 800e670:	e7d9      	b.n	800e626 <_printf_common+0x8e>
	...

0800e674 <_printf_i>:
 800e674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e678:	7e0f      	ldrb	r7, [r1, #24]
 800e67a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e67c:	2f78      	cmp	r7, #120	@ 0x78
 800e67e:	4691      	mov	r9, r2
 800e680:	4680      	mov	r8, r0
 800e682:	460c      	mov	r4, r1
 800e684:	469a      	mov	sl, r3
 800e686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e68a:	d807      	bhi.n	800e69c <_printf_i+0x28>
 800e68c:	2f62      	cmp	r7, #98	@ 0x62
 800e68e:	d80a      	bhi.n	800e6a6 <_printf_i+0x32>
 800e690:	2f00      	cmp	r7, #0
 800e692:	f000 80d1 	beq.w	800e838 <_printf_i+0x1c4>
 800e696:	2f58      	cmp	r7, #88	@ 0x58
 800e698:	f000 80b8 	beq.w	800e80c <_printf_i+0x198>
 800e69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6a4:	e03a      	b.n	800e71c <_printf_i+0xa8>
 800e6a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6aa:	2b15      	cmp	r3, #21
 800e6ac:	d8f6      	bhi.n	800e69c <_printf_i+0x28>
 800e6ae:	a101      	add	r1, pc, #4	@ (adr r1, 800e6b4 <_printf_i+0x40>)
 800e6b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6b4:	0800e70d 	.word	0x0800e70d
 800e6b8:	0800e721 	.word	0x0800e721
 800e6bc:	0800e69d 	.word	0x0800e69d
 800e6c0:	0800e69d 	.word	0x0800e69d
 800e6c4:	0800e69d 	.word	0x0800e69d
 800e6c8:	0800e69d 	.word	0x0800e69d
 800e6cc:	0800e721 	.word	0x0800e721
 800e6d0:	0800e69d 	.word	0x0800e69d
 800e6d4:	0800e69d 	.word	0x0800e69d
 800e6d8:	0800e69d 	.word	0x0800e69d
 800e6dc:	0800e69d 	.word	0x0800e69d
 800e6e0:	0800e81f 	.word	0x0800e81f
 800e6e4:	0800e74b 	.word	0x0800e74b
 800e6e8:	0800e7d9 	.word	0x0800e7d9
 800e6ec:	0800e69d 	.word	0x0800e69d
 800e6f0:	0800e69d 	.word	0x0800e69d
 800e6f4:	0800e841 	.word	0x0800e841
 800e6f8:	0800e69d 	.word	0x0800e69d
 800e6fc:	0800e74b 	.word	0x0800e74b
 800e700:	0800e69d 	.word	0x0800e69d
 800e704:	0800e69d 	.word	0x0800e69d
 800e708:	0800e7e1 	.word	0x0800e7e1
 800e70c:	6833      	ldr	r3, [r6, #0]
 800e70e:	1d1a      	adds	r2, r3, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6032      	str	r2, [r6, #0]
 800e714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e71c:	2301      	movs	r3, #1
 800e71e:	e09c      	b.n	800e85a <_printf_i+0x1e6>
 800e720:	6833      	ldr	r3, [r6, #0]
 800e722:	6820      	ldr	r0, [r4, #0]
 800e724:	1d19      	adds	r1, r3, #4
 800e726:	6031      	str	r1, [r6, #0]
 800e728:	0606      	lsls	r6, r0, #24
 800e72a:	d501      	bpl.n	800e730 <_printf_i+0xbc>
 800e72c:	681d      	ldr	r5, [r3, #0]
 800e72e:	e003      	b.n	800e738 <_printf_i+0xc4>
 800e730:	0645      	lsls	r5, r0, #25
 800e732:	d5fb      	bpl.n	800e72c <_printf_i+0xb8>
 800e734:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e738:	2d00      	cmp	r5, #0
 800e73a:	da03      	bge.n	800e744 <_printf_i+0xd0>
 800e73c:	232d      	movs	r3, #45	@ 0x2d
 800e73e:	426d      	negs	r5, r5
 800e740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e744:	4858      	ldr	r0, [pc, #352]	@ (800e8a8 <_printf_i+0x234>)
 800e746:	230a      	movs	r3, #10
 800e748:	e011      	b.n	800e76e <_printf_i+0xfa>
 800e74a:	6821      	ldr	r1, [r4, #0]
 800e74c:	6833      	ldr	r3, [r6, #0]
 800e74e:	0608      	lsls	r0, r1, #24
 800e750:	f853 5b04 	ldr.w	r5, [r3], #4
 800e754:	d402      	bmi.n	800e75c <_printf_i+0xe8>
 800e756:	0649      	lsls	r1, r1, #25
 800e758:	bf48      	it	mi
 800e75a:	b2ad      	uxthmi	r5, r5
 800e75c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e75e:	4852      	ldr	r0, [pc, #328]	@ (800e8a8 <_printf_i+0x234>)
 800e760:	6033      	str	r3, [r6, #0]
 800e762:	bf14      	ite	ne
 800e764:	230a      	movne	r3, #10
 800e766:	2308      	moveq	r3, #8
 800e768:	2100      	movs	r1, #0
 800e76a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e76e:	6866      	ldr	r6, [r4, #4]
 800e770:	60a6      	str	r6, [r4, #8]
 800e772:	2e00      	cmp	r6, #0
 800e774:	db05      	blt.n	800e782 <_printf_i+0x10e>
 800e776:	6821      	ldr	r1, [r4, #0]
 800e778:	432e      	orrs	r6, r5
 800e77a:	f021 0104 	bic.w	r1, r1, #4
 800e77e:	6021      	str	r1, [r4, #0]
 800e780:	d04b      	beq.n	800e81a <_printf_i+0x1a6>
 800e782:	4616      	mov	r6, r2
 800e784:	fbb5 f1f3 	udiv	r1, r5, r3
 800e788:	fb03 5711 	mls	r7, r3, r1, r5
 800e78c:	5dc7      	ldrb	r7, [r0, r7]
 800e78e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e792:	462f      	mov	r7, r5
 800e794:	42bb      	cmp	r3, r7
 800e796:	460d      	mov	r5, r1
 800e798:	d9f4      	bls.n	800e784 <_printf_i+0x110>
 800e79a:	2b08      	cmp	r3, #8
 800e79c:	d10b      	bne.n	800e7b6 <_printf_i+0x142>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	07df      	lsls	r7, r3, #31
 800e7a2:	d508      	bpl.n	800e7b6 <_printf_i+0x142>
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	6861      	ldr	r1, [r4, #4]
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	bfde      	ittt	le
 800e7ac:	2330      	movle	r3, #48	@ 0x30
 800e7ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7b6:	1b92      	subs	r2, r2, r6
 800e7b8:	6122      	str	r2, [r4, #16]
 800e7ba:	f8cd a000 	str.w	sl, [sp]
 800e7be:	464b      	mov	r3, r9
 800e7c0:	aa03      	add	r2, sp, #12
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	f7ff fee7 	bl	800e598 <_printf_common>
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	d14a      	bne.n	800e864 <_printf_i+0x1f0>
 800e7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d2:	b004      	add	sp, #16
 800e7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	f043 0320 	orr.w	r3, r3, #32
 800e7de:	6023      	str	r3, [r4, #0]
 800e7e0:	4832      	ldr	r0, [pc, #200]	@ (800e8ac <_printf_i+0x238>)
 800e7e2:	2778      	movs	r7, #120	@ 0x78
 800e7e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	6831      	ldr	r1, [r6, #0]
 800e7ec:	061f      	lsls	r7, r3, #24
 800e7ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7f2:	d402      	bmi.n	800e7fa <_printf_i+0x186>
 800e7f4:	065f      	lsls	r7, r3, #25
 800e7f6:	bf48      	it	mi
 800e7f8:	b2ad      	uxthmi	r5, r5
 800e7fa:	6031      	str	r1, [r6, #0]
 800e7fc:	07d9      	lsls	r1, r3, #31
 800e7fe:	bf44      	itt	mi
 800e800:	f043 0320 	orrmi.w	r3, r3, #32
 800e804:	6023      	strmi	r3, [r4, #0]
 800e806:	b11d      	cbz	r5, 800e810 <_printf_i+0x19c>
 800e808:	2310      	movs	r3, #16
 800e80a:	e7ad      	b.n	800e768 <_printf_i+0xf4>
 800e80c:	4826      	ldr	r0, [pc, #152]	@ (800e8a8 <_printf_i+0x234>)
 800e80e:	e7e9      	b.n	800e7e4 <_printf_i+0x170>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	f023 0320 	bic.w	r3, r3, #32
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	e7f6      	b.n	800e808 <_printf_i+0x194>
 800e81a:	4616      	mov	r6, r2
 800e81c:	e7bd      	b.n	800e79a <_printf_i+0x126>
 800e81e:	6833      	ldr	r3, [r6, #0]
 800e820:	6825      	ldr	r5, [r4, #0]
 800e822:	6961      	ldr	r1, [r4, #20]
 800e824:	1d18      	adds	r0, r3, #4
 800e826:	6030      	str	r0, [r6, #0]
 800e828:	062e      	lsls	r6, r5, #24
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	d501      	bpl.n	800e832 <_printf_i+0x1be>
 800e82e:	6019      	str	r1, [r3, #0]
 800e830:	e002      	b.n	800e838 <_printf_i+0x1c4>
 800e832:	0668      	lsls	r0, r5, #25
 800e834:	d5fb      	bpl.n	800e82e <_printf_i+0x1ba>
 800e836:	8019      	strh	r1, [r3, #0]
 800e838:	2300      	movs	r3, #0
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	4616      	mov	r6, r2
 800e83e:	e7bc      	b.n	800e7ba <_printf_i+0x146>
 800e840:	6833      	ldr	r3, [r6, #0]
 800e842:	1d1a      	adds	r2, r3, #4
 800e844:	6032      	str	r2, [r6, #0]
 800e846:	681e      	ldr	r6, [r3, #0]
 800e848:	6862      	ldr	r2, [r4, #4]
 800e84a:	2100      	movs	r1, #0
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7f1 fcd7 	bl	8000200 <memchr>
 800e852:	b108      	cbz	r0, 800e858 <_printf_i+0x1e4>
 800e854:	1b80      	subs	r0, r0, r6
 800e856:	6060      	str	r0, [r4, #4]
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	6123      	str	r3, [r4, #16]
 800e85c:	2300      	movs	r3, #0
 800e85e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e862:	e7aa      	b.n	800e7ba <_printf_i+0x146>
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	4632      	mov	r2, r6
 800e868:	4649      	mov	r1, r9
 800e86a:	4640      	mov	r0, r8
 800e86c:	47d0      	blx	sl
 800e86e:	3001      	adds	r0, #1
 800e870:	d0ad      	beq.n	800e7ce <_printf_i+0x15a>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	079b      	lsls	r3, r3, #30
 800e876:	d413      	bmi.n	800e8a0 <_printf_i+0x22c>
 800e878:	68e0      	ldr	r0, [r4, #12]
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	4298      	cmp	r0, r3
 800e87e:	bfb8      	it	lt
 800e880:	4618      	movlt	r0, r3
 800e882:	e7a6      	b.n	800e7d2 <_printf_i+0x15e>
 800e884:	2301      	movs	r3, #1
 800e886:	4632      	mov	r2, r6
 800e888:	4649      	mov	r1, r9
 800e88a:	4640      	mov	r0, r8
 800e88c:	47d0      	blx	sl
 800e88e:	3001      	adds	r0, #1
 800e890:	d09d      	beq.n	800e7ce <_printf_i+0x15a>
 800e892:	3501      	adds	r5, #1
 800e894:	68e3      	ldr	r3, [r4, #12]
 800e896:	9903      	ldr	r1, [sp, #12]
 800e898:	1a5b      	subs	r3, r3, r1
 800e89a:	42ab      	cmp	r3, r5
 800e89c:	dcf2      	bgt.n	800e884 <_printf_i+0x210>
 800e89e:	e7eb      	b.n	800e878 <_printf_i+0x204>
 800e8a0:	2500      	movs	r5, #0
 800e8a2:	f104 0619 	add.w	r6, r4, #25
 800e8a6:	e7f5      	b.n	800e894 <_printf_i+0x220>
 800e8a8:	08010571 	.word	0x08010571
 800e8ac:	08010582 	.word	0x08010582

0800e8b0 <memmove>:
 800e8b0:	4288      	cmp	r0, r1
 800e8b2:	b510      	push	{r4, lr}
 800e8b4:	eb01 0402 	add.w	r4, r1, r2
 800e8b8:	d902      	bls.n	800e8c0 <memmove+0x10>
 800e8ba:	4284      	cmp	r4, r0
 800e8bc:	4623      	mov	r3, r4
 800e8be:	d807      	bhi.n	800e8d0 <memmove+0x20>
 800e8c0:	1e43      	subs	r3, r0, #1
 800e8c2:	42a1      	cmp	r1, r4
 800e8c4:	d008      	beq.n	800e8d8 <memmove+0x28>
 800e8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8ce:	e7f8      	b.n	800e8c2 <memmove+0x12>
 800e8d0:	4402      	add	r2, r0
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	428a      	cmp	r2, r1
 800e8d6:	d100      	bne.n	800e8da <memmove+0x2a>
 800e8d8:	bd10      	pop	{r4, pc}
 800e8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8e2:	e7f7      	b.n	800e8d4 <memmove+0x24>

0800e8e4 <_sbrk_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	4d06      	ldr	r5, [pc, #24]	@ (800e900 <_sbrk_r+0x1c>)
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	602b      	str	r3, [r5, #0]
 800e8f0:	f7f2 ff68 	bl	80017c4 <_sbrk>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d102      	bne.n	800e8fe <_sbrk_r+0x1a>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	b103      	cbz	r3, 800e8fe <_sbrk_r+0x1a>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	20001288 	.word	0x20001288

0800e904 <memcpy>:
 800e904:	440a      	add	r2, r1
 800e906:	4291      	cmp	r1, r2
 800e908:	f100 33ff 	add.w	r3, r0, #4294967295
 800e90c:	d100      	bne.n	800e910 <memcpy+0xc>
 800e90e:	4770      	bx	lr
 800e910:	b510      	push	{r4, lr}
 800e912:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e91a:	4291      	cmp	r1, r2
 800e91c:	d1f9      	bne.n	800e912 <memcpy+0xe>
 800e91e:	bd10      	pop	{r4, pc}

0800e920 <_realloc_r>:
 800e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e924:	4607      	mov	r7, r0
 800e926:	4614      	mov	r4, r2
 800e928:	460d      	mov	r5, r1
 800e92a:	b921      	cbnz	r1, 800e936 <_realloc_r+0x16>
 800e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e930:	4611      	mov	r1, r2
 800e932:	f7ff bc4d 	b.w	800e1d0 <_malloc_r>
 800e936:	b92a      	cbnz	r2, 800e944 <_realloc_r+0x24>
 800e938:	f7ff fbde 	bl	800e0f8 <_free_r>
 800e93c:	4625      	mov	r5, r4
 800e93e:	4628      	mov	r0, r5
 800e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e944:	f000 f81a 	bl	800e97c <_malloc_usable_size_r>
 800e948:	4284      	cmp	r4, r0
 800e94a:	4606      	mov	r6, r0
 800e94c:	d802      	bhi.n	800e954 <_realloc_r+0x34>
 800e94e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e952:	d8f4      	bhi.n	800e93e <_realloc_r+0x1e>
 800e954:	4621      	mov	r1, r4
 800e956:	4638      	mov	r0, r7
 800e958:	f7ff fc3a 	bl	800e1d0 <_malloc_r>
 800e95c:	4680      	mov	r8, r0
 800e95e:	b908      	cbnz	r0, 800e964 <_realloc_r+0x44>
 800e960:	4645      	mov	r5, r8
 800e962:	e7ec      	b.n	800e93e <_realloc_r+0x1e>
 800e964:	42b4      	cmp	r4, r6
 800e966:	4622      	mov	r2, r4
 800e968:	4629      	mov	r1, r5
 800e96a:	bf28      	it	cs
 800e96c:	4632      	movcs	r2, r6
 800e96e:	f7ff ffc9 	bl	800e904 <memcpy>
 800e972:	4629      	mov	r1, r5
 800e974:	4638      	mov	r0, r7
 800e976:	f7ff fbbf 	bl	800e0f8 <_free_r>
 800e97a:	e7f1      	b.n	800e960 <_realloc_r+0x40>

0800e97c <_malloc_usable_size_r>:
 800e97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e980:	1f18      	subs	r0, r3, #4
 800e982:	2b00      	cmp	r3, #0
 800e984:	bfbc      	itt	lt
 800e986:	580b      	ldrlt	r3, [r1, r0]
 800e988:	18c0      	addlt	r0, r0, r3
 800e98a:	4770      	bx	lr

0800e98c <_init>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	bf00      	nop
 800e990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e992:	bc08      	pop	{r3}
 800e994:	469e      	mov	lr, r3
 800e996:	4770      	bx	lr

0800e998 <_fini>:
 800e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99a:	bf00      	nop
 800e99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e99e:	bc08      	pop	{r3}
 800e9a0:	469e      	mov	lr, r3
 800e9a2:	4770      	bx	lr
